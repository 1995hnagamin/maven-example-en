<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<book id="book-hibernate3devNotebook">
    <title>${book.title}</title>

    <bookinfo>
        <isbn>9780984243334</isbn>

        <edition>${project.version}</edition>

        <editor>
            <firstname>Tim</firstname>

            <surname>O'Brien</surname>

            <affiliation>
                <orgname>${project.organization.name}</orgname>
            </affiliation>
        </editor>

        <authorgroup role="Primary Authors">
            <author>
                <firstname>Tim</firstname>

                <surname>O'Brien</surname>

                <affiliation>
                    <orgname>${project.organization.name}</orgname>
                </affiliation>
            </author>

            <author>
                <firstname>John</firstname>

                <surname>Casey</surname>

                <affiliation>
                    <orgname>${project.organization.name}</orgname>
                </affiliation>
            </author>

            <author>
                <firstname>Brian</firstname>

                <surname>Fox</surname>

                <affiliation>
                    <orgname>${project.organization.name}</orgname>
                </affiliation>
            </author>

            <author>
                <firstname>Jason</firstname>

                <surname>Van Zyl</surname>

                <affiliation>
                    <orgname>${project.organization.name}</orgname>
                </affiliation>
            </author>

            <author>
                <firstname>Juven</firstname>

                <surname>Xu</surname>

                <affiliation>
                    <orgname>${project.organization.name}</orgname>
                </affiliation>
            </author>

            <author>
                <firstname>Thomas</firstname>

                <surname>Locher</surname>
            </author>
        </authorgroup>

        <authorgroup role="Contributing Authors">
            <author>
                <firstname>Dan</firstname>

                <surname>Fabulich</surname>
            </author>

            <author>
                <firstname>Eric</firstname>

                <surname>Redmond</surname>
            </author>

            <author>
                <firstname>Larry</firstname>

                <surname>Shatzer</surname>
            </author>

            <author>
                <firstname>Bruce</firstname>

                <surname>Snyder</surname>
            </author>
        </authorgroup>

        <abstract role="description-short">
            <para>Maven: By Example is an introduction to Apache Maven.</para>
        </abstract>

        <copyright>
            <year>2010</year>

            <holder>Sonatype. All Rights Reserved.</holder>
        </copyright>

        <date>2010-12-07</date>

        <publisher>
            <publishername>Sonatype, Inc.</publishername>
        </publisher>

        <subjectset>
            <subject>
                <subjectterm>COM018000</subjectterm>
            </subject>
        </subjectset>

        <mediaobject role="cover">
            <imageobject remap="lrg" role="front-large">
                <imagedata fileref="covers/cvr_lrg.jpg" format="JPEG" width="600px" />
            </imageobject>

            <imageobject remap="s" role="front">
                <imagedata fileref="covers/cvr_s.gif" format="GIF" />
            </imageobject>

            <imageobject remap="xs" role="front-small">
                <imagedata fileref="covers/cvr_xs.gif" format="GIF" />
            </imageobject>

            <imageobject remap="cs" role="thumbnail">
                <imagedata fileref="covers/cvr_cs.gif" format="GIF" />
            </imageobject>
        </mediaobject>
    </bookinfo>

    <preface id="preface-copyright" role="copyrightpg">
        <title>Copyright</title>

        <para>Copyright © ${copyright.year} ${project.organization.name}</para>

        <para>Online version published by ${project.organization.name},
            ${organization.address}.</para>

        <para>This work is licensed under a Creative Commons
            Attribution-Noncommercial-No Derivative Works 3.0 United States license. For
            more information about this license, see <ulink
                                                          url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">http://creativecommons.org/licenses/by-nc-nd/3.0/us/</ulink>.</para>

        <para>Nexus™, Nexus Professional™, Matrix™, Matrix Professional™, Sonatype
            Professional™, all Matrix-related logos, and all Nexus-related logos are
            trademarks or registered trademarks of Sonatype, Inc., in the United States
            and other countries.</para>

        <para>Java™, all Java-based trademarks and logos, Hudson™, and all
            Hudson-based trademarks and logos are trademarks or registered trademarks of
            Oracle, Inc., in the United States and other countries.</para>

        <para>IBM® and WebSphere® are trademarks or registered trademarks of
            International Business Machines, Inc., in the United States and other
            countries.</para>

        <para>Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United
            States and other countries.</para>

        <para>Apache and the Apache feather logo are trademarks of The Apache
            Software Foundation.</para>

        <para>Linux® is the registered trademark of Linus Torvalds in the U.S. and
            other countries.</para>

        <para>Many of the designations used by manufacturers and sellers to
            distinguish their products are claimed as trademarks. Where those
            designations appear in this book, and ${project.organization.name} was aware
            of a trademark claim, the designations have been printed in caps or initial
            caps.</para>

        <para>While every precaution has been taken in the preparation of this book,
            the publisher and authors assume no responsibility for errors or omissions,
            or for damages resulting from the use of the information contained
            herein.</para>
    </preface>

    <preface id="public-foreword">
        <title>Foreword: ${project.version}</title>

        <para>We've had some great feedback so far, please keep it coming. Your
            feedback is greatly appreciated, send it to <ulink
                                                             url="mailto:book@sonatype.com">book@sonatype.com</ulink>. To keep yourself
            informed of updates, read the Sonatype blog at: <ulink
                                                                 url="http://www.sonatype.com/people">http://www.sonatype.com/people</ulink>.
            Everyone at Sonatype has had a hand in this version of the book, so the
            author is officially "Sonatype".</para>

        <para>Please report any bugs or issues on this book's GetSatisfaction page,
            here: <ulink
                       url="http://www.getsatisfaction.com/sonatype/products/sonatype_maven_by_example"
                       userlevel="">http://www.getsatisfaction.com/sonatype/products/sonatype_maven_by_example</ulink>.</para>

        <para>Tim O'Brien (tobrien@sonatype.com)</para>

        <para>June 2011</para>

        <section>
            <title>Changes in Edition 0.6</title>

            <para>The following changes were made in 0.6:</para>

            <itemizedlist>
                <listitem>
                    <para>Fixed an annoyance. The Maven by Example example source code was
                        being packaged in
                        <filename>mvnex-examples-&lt;VERSION&gt;-project.zip</filename>. This
                        was causing a few problems that became evident during a migration to a
                        new web server. Because this link contains the version number, it
                        locks us into constantly maintaining old versions of the example code.
                        In this edition, the link has been shortened and the version number
                        has been removed from the filename. (<ulink
                                                                  url="https://issues.sonatype.org/browse/MVNEX-141">MVNEX-141</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated site template for the new Sonatype web site.</para>
                </listitem>
            </itemizedlist>
        </section>
    </preface>

    <preface id="preface-1">
        <title>Preface</title>

        <para>Maven is a build tool, a project management tool, an abstract
            container for running build tasks. It is a tool that has shown itself
            indispensable for projects that graduate beyond the simple and need to start
            finding consistent ways to manage and build large collections of
            interdependent modules and libraries which make use of tens or hundreds of
            third-party components. It is a tool that has removed much of the burden of
            3rd party dependency management from the daily work schedule of millions of
            engineers, and it has enabled many organizations to evolve beyond the toil
            and struggle of build management into a new phase where the effort required
            to build and maintain software is no longer a limiting factor in software
            design.</para>

        <para>This work is the first attempt at a comprehensive title on Maven. It
            builds upon the combined experience and work of the authors of all previous
            Maven titles, and you should view it not as a finished work but as the first
            edition in a long line of updates to follow. While Maven has been around for
            a few years, the authors of this book believe that it has just begun to
            deliver on the audacious promises it makes. The authors, and company behind
            this book, <ulink url="http://www.sonatype.com">Sonatype</ulink>, believe
            that the publishing of this book marks the beginning of a new phase of
            innovation and development surrounding Maven and the software ecosystem that
            surrounds it.</para>

        <section id="preface-1-sect-how-to-use">
            <title>How to Use this Book</title>

            <para>Pick it up, read some of the text on the pages. Once you reach the
                end of a page, you'll want to either click on a link if you are looking at
                the <acronym>HTML</acronym> version, or, if you have the printed book,
                you'll lift up a corner of a page and turn it. If you are sitting next to
                a computer, you can type in some of the examples and try to follow along.
                Please don't throw a book this large at anyone in anger.</para>

            <para>This book introduces Maven by developing some real examples and
                walking you through the structure of those examples providing motivation
                and explanation along the way.</para>
        </section>

        <section id="preface-1-sect-feedback">
            <title>Your Feedback</title>

            <para>We didn't write this book so we could send off a Word document to
                our publisher and go to a launch party to congratulate ourselves on a job
                well done. This book isn't "done"; in fact, this book will never be
                completely "done". The subject it covers is constantly changing and
                expanding, and we consider this work an ongoing conversation with the
                community. Publishing the book means that the real work has just begun,
                and you, as a reader, play a pivotal role to helping to maintain and
                improve this book. If you see something in this book that is wrong: a
                spelling mistake, some bad code, a blatant lie, then you should tell us,
                send us an email at: <ulink
                                          url="mailto:book@sonatype.com">book@sonatype.com</ulink>.</para>

            <!--TODO: Change this to mavenbook@sonatype.com when it is available.-->

            <para>The ongoing relevance of this book depends upon your feedback. We
                want to know what works and what doesn't work. We want to know if there is
                any information you couldn't understand. We especially want to know if you
                think that the book is awful. Positive or negative comments are all
                welcome. Of course, we reserve the right to disagree, but all feedback
                will be rewarded with a gracious response.</para>
        </section>

        <section id="preface-1-sect-fontConventions">
            <title>Font Conventions</title>

            <para>This book follows certain conventions for font usage. Understanding
                these conventions up-front makes it easier to use this book.</para>

            <variablelist>
                <varlistentry>
                    <term><emphasis
                               role="italic"><literal>Italic</literal></emphasis></term>

                    <listitem>
                        <para>Used for filenames, file extensions, URLs, application names,
                            emphasis, and new terms when they are first introduced.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <variablelist>
                <varlistentry>
                    <term><literal moreinfo="none">Constant width</literal></term>

                    <listitem>
                        <para>Used for Java class names, methods, variables, properties,
                            data types, database elements, and snippets of code that appear in
                            text.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <variablelist>
                <varlistentry>
                    <term><emphasis role="bold"> <literal moreinfo="none">Constant width
                                bold</literal> </emphasis></term>

                    <listitem>
                        <para>Used for commands you enter at the command line and to
                            highlight new code inserted in a running example.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <variablelist>
                <varlistentry>
                    <term><emphasis role="italic"> <literal moreinfo="none">Constant width
                                italic</literal> </emphasis></term>

                    <listitem>
                        <para>Used to annotate output.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="preface-1-sect-writing-conventions">
            <title>Maven Writing Conventions</title>

            <para>The book follows certain conventions for naming and font usage in
                relation to Apache Maven. Understanding these conventions up-front makes
                it easier to read this book.</para>

            <variablelist>
                <varlistentry>
                    <term>Compiler plugin</term>

                    <listitem>
                        <para>Maven plugins are capitalized.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>create</varname> goal</term>

                    <listitem>
                        <para>Maven goal names are displayed in a constant width
                            font.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>"plugin"</term>

                    <listitem>
                        <para>While "plug-in" (with hyphen) would be the grammatically
                            correct form, this book writes the term as "plugin" both because it
                            is easier to read and write and because it is a standard throughout
                            the Maven community.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Maven Lifecycle, Maven Standard Directory Layout, Maven Plugin,
                        Project Object Model</term>

                    <listitem>
                        <para>Core Maven concepts are capitalized whenever they are being
                            referenced in the text.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>goalParameter</varname></term>

                    <listitem>
                        <para>A Maven goal parameter is displayed in a constant width
                            font.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>compile</varname> phase</term>

                    <listitem>
                        <para>Lifecycle phases are displayed in a constant width
                            font.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="preface-1-sect-acknowledgements">
            <title>Acknowledgements</title>

            <para>Sonatype would like to thank the following contributors. The people
                listed below have provided feedback which has helped improve the quality
                of this book. Thanks to Raymond Toal, Steve Daly, Paul Strack, Paul
                Reinerfelt, Chad Gorshing, Marcus Biel, Brian Dols, Mangalaganesh
                Balasubramanian, Marius Kruger, Chris Maki, Matthew McCollough, Matt
                Raible, and Mark Stewart. Special thanks to Joel Costigliola for helping
                to debug and correct the Spring web chapter. Stan Guillory was practically
                a contributing author given the number of corrections he posted to the
                book's Get Satisfaction. Thank you Stan. Special thanks to Richard Coasby
                of Bamboo for acting as the provisional grammar consultant.</para>

            <para>Thanks to our contributing authors including Eric Redmond.</para>

            <para>Thanks to the following contributors who reported errors either in
                an email or using the Get Satisfaction site: Paco Soberón, Ray Krueger,
                Steinar Cook, Henning Saul, Anders Hammar, "george_007", "ksangani", Niko
                Mahle, Arun Kumar, Harold Shinsato, "mimil", "-thrawn-", Matt Gumbley. If
                you see your Get Satisfaction username in this list, and you would like it
                replaced with your real name, send an email to <ulink
                                                                    url="mailto:book@sonatype.com">book@sonatype.com</ulink>.</para>

            <para>Special thanks to Grant Birchmeier for taking the time to proofread
                portions of the book and file extremely detailed feedback via
                GetSatisfaction.</para>
        </section>
    </preface>

    <chapter id="introduction">
        <title>Introducing Apache Maven</title>

        <para>This book is an introduction to Apache Maven which uses a set of
            examples to demonstrate core concepts. Starting with a simple Maven project
            which contains a single class and a single unit test, this book slowly
            develops an enterprise multi-module project which interacts with a database,
            interacts with a remote API, and presents a simple web application.</para>

        <section id="introduction-sect-whatIsMaven">
            <title>Maven... What is it?</title>

            <para>The answer to this question depends on your own perspective. The
                great majority of Maven users are going to call Maven a “build tool”: a
                tool used to build deployable artifacts from source code. Build engineers
                and project managers might refer to Maven as something more comprehensive:
                a project management tool. What is the difference? A build tool such as
                <indexterm>
                    <primary>Apache Ant</primary>
                </indexterm>Ant is focused solely on preprocessing, compilation,
                packaging, testing, and distribution. A project management tool such as
                Maven provides a superset of features found in a build tool. In addition
                to providing build capabilities, Maven can also run reports, generate a
                web site, and facilitate communication among members of a working
                team.</para>

            <para>A more formal definition of <ulink
                                                   url="http://maven.apache.org">Apache Maven</ulink>: <indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>definition</secondary>
                </indexterm><indexterm>
                    <primary>Maven</primary>

                    <see>Apache Maven</see>
                </indexterm>Maven is a project management tool which encompasses a
                project object model, a set of standards, a project lifecycle, a
                dependency management system, and logic for executing plugin goals at
                defined phases in a lifecycle. When you use Maven, you describe your
                project using a well-defined project object model, Maven can then apply
                cross-cutting logic from a set of shared (or custom) plugins.</para>

            <para>Don't let the fact that Maven is a "project management" tool scare
                you away. If you were just looking for a build tool, Maven will do the
                job. In fact, the first few chapters of this book will deal with the most
                common use case: using Maven to build and distribute your project.</para>
        </section>

        <section id="installation-sect-conventionConfiguration">
            <title>Convention Over Configuration</title>

            <para><indexterm>
                    <primary>Convention Over Configuration</primary>
                </indexterm>Convention over configuration is a simple concept. Systems,
                libraries, and frameworks should assume reasonable defaults. Without
                requiring unnecessary configuration, systems should "just work". Popular
                frameworks such as <ulink url="http://www.rubyonrails.org/">Ruby on
                    Rails</ulink> and <acronym>EJB3</acronym> have started to adhere to these
                principles in reaction to the configuration complexity of frameworks such
                as the initial <acronym>EJB</acronym> 2.1 specifications. An illustration
                of convention over configuration is something like <acronym>EJB3</acronym>
                persistence: all you need to do to make a particular bean persistent is to
                annotate that class with <classname>@Entity. </classname> The framework
                assumes table and column names based on the name of the class and the
                names of the properties. Hooks are provided for you to override these
                default, assumed names if the need arises, but, in most cases, you will
                find that using the framework-supplied defaults results in a faster
                project execution.</para>

            <para><indexterm>
                    <primary>path customization</primary>
                </indexterm>Maven incorporates this concept by providing sensible
                default behavior for projects. Without customization, source code is
                assumed to be in <filename>\${basedir}/src/main/java</filename> and
                resources are assumed to be in
                <filename>\${basedir}/src/main/resources</filename>. Tests are assumed to
                be in <filename>\${basedir}/src/test</filename>, and a project is assumed
                to produce a <acronym>JAR</acronym> file. Maven assumes that you want the
                compile byte code to <filename>\${basedir}/target/classes</filename> and
                then create a distributable <acronym>JAR</acronym> file in
                <filename>\${basedir}/target</filename>. While this might seem trivial,
                consider the fact that most Ant-based builds have to define the locations
                of these directories. Ant doesn't ship with any built-in idea of where
                source code or resources might be in a project; you have to supply this
                information. Maven's adoption of convention over configuration goes
                farther than just simple directory locations, Maven's core plugins apply a
                common set of conventions for compiling source code, packaging
                distributions, generating web sites, and many other processes. Maven's
                strength comes from the fact that it is "opinionated", it has a defined
                life-cycle and a set of common plugins that know how to build and assemble
                software. If you follow the conventions, Maven will require almost zero
                effort - just put your source in the correct directory, and Maven will
                take care of the rest.</para>

            <para>One side-effect of using systems that follow "convention over
                configuration" is that end-users might feel that they are forced to use a
                particular methodology or approach. While it is certainly true that Maven
                has some core opinions that shouldn't be challenged, most of the defaults
                can be customized. For example, the location of a project's source code
                and resources can be customized, names of <acronym>JAR</acronym> files can
                be customized, and through the development of custom plugins, almost any
                behavior can be tailored to your specific environment's requirements. If
                you don't care to follow convention, Maven will allow you to customize
                defaults in order to adapt to your specific requirements.</para>
        </section>

        <section id="installation-sect-common-interface" label="">
            <title>A Common Interface</title>

            <para><indexterm>
                    <primary>common interface</primary>
                </indexterm>Before Maven provided a common interface for building
                software, every single project had someone dedicated to managing a fully
                customized build system. Developers had to take time away from developing
                software to learn about the idiosyncrasies of each new project they wanted
                to contribute to. In 2001, you'd have a completely different approach to
                building a project like <ulink
                                             url="http://turbine.apache.org/">Turbine</ulink> than you would to
                building a project like <ulink
                                             url="http://tomcat.apache.org">Tomcat</ulink>. If a new source code
                analysis tool came out that would perform static analysis on source code,
                or if someone developed a new unit testing framework, everybody would have
                to drop what they were doing and figure out how to fit it into each
                project's custom build environment. How do you run unit tests? There were
                a thousand different answers. This environment was characterized by a
                thousand endless arguments about tools and build procedures. The age
                before Maven was an age of inefficiency, the age of the "Build
                Engineer".</para>

            <para>Today, most open source developers have used or are currently using
                Maven to manage new software projects. This transition is less about
                developers moving from one build tool to another and more about developers
                starting to adopt a common interface for project builds. As software
                systems have become more modular, build systems have become more complex,
                and the number of projects has sky-rocketed. Before Maven, when you wanted
                to check out a project like <ulink url="http://activemq.apache.org">Apache
                    ActiveMQ</ulink> or <ulink url="http://servicemix.apache.org">Apache
                    ServiceMix</ulink> from Subversion and build it from source, you really
                had to set aside about an hour to figure out the build system for each
                particular project. What does the project need to build? What libraries do
                I need to download? Where do I put them? What goals can I execute in the
                build? In the best case, it took a few minutes to figure out a new
                project's build, and in the worst cases (like the old Servlet API
                implementation in the Jakarta Project), a project's build was so difficult
                it would take multiple hours just to get to the point where a new
                contributor could edit source and compile the project. These days, you
                check it out from source, and you run <command>mvn
                    install</command>.</para>

            <para>While Maven provides an array of benefits including dependency
                management and reuse of common build logic through plugins, the core
                reason why it has succeeded is that it has defined a common interface for
                building software. When you see that a project like <ulink
                                                                         url="http://wicket.apache.org">Apache ActiveMQ</ulink> uses Maven, you can
                assume that you'll be able to check it out from source and build it with
                <command>mvn install</command> without much hassle. You know where the
                ignition keys goes, you know that the gas pedal is on the right-side, and
                the brake is on the left.</para>
        </section>

        <section id="installation-sect-universal-reuse">
            <title>Universal Reuse through Maven Plugins</title>

            <para><indexterm>
                    <primary>universal reuse</primary>
                </indexterm>The core of Maven is pretty dumb, it doesn't know how to do
                much beyond parsing a few <acronym>XML</acronym> documents and keeping
                track of a lifecycle and a few plugins. Maven has been designed to
                delegate most responsibility to a set of Maven Plugins which can affect
                the Maven Lifecycle and offer access to goals. Most of the action in Maven
                happens in plugin goals which take care of things like compiling source,
                packaging bytecode, publishing sites, and any other task which need to
                happen in a build. The Maven you download from Apache doesn't know much
                about packaging a <acronym>WAR</acronym> file or running JUnit tests; most
                of the intelligence of Maven is implemented in the plugins and the plugins
                are retrieved from the Maven Repository. In fact, the first time you ran
                something like <command>mvn install</command> with a brand-new Maven
                installation it retrieved most of the core Maven plugins from the
                <indexterm>
                    <primary>public repository</primary>

                    <secondary>Central Maven Repository</secondary>
                </indexterm>Central Maven Repository. This is more than just a trick to
                minimize the download size of the Maven distribution, this is behavior
                which allows you to upgrade a plugin to add capability to your project's
                build. The fact that Maven retrieves both dependencies and plugins from
                the remote repository allows for universal reuse of build logic.</para>

            <para><indexterm>
                    <primary>Surefire plugin</primary>
                </indexterm>The Maven Surefire plugin is the plugin that is responsible
                for running unit tests. Somewhere between version 1.0 and the version that
                is in wide use today someone decided to add support for the TestNG unit
                testing framework in addition to the support for JUnit. This upgrade
                happened in a way that didn't break backwards compatibility. If you were
                using the Surefire plugin to compile and execute JUnit 3 unit tests, and
                you upgraded to the most recent version of the Surefire plugin, your tests
                continued to execute without fail. But, you gained new functionality, if
                you want to execute unit tests in TestNG you now have that ability. You
                also gained the ability to run annotated JUnit 4 unit tests. You gained
                all of these capabilities without having to upgrade your Maven
                installation or install new software. Most importantly, nothing about your
                project had to change aside from a version number for a plugin a single
                Maven configuration file called the Project Object Model (POM).</para>

            <para>It is this mechanism that affects much more than the Surefire
                plugin. Maven has plugins for everything from compiling Java code, to
                generating reports, to deploying to an application server. Maven has
                abstracted common build tasks into plugins which are maintained centrally
                and shared universally. If the state-of-the-art changes in any area of the
                build, if some new unit testing framework is released or if some new tool
                is made available, you don't have to be the one to hack your project's
                custom build system to support it. You benefit from the fact that plugins
                are downloaded from a remote repository and maintained centrally. This is
                what is meant by universal reuse through Maven plugins.</para>
        </section>

        <section id="installation-sect-conceptual">
            <title>Conceptual Model of a "Project"</title>

            <para><indexterm>
                    <primary>Project Object Model (POM)</primary>
                </indexterm>Maven maintains a model of a project. You are not just
                compiling source code into bytecode, you are developing a description of a
                software project and assigning a unique set of coordinates to a project.
                You are describing the attributes of the project. What is the project's
                license? Who develops and contributes to the project? What other projects
                does this project depend upon? Maven is more than just a "build tool", it
                is more than just an improvement on tools like make and Ant, it is a
                platform that encompasses a new semantics related to software projects and
                software development. This definition of a model for every project enables
                such features as:</para>

            <variablelist>
                <varlistentry>
                    <term>Dependency Management</term>

                    <listitem>
                        <para><indexterm>
                                <primary>dependency management</primary>
                            </indexterm>Because a project is defined by a unique set of
                            coordinates consisting of a group identifier, an artifact
                            identifier, and a version, projects can now use these coordinates to
                            declare dependencies.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Remote Repositories</term>

                    <listitem>
                        <para><indexterm>
                                <primary>remote repositories</primary>
                            </indexterm>Related to dependency management, we can use the
                            coordinates defined in the Maven Project Object Model
                            (<acronym>POM</acronym>) to create repositories of Maven
                            artifacts.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Universal Reuse of Build Logic</term>

                    <listitem>
                        <para><indexterm>
                                <primary>universal reuse</primary>
                            </indexterm>Plugins contain logic that works with the descriptive
                            data and configuration parameters defined in Project Object Model
                            (<acronym>POM</acronym>); they are not designed to operate upon
                            specific files in known locations.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Tool Portability / Integration</term>

                    <listitem>
                        <para><indexterm>
                                <primary>IDE integration</primary>
                            </indexterm>Tools like Eclipse, NetBeans, and IntelliJ now have a
                            common place to find information about a project. Before the advent
                            of Maven, every <acronym>IDE</acronym> had a different way to store
                            what was essentially a custom Project Object Model
                            (<acronym>POM</acronym>). Maven has standardized this description,
                            and while each IDE continues to maintain custom project files, they
                            can be easily generated from the model.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Easy Searching and Filtering of Project Artifacts</term>

                    <listitem>
                        <para><indexterm>
                                <primary>searching</primary>
                            </indexterm><indexterm>
                                <primary>Nexus</primary>
                            </indexterm>Tools like Nexus allow you to index and search the
                            contents of a repository using the information stored in the
                            <acronym>POM</acronym>.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="installation-sect-mavenAlternativeAnt">
            <title>Is Maven an alternative to XYZ?</title>

            <para><indexterm>
                    <primary>comparison to Ant</primary>
                </indexterm><indexterm>
                    <primary>Apache Ant</primary>
                </indexterm>So, sure, Maven is an alternative to Ant, but <ulink
                                                                               url="http://ant.apache.org">Apache Ant</ulink> continues to be a great,
                widely-used tool. It has been the reigning champion of Java builds for
                years, and you can integrate Ant build scripts with your project's Maven
                build very easily. This is a common usage pattern for a Maven project. On
                the other hand, as more and more open source projects move to Maven as a
                project management platform, working developers are starting to realize
                that Maven not only simplifies the task of build management, it is helping
                to encourage a common interface between developers and software projects.
                Maven is more of a platform than a tool, while you could consider Maven an
                alternative to Ant, you are comparing apples to oranges. "Maven" includes
                more than just a build tool.</para>

            <para>This is the central point that makes all of the Maven vs. Ant, Maven
                vs. Buildr, Maven vs. Gradle arguments irrelevant. Maven isn't totally
                defined by the mechanics of your build system. It isn't about scripting
                the various tasks in your build as much as it is about encouraging a set
                of standards, a common interface, a life-cycle, a standard repository
                format, a standard directory layout, etc. It certainly isn't about what
                format the <acronym>POM</acronym> happens to be in <acronym>(XML</acronym>
                vs. <acronym>YAML</acronym> vs. Ruby). Maven is much larger than that, and
                Maven refers to much more than the tool itself. When this book talks of
                Maven, it is referring to the constellation of software, systems, and
                standards that support it. Buildr, Ivy, Gradle, all of these tools
                interact with the repository format that Maven helped create, and you
                could just as easily use a repository manager like Nexus to support a
                build written entirely in Ant.</para>

            <para>While Maven is an alternative to many of these tools, the community
                needs to evolve beyond seeing technology as a zero-sum game between
                unfriendly competitors in a competition for users and developers. This
                might be how large corporations relate to one another, but it has very
                little relevance to the way that open source communities work. The
                headline "Who's winning? Ant or Maven?" isn't very constructive. If you
                force us to answer this question, we're definitely going to say that Maven
                is a superior alternative to Ant as a foundational technology for a build;
                at the same time, Maven's boundaries are constantly shifting and the Maven
                community is constantly trying to seek out new ways to become more
                ecumenical, more inter-operable, more cooperative. The core tenets of
                Maven are declarative builds, dependency management, repository managers,
                universal reuse through plugins, but the specific incarnation of these
                ideas at any given moment is less important than the sense that the open
                source community is collaborating to reduce the inefficiency of
                "enterprise-scale builds".</para>
        </section>

        <section id="installation-sect-compare-ant-maven" label="">
            <title>Comparing Maven with Ant</title>

            <para><indexterm>
                    <primary>comparison to Ant</primary>
                </indexterm><indexterm>
                    <primary>Apache Ant</primary>
                </indexterm>The authors of this book have no interest in creating a feud
                between Apache Ant and Apache Maven, but we are also cognizant of the fact
                that most organizations have to make a decision between the two standard
                solutions: Apache Ant and Apache Maven. In this section, we compare and
                contrast the tools.</para>

            <para>Ant excels at build process, it is a build system modeled after make
                with targets and dependencies. Each target consists of a set of
                instructions which are coded in <acronym>XML</acronym>. There is a
                <sgmltag>copy</sgmltag> task and a <sgmltag>javac</sgmltag> task as well
                as a <sgmltag>jar</sgmltag> task. When you use Ant, you supply Ant with
                specific instructions for compiling and packaging your output. Look at the
                following example of a simple <filename>build.xml</filename>
                file:<indexterm>
                    <primary>Apache Ant</primary>

                    <secondary>build.xml</secondary>
            </indexterm></para>

            <example id="ex-ant-sample">
                <title>A Simple Ant build.xml File</title>

                <programlisting language="xml">&lt;project name="my-project" default="dist" basedir="."&gt;
                    &lt;description&gt;
                    simple example build file
                    &lt;/description&gt;
                    &lt;!-- set global properties for this build --&gt;
                    &lt;property name="src" location="src/main/java"/&gt;
                    &lt;property name="build" location="target/classes"/&gt;
                    &lt;property name="dist"  location="target"/&gt;

                    &lt;target name="init"&gt;
                    &lt;!-- Create the time stamp --&gt;
                    &lt;tstamp/&gt;
                    &lt;!-- Create the build directory structure used by compile --&gt;
                    &lt;mkdir dir="\${build}"/&gt;
                    &lt;/target&gt;

                    &lt;target name="compile" depends="init"
                    description="compile the source " &gt;
                    &lt;!-- Compile the java code from \${src} into \${build} --&gt;
                    &lt;javac srcdir="\${src}" destdir="\${build}"/&gt;
                    &lt;/target&gt;

                    &lt;target name="dist" depends="compile"
                    description="generate the distribution" &gt;
                    &lt;!-- Create the distribution directory --&gt;
                    &lt;mkdir dir="\${dist}/lib"/&gt;

                    &lt;!-- Put everything in \${build} into the MyProject-\${DSTAMP}.jar file --&gt;
                    &lt;jar jarfile="\${dist}/lib/MyProject-\${DSTAMP}.jar" basedir="\${build}"/&gt;
                    &lt;/target&gt;

                    &lt;target name="clean"
                    description="clean up" &gt;
                    &lt;!-- Delete the \${build} and \${dist} directory trees --&gt;
                    &lt;delete dir="\${build}"/&gt;
                    &lt;delete dir="\${dist}"/&gt;
                    &lt;/target&gt;
                    &lt;/project&gt;</programlisting>
            </example>

            <para>In this simple Ant example, you can see how you have to tell Ant
                exactly what to do. There is a compile goal which includes the
                <varname>javac</varname> task that compiles the source in the
                <filename>src/main/java</filename> directory to the
                <filename>target/classes</filename> directory. You have to tell Ant
                exactly where your source is, where you want the resulting bytecode to be
                stored, and how to package this all into a <acronym>JAR</acronym> file.
                While there are some recent developments that help make Ant less
                procedural, a developer's experience with Ant is in coding a procedural
                language written in <acronym>XML</acronym>.</para>

            <para>Contrast the previous Ant example with a Maven example. In Maven, to
                create a JAR file from some Java source, all you need to do is create a
                simple <filename>pom.xml</filename>, place your source code in
                <filename>\${basedir}/src/main/java</filename> and then run <command>mvn
                    install</command> from the command line. The example Maven
                <filename>pom.xml</filename> that achieves the same results as the simple
                Ant file listed in <xref linkend="ex-ant-sample" /> is shown in <xref
                                                                                     linkend="ex-maven-sample" />.<indexterm>
                    <primary>pom.xml</primary>
                </indexterm><indexterm>
                    <primary>Project Object Model (POM)</primary>
            </indexterm></para>

            <example id="ex-maven-sample">
                <title>A Sample Maven pom.xml</title>

                <programlisting language="xml">&lt;project&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
                    &lt;artifactId&gt;my-project&lt;/artifactId&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;/project&gt;</programlisting>
            </example>

            <para>That's all you need in your <filename>pom.xml</filename>. Running
                <command>mvn install</command> from the command line will process
                resources, compile source, execute unit tests, create a
                <acronym>JAR</acronym>, and install the <acronym>JAR</acronym> in a local
                repository for reuse in other projects. Without modification, you can run
                <command>mvn site</command> and then find an
                <filename>index.html</filename> file in <filename>target/site</filename>
                that contains links to JavaDoc and a few reports about your source
                code.</para>

            <para>Admittedly, this is the simplest possible example project containing
                nothing more than some source code and producing a simple
                <acronym>JAR</acronym>. It is a project which closely follows Maven
                conventions and doesn't require any dependencies or customization. If we
                wanted to start customizing the behavior, our <filename>pom.xml</filename>
                is going to grow in size, and in the largest of projects you can see
                collections of very complex Maven <acronym>POM</acronym>s which contain a
                great deal of plugin customization and dependency declarations. But, even
                when your project's <acronym>POM</acronym> files become more substantial,
                they hold an entirely different kind of information from the build file of
                a similarly sized project using Ant. Maven <acronym>POM</acronym>s contain
                declarations: "This is a <acronym>JAR</acronym> project", and "The source
                code is in <filename>src/main/java</filename>". Ant build files contain
                explicit instructions: "This is project", "The source is in
                <filename>src/main/java</filename>", "Run javac against this directory",
                "Put the results in <filename>target/classes</filename>", "Create a
                <acronym>JAR</acronym> from the ....", etc. Where Ant had to be explicit
                about the process, there was something "built-in" to Maven that just knew
                where the source code was and how it should be processed.</para>

            <para>The differences between Ant and Maven in this example are:</para>

            <para><variablelist>
                    <varlistentry>
                        <term>Apache Ant</term>

                        <listitem>
                            <para><itemizedlist>
                                    <listitem>
                                        <para>Ant doesn't have formal conventions like a common
                                            project directory structure or default behavior. You have to
                                            tell Ant <emphasis>exactly</emphasis> where to find the
                                            source and where to put the output. Informal conventions
                                            have emerged over time, but they haven't been codified into
                                            the product.</para>
                                    </listitem>

                                    <listitem>
                                        <para>Ant is procedural. You have to tell Ant exactly what
                                            to do and when to do it. You have to tell it to compile,
                                            then copy, then compress.</para>
                                    </listitem>

                                    <listitem>
                                        <para>Ant doesn't have a lifecycle. You have to define goals
                                            and goal dependencies. You have to attach a sequence of
                                            tasks to each goal manually.</para>
                                    </listitem>
                            </itemizedlist></para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>Apache Maven</term>

                        <listitem>
                            <para><itemizedlist>
                                    <listitem>
                                        <para>Maven has conventions. It knows where your source code
                                            is because you followed the convention. Maven's Compiler
                                            plugin put the bytecode in
                                            <filename>target/classes</filename>, and it produces a
                                            <acronym>JAR</acronym> file in target.</para>
                                    </listitem>

                                    <listitem>
                                        <para>Maven is declarative. All you had to do was create a
                                            <filename>pom.xml</filename> file and put your source in the
                                            default directory. Maven took care of the rest.</para>
                                    </listitem>

                                    <listitem>
                                        <para>Maven has a lifecycle which was invoked when you
                                            executed <command>mvn install</command>. This command told
                                            Maven to execute a series of sequential lifecycle phases
                                            until it reached the install lifecycle phase. As a
                                            side-effect of this journey through the lifecycle, Maven
                                            executed a number of default plugin goals which did things
                                            like compile and create a <acronym>JAR</acronym>.</para>
                                    </listitem>
                            </itemizedlist></para>
                        </listitem>
                    </varlistentry>
            </variablelist></para>

            <para>Maven has built-in intelligence about common project tasks in the
                form of Maven plugins. If you wanted to write and execute unit tests, all
                you would need to do is write the tests, place them in
                <filename>\${basedir}/src/test/java</filename>, add a test-scoped
                dependency on either TestNG or JUnit, and run <command>mvn test</command>.
                If you wanted to deploy a web application and not a
                <acronym>JAR</acronym>, all you would need to do is change your project
                type to <varname>war</varname> and put your docroot in
                <filename>\${basedir}/src/main/webapp</filename>. Sure, you can do all of
                this with Ant, but you will be writing the instructions from scratch. In
                Ant, you would first have to figure out where the JUnit
                <acronym>JAR</acronym> file should be. Then you would have to create a
                classpath that includes the JUnit <acronym>JAR</acronym> file. Then you
                would tell Ant where it should look for test source code, write a goal
                that compiles the test source to bytecode, and execute the unit tests with
                JUnit.</para>

            <para>Without supporting technologies like antlibs and Ivy (even with
                these supporting technologies), Ant has the feeling of a custom procedural
                build. An efficient set of Maven <acronym>POM</acronym>s in a project
                which adheres to Maven's assumed conventions has surprisingly little
                <acronym>XML</acronym> compared to the Ant alternative. Another benefit of
                Maven is the reliance on widely-shared Maven plugins. Everyone uses the
                Maven Surefire plugin for unit testing, and if someone adds support for a
                new unit testing framework, you can gain new capabilities in your own
                build by just incrementing the version of a particular Maven plugin in
                your project's <acronym>POM</acronym>.</para>

            <para>The decision to use Maven or Ant isn't a binary one, and Ant still
                has a place in a complex build. If your current build contains some highly
                customized process, or if you've written some Ant scripts to complete a
                specific process in a specific way that cannot be adapted to the Maven
                standards, you can still use these scripts with Maven. Ant is made
                available as a core Maven plugin. Custom Maven plugins can be implemented
                in Ant, and Maven projects can be configured to execute Ant scripts within
                the Maven project lifecycle.</para>
        </section>
    </chapter>

    <chapter id="installation">
        <title>Installing Maven</title>

        <para><indexterm>
                <primary>Apache Maven</primary>

                <secondary>installation of</secondary>
            </indexterm><indexterm>
                <primary>installing Maven</primary>
            </indexterm>This chapter contains very detailed instructions for
            installing Maven on a number of different platforms. Instead of assuming a
            level of familiarity with installing software and setting environment
            variables, we've opted to be as thorough as possible to minimize any
            problems that might arise do to a partial installation. The only thing this
            chapter assumes is that you've already installed a suitable <indexterm>
                <primary>Java Development Kit (JDK)</primary>
            </indexterm>Java Development Kit (<acronym>JDK</acronym>). If you are just
            interested in installation, you can move on to the rest of the book after
            reading through <xref linkend="installation-sect-maven-download"
                                  xrefstyle="select: title" /> and <xref
                                                                        linkend="installation-sect-maven-install" xrefstyle="select: title" />. If
            you are interested in the details of your Maven installation, this entire
            chapter will give you an overview of what you've installed and the meaning
            of the Apache Software License, Version 2.0.</para>

        <section id="installation-sect-java">
            <title>Verify your Java Installation</title>

            <para><indexterm>
                    <primary>Java Development Kit (JDK)</primary>
                </indexterm><indexterm>
                    <primary>Maven prerequisites</primary>
                </indexterm><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>prerequisites</secondary>
                </indexterm>While Maven can run on Java 1.4, this book assumes that you
                are running at least Java 5. Go with the most recent stable Java
                Development Kit (<acronym>JDK</acronym>) available for your operating
                system. Either Java 5 or Java 6 will work with all of the examples in this
                book.</para>

            <para><screen><prompt moreinfo="none">% </prompt><command moreinfo="none">java -version</command>
                    java version "1.5.0_16"
                    Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-284)
                    Java HotSpot(TM) Client VM (build 1.5.0_16-133, mixed mode, sharing)
            </screen></para>

            <para>Maven works with all certified Java<superscript>TM</superscript>
                compatible development kits, and a few non-certified implementations of
                Java. The examples in this book were written and tested against the
                official Java Development Kit releases downloaded from the Sun
                Microsystems web site. If you’re working with a Linux distribution, you
                may need to download Sun’s <acronym>JDK</acronym> yourself and make sure
                it’s the version you’re invoking (by running <command>java
                    -version</command>). Now that Sun has open-sourced Java, this will
                hopefully improve in the future, and we’ll get the Sun
                <acronym>JRE</acronym> and <acronym>JDK</acronym> by default even in
                purist Linux distributions. Until that day, you may need to do some of
                your own downloading.</para>
        </section>

        <section id="installation-sect-maven-download">
            <title>Downloading Maven</title>

            <para><indexterm>
                    <primary>downloading Maven</primary>
                </indexterm><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>downloading</secondary>
                </indexterm>You can download Maven from the Apache Maven project website
                at <ulink
                        url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

            <para>When downloading Maven, make sure you choose the latest version of
                Apache Maven from the Maven website. The latest version of Maven when this
                book was written was Maven ${maven.version}. If you are not familiar with
                the Apache Software License, you should familiarize yourself with the
                terms of the license before you start using the product. More information
                on the Apache Software License can be found in <xref
                                                                    linkend="installation-sect-license" />.</para>
        </section>

        <section id="installation-sect-maven-install">
            <title>Installing Maven</title>

            <para><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>installation of</secondary>
                </indexterm><indexterm>
                    <primary>installing Maven</primary>
                </indexterm>There are wide differences between operating systems such as
                Mac <acronym>OS X</acronym> and Microsoft Windows, and there are subtle
                differences between different versions of Windows. Luckily, the process of
                installing Maven on all of these operating systems is relatively painless
                and straightforward. The following sections outline the recommended
                best-practice for installing Maven on a variety of operating
                systems.</para>

            <section id="installation-sect-maven-osx">
                <title>Installing Maven on Mac OSX</title>

                <para><indexterm>
                        <primary>installing Maven</primary>

                        <secondary>on Mac OSX</secondary>
                    </indexterm>You can download a binary release of Maven<indexterm>
                        <primary>installing Maven</primary>

                        <secondary sortas="Mac OS X">on Mac OS X</secondary>
                    </indexterm><indexterm>
                        <primary sortas="maven @installing">Maven, installing</primary>

                        <secondary sortas="Mac OS X">on Mac OS X</secondary>
                    </indexterm><indexterm>
                        <primary>Mac OS X, installing Maven on</primary>
                    </indexterm> from <ulink
                                           url="http://maven.apache.org/download.html"></ulink>. Download the
                    current release of Maven in a format that is convenient for you to work
                    with. Pick an appropriate place for it to live, and expand the archive
                    there. If you expanded the archive into the directory
                    <filename>/usr/local/apache-maven-${maven.version}</filename>, you may
                    want to create a symbolic link to make it easier to work with and to
                    avoid the need to change any environment configuration when you upgrade
                    to a newer version:</para>

                <screen>/usr/local % <command moreinfo="none">cd /usr/local
                    </command>/usr/local % <command moreinfo="none">ln -s apache-maven-${maven.version} maven
                    </command>/usr/local % <command>export M2_HOME=/usr/local/maven</command>
                    /usr/local % <command>export PATH=\${M2_HOME}/bin:\${PATH}</command></screen>

                <para>Once Maven is installed, you need to do a couple of things to make
                    it work correctly. You need to add its <filename
                                                                moreinfo="none">bin</filename> directory in the distribution (in this
                    example, <filename moreinfo="none">/usr/local/maven/bin</filename>) to
                    your command path. You also need to set the environment variable
                    <varname>M2_HOME<indexterm>
                            <primary>M2_HOME environment variable</primary>

                            <secondary>Maven installation and</secondary>
                        </indexterm><indexterm>
                            <primary>PATH variable, Maven installation and</primary>
                    </indexterm></varname> to the top-level directory you installed (in
                    this example, <filename
                                       moreinfo="none">/usr/local/maven</filename>).</para>

                <note>
                    <para>Installation instructions are the same for both
                        <acronym>OSX</acronym> Tiger and <acronym>OSX</acronym> Leopard. It
                        has been reported that Maven 2.0.6 is shipping with a preview release
                        of XCode. If you have installed XCode, run <command>mvn</command> from
                        the command-line to check availability. XCode installs Maven in
                        <filename>/usr/share/maven</filename>. We recommend installing the
                        most recent version of Maven ${maven.version} as there have been a
                        number of critical bug fixes and improvements since Maven 2.0.6 was
                        released.</para>
                </note>

                <para>You'll need to add both <envar>M2_HOME</envar> and
                    <envar>PATH</envar> to a script that will run every time you login. To
                    do this, add the following lines to
                    <filename>.bash_login</filename>.</para>

                <programlisting>export M2_HOME=/usr/local/maven
                    export PATH=\${M2_HOME}/bin:\${PATH}</programlisting>

                <para>Once you've added these lines to your own environment, you will be
                    able to run Maven from the command line.</para>

                <note>
                    <para>These installation instructions assume that you are running
                        bash.</para>
                </note>

                <section id="installation-sect-macports">
                    <title>Installing Maven on OSX using MacPorts</title>

                    <para><indexterm>
                            <primary>installing Maven</primary>

                            <secondary>on Mac OSX with MacPorts</secondary>
                        </indexterm>If you are using MacPorts, you can install the maven2
                        port by executing the following command-line:</para>

                    <screen>$ <command>sudo port install maven2</command>
                        Password: ******
                        ---&gt;  Fetching maven2
                        ---&gt;  Attempting to fetch apache-maven-${maven.version}-bin.tar.bz2 
                        from http://www.apache.org/dist/maven/binaries
                        ---&gt;  Verifying checksum(s) for maven2
                        ---&gt;  Extracting maven2
                        ---&gt;  Configuring maven2
                        ---&gt;  Building maven2 with target all
                        ---&gt;  Staging maven2 into destroot
                        ---&gt;  Installing maven2 ${maven.version}_0
                        ---&gt;  Activating maven2 ${maven.version}_0
                        ---&gt;  Cleaning maven2
                    </screen>

                    <para>For more information about the maven2 port, see the maven2
                        <filename><ulink
                                       url="http://trac.macports.org/browser/trunk/dports/java/maven2/Portfile">Portfile</ulink></filename>.
                        For more information about MacPorts and how to install it, see the
                        <ulink url="http://www.macports.org/index.php">MacPorts project
                            page</ulink>.</para>
                </section>
            </section>

            <section id="installation-sect-windows">
                <title>Installing Maven on Microsoft Windows</title>

                <para><indexterm>
                        <primary>installing Maven</primary>

                        <secondary>on Windows</secondary>
                    </indexterm>Installing Maven on Windows is very similar to installing
                    Maven on Mac <acronym>OSX</acronym>, the main differences being the
                    installation location and the setting of an environment variable. This
                    book assumes a Maven installation directory of <filename>c:\Program
                        Files\apache-maven-${maven.version}</filename>, but it won't make a
                    difference if you install Maven in another directory as long as you
                    configure the proper environment variables. Once you've unpacked Maven
                    to the installation directory, you will need to set two environment
                    variables—<envar>PATH</envar> and <envar>M2_HOME</envar>. To set these
                    environment variables from the command-line, type in the following
                    commands:</para>

                <screen>C:\Users\tobrien &gt; <command>set M2_HOME=c:\Program Files\apache-maven-${maven.version}</command>
                    C:\Users\tobrien &gt; <command>set PATH=%PATH%;%M2_HOME%\bin</command></screen>

                <para>Setting these environment variables on the command-line will allow
                    you to run Maven in your current session, but unless you add them to the
                    System environment variables through the control panel, you'll have to
                    execute these two lines every time you log into your system. You should
                    modify both of these variables through the Control Panel in Microsoft
                    Windows.<!--TODO: Document process of setting environment variables in the window control panel system dialog.--></para>
            </section>

            <section id="installation-sect-maven-linux">
                <title>Installing Maven on Linux</title>

                <para><indexterm>
                        <primary>installing Maven</primary>

                        <secondary>on Linux</secondary>
                    </indexterm>To install Maven on a Linux machine follow the exact
                    procedure outlined in <xref
                                               linkend="installation-sect-maven-osx" />.</para>
            </section>

            <section id="installation-sect-bsd">
                <title>Installing Maven on FreeBSD or OpenBSD</title>

                <para><indexterm>
                        <primary>installing Maven</primary>

                        <secondary>on FreeBSD</secondary>
                    </indexterm><indexterm>
                        <primary>installing Maven</primary>

                        <secondary>on OpenBSD</secondary>
                    </indexterm>To install Maven on a FreeBSD or OpenBSD machine, follow
                    the exact procedure outlined in <xref
                                                         linkend="installation-sect-maven-osx" />.</para>
            </section>
        </section>

        <section id="installation-sect-test-install">
            <title>Testing a Maven Installation</title>

            <para><indexterm>
                    <primary>installing Maven</primary>

                    <secondary>verifying installation</secondary>
                </indexterm>Once Maven is installed, you can check the version by
                running <command>mvn -v</command> from the command-line. If Maven has been
                installed, you should see something resembling the following
                output.</para>

            <screen>$ <command>mvn -v</command>
                Apache Maven 3.0.1
                Java version: 1.6.0_21
                Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home
                Default locale: en_US, platform encoding: MacRoman
                OS name: "mac os x" version: "10.6.3" arch: "x86_64" Family: "mac"
            </screen>

            <para>If you see this output, you know that Maven is available and ready
                to be used. If you do not see this output, and your operating system
                cannot find the <command>mvn</command> command, make sure that your
                <envar>PATH</envar> environment variable and <envar>M2_HOME</envar>
                environment variable have been properly set.</para>
        </section>

        <section id="installation-sect-details">
            <title>Maven Installation Details</title>

            <para><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>installation directory</secondary>
                </indexterm><indexterm>
                    <primary>Maven directory</primary>
                </indexterm>Maven's download measures in at roughly 1.5 MiB<footnoteref
                                                                                linkend="foot-installation-mebibytes" />, it has attained such a slim
                download size because the core of Maven has been designed to retrieve
                plugins and dependencies from a remote repository on-demand. When you
                start using Maven, it will start to download plugins to a local repository
                described in <xref linkend="installation-sect-user" />. In case you are
                curious, let's take a quick look at what is in Maven's installation
                directory.<footnote id="foot-installation-mebibytes">
                    <para>Ever purchased a 200 GB hard drive only to realize that it
                        showed up as less than 200 GiB when you installed it? Computers
                        understand Gibibytes, but retailers sell products using Gigabytes. MiB
                        stands for Mebibyte which is defined as 2<superscript>20</superscript>
                        or 1024<superscript>2</superscript>. These binary prefix standards are
                        endorsed by the <acronym>IEEE</acronym>, <acronym>CIPM</acronym>, and
                        and <acronym>IEC</acronym>. For more information about Kibibytes,
                        Mebibytes, Gibibytes, and Tebibytes see <ulink
                                                                     url="http://en.wikipedia.org/wiki/Mebibyte">http://en.wikipedia.org/wiki/Mebibyte</ulink>,</para>
            </footnote></para>

            <screen>/usr/local/maven $ <command>ls -p1</command>
                LICENSE.txt
                NOTICE.txt
                README.txt
                bin/
                boot/
                conf/
                lib/</screen>

            <para><filename>LICENSE.txt</filename> contains the software license for
                <indexterm>
                    <primary>LICENSE.txt file</primary>
                </indexterm>Apache Maven. This license is described in some detail later
                in the section <xref linkend="installation-sect-license" />.
                <filename>NOTICE.txt</filename> contains some notices and attributions
                <indexterm>
                    <primary>NOTICE.txt file</primary>
                </indexterm>required by libraries that Maven depends on.<indexterm>
                    <primary>README.txt file</primary>
                </indexterm> <filename role="keep-together">README.txt</filename>
                contains some installation instructions. <filename>bin/</filename>
                contains the <filename>mvn</filename> script <indexterm>
                    <primary>mvn script</primary>
                </indexterm>that executes Maven. <filename>boot/</filename> contains a
                JAR file (<filename>classworlds-1.1.jar</filename>) that is responsible
                for creating <indexterm>
                    <primary>classworlds-1.1.jar file</primary>
                </indexterm>the Class Loader in which Maven executes.
                <filename>conf/</filename> contains a global <filename
                                                                  role="keep-together">settings.xml</filename> that can be used to
                <indexterm>
                    <primary>settings.xml file</primary>
                </indexterm>customize the behavior of your Maven installation. If you
                need to customize Maven, it is customary to override any settings in a
                <filename>settings.xml</filename> file stored in<indexterm>
                    <primary>m2 directory, contents of</primary>
                </indexterm> <filename>~/.m2</filename>. The <filename>lib/</filename>
                directory contains a single JAR file
                (<filename>maven-core-${maven.version}-uber.jar</filename>) that contains
                the core of Maven.</para>

            <note>
                <para>Unless you are working in a shared Unix environment, you should
                    avoid customizing the <filename>settings.xml</filename> in
                    <filename>M2_HOME/conf</filename>. Altering the global
                    <filename>settings.xml</filename> file in the Maven installation itself
                    is usually unnecessary and it tends to complicate the upgrade procedure
                    for Maven as you'll have to remember to copy the customized
                    <filename>settings.xml</filename> from the old Maven installation to the
                    new installation. If you need to customize
                    <filename>settings.xml</filename>, you should be editing your own
                    <filename>settings.xml</filename> in
                    <filename>~/.m2/settings.xml</filename>.</para>
            </note>

            <section id="installation-sect-user">
                <title>User-specific Configuration and Repository</title>

                <para><indexterm>
                        <primary>settings.xml</primary>
                    </indexterm><indexterm>
                        <primary>local repository</primary>
                    </indexterm><indexterm>
                        <primary>Apache Maven</primary>

                        <secondary>Maven settings</secondary>
                    </indexterm><indexterm>
                        <primary>Maven settings</primary>
                    </indexterm><indexterm>
                        <primary>Apache Maven</primary>

                        <secondary>local repository</secondary>
                    </indexterm>Once you start using Maven extensively, you'll notice that
                    Maven has created some local user-specific configuration files and a
                    local repository in your home directory. In <filename>~/.m2</filename>
                    there will be:</para>

                <variablelist>
                    <varlistentry>
                        <term>~/.m2/settings.xml</term>

                        <listitem>
                            <para>A file containing user-specific configuration for
                                authentication, repositories, and other information to customize
                                the behavior of Maven.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>~/.m2/repository/</term>

                        <listitem>
                            <para>This directory contains your local Maven repository. When
                                you download a dependency from a remote Maven repository, Maven
                                stores a copy of the dependency in your local repository.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>

                <note>
                    <para>In Unix (and OSX), your home directory will be referred to using
                        a tilde (i.e. <filename>~/bin</filename> refers to
                        <filename>/home/tobrien/bin</filename>). In Windows, we will also be
                        using <filename>~</filename> to refer to your home directory. In
                        Windows XP, your home directory is <filename>C:\Documents and
                            Settings\tobrien</filename>, and in Windows Vista, your home directory
                        is <filename>C:\Users\tobrien</filename>. From this point forward, you
                        should translate paths such as <filename>~/m2</filename> to your
                        operating system's equivalent.</para>
                </note>
            </section>

            <section id="installation-sect-upgrade">
                <title>Upgrading a Maven Installation</title>

                <para><indexterm>
                        <primary>upgrading Maven</primary>
                    </indexterm><indexterm>
                        <primary>Apache Maven</primary>

                        <secondary>upgrading</secondary>
                    </indexterm>If you've installed Maven on a Mac OSX or Unix machine
                    according to the details in <xref lang=""
                                                      linkend="installation-sect-maven-osx" /> and <xref
                                                                                                        linkend="installation-sect-maven-linux" />, it should be easy to upgrade
                    to newer versions of Maven when they become available. Simply install
                    the newer version of Maven
                    (<filename>/usr/local/maven-2.future</filename>) next to the existing
                    version of Maven
                    (<filename>/usr/local/maven-${maven.version}</filename>). Then switch
                    the symbolic link <filename>/usr/local/maven</filename> from
                    <filename>/usr/local/maven-${maven.version}</filename> to
                    <filename>/usr/local/maven-2.future</filename>. Since, you've already
                    set your <varname>M2_HOME</varname> variable to point to
                    <filename>/usr/local/maven</filename>, you won't need to change any
                    environment variables.</para>

                <para>If you have installed Maven on a Windows machine, simply unpack
                    Maven to <filename>c:\Program Files\maven-2.future</filename> and update
                    your <varname>M2_HOME</varname> variable.</para>

                <note>
                    <para>If you have any customizations to the global
                        <filename>settings.xml</filename> in
                        <filename>M2_HOME/conf</filename>, you will need to copy this
                        <filename>settings.xml</filename> to the <filename>conf</filename>
                        directory of the new Maven installation.</para>
                </note>
            </section>

            <section id="installation-sect-upgrade-detail">
                <title>Upgrading from Maven 1.x to Maven 2.x</title>

                <para>If you are upgrading from Maven 1 to Maven 2, you are going to be
                    using an entirely new POM and repository structure. If you have already
                    created a custom Maven 1 repository to hold custom artifacts, you can
                    use the Nexus Repository Manager to expose a Maven 1 repository in a
                    format that can be understood by Maven 2 clients. For more information
                    about the Nexus Repository Manager, see <emphasis><literal><ulink
                                                                                    url="http://www.sonatype.com/books/nexus-book/reference/">Repository
                                Management with Nexus</ulink></literal></emphasis>. In addition to tools
                    like Nexus, you can also configure references to repositories to use the
                    <varname>legacy</varname> layout format.</para>

                <para>If you have a set of Maven 1 projects, you may want to know about
                    the Maven One Plugin. The Maven One Plugin was designed to help projects
                    migrate from Maven 1 to Maven 2. If you have a Maven 1 project, you can
                    convert the project's POM by running the <varname>one:convert</varname>
                    goal as follows:</para>

                <screen>$ cd my-project
                    $ mvn one:convert</screen>

                <para><varname>one:convert</varname> will read a
                    <filename>project.xml</filename> and produce a
                    <filename>pom.xml</filename> that is compatible with Maven 2. If you've
                    customized a Maven 1 build using Jelly script in a
                    <filename>maven.xml</filename> file, you will need to investigate other
                    options. While Maven 1 emphasized Jelly scripting for customizing
                    builds, Maven 2 favors custom plugins or customization through scripting
                    Plugins or the Maven Antrun Plugin.</para>

                <para>The most important thing to know about when upgrading from Maven 1
                    to Maven 2 is that Maven 2 is a completely different build framework.
                    Maven 2 introduces the concept of the Maven Lifecycle and redefines the
                    relationships between plugins. If you upgrade from Maven 1 to Maven 2,
                    you need to invest some time in learning about the differences between
                    the two versions. Although it might seem straightforward to start
                    learning about the new POM structure, you should focus on the Lifecycle
                    first. If you understand the Maven Lifecycle, you will be able to use
                    Maven to its fullest potential.</para>
            </section>
        </section>

        <section id="installation-sect-uninstalling">
            <title>Uninstalling Maven</title>

            <para><indexterm>
                    <primary>uninstalling Maven</primary>
                </indexterm><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>uninstalling</secondary>
                </indexterm>Most of the installation instructions involve unpacking of
                the Maven distribution archive in a directory and setting of various
                environment variables. If you need to remove Maven from your computer, all
                you need to do is delete your Maven installation directory and remove the
                environment variables. You will also want to delete the
                <filename>~/.m2</filename> directory as it contains your local
                repository.</para>
        </section>

        <section id="installation-sect-getting-help">
            <title>Getting Help with Maven</title>

            <para><indexterm>
                    <primary>online resources</primary>
                </indexterm><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>getting help</secondary>
                </indexterm>While this book aims to be a comprehensive reference, there
                are going to be topics we will miss and special situations and tips which
                are not covered. While the core of Maven is very simple, the real work in
                Maven happens in the plugins, and there are too many plugins available to
                cover them all in one book. You are going to encounter problems and
                features which have not been covered in this book; in these cases, we
                suggest searching for answers at the following locations:</para>

            <variablelist>
                <varlistentry>
                    <term><ulink
                               url="http://maven.apache.org">http://maven.apache.org</ulink></term>

                    <listitem>
                        <para><indexterm>
                                <primary>Maven web site</primary>
                            </indexterm><indexterm>
                                <primary>Apache Maven</primary>

                                <secondary>project web site</secondary>
                            </indexterm>This will be the first place to look, the Maven web
                            site contains a wealth of information and documentation. Every
                            plugin has a few pages of documentation and there are a series of
                            "quick start" documents which will be helpful in addition to the
                            content of this book. While the Maven site contains a wealth of
                            information, it can also be a frustrating, confusing, and
                            overwhelming. There is a custom Google search box on the main Maven
                            page that will search known Maven sites for information. This
                            provides better results than a generic Google search.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Maven User Mailing List</term>

                    <listitem>
                        <para><indexterm>
                                <primary>users mailing list</primary>
                            </indexterm><indexterm>
                                <primary>Apache Maven</primary>

                                <secondary>users mailing list</secondary>
                            </indexterm>The Maven User mailing list is the place for users to
                            ask questions. Before you ask a question on the user mailing list,
                            you will want to search for any previous discussion that might
                            relate to your question. It is bad form to ask a question that has
                            already been asked without first checking to see if an answer
                            already exists in the archives. There are a number of useful mailing
                            list archive browsers, we've found Nabble to the be the most useful.
                            You can browse the User mailing list archives here: <ulink
                                                                                     url="http://www.nabble.com/Maven---Users-f178.html">http://www.nabble.com/Maven---Users-f178.html</ulink>.
                            You can join the user mailing list by following the instructions
                            available here <ulink
                                                url="http://maven.apache.org/mail-lists.html">http://maven.apache.org/mail-lists.html</ulink>.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><ulink
                               url="http://www.sonatype.com">http://www.sonatype.com</ulink></term>

                    <listitem>
                        <para><indexterm>
                                <primary>Sonatype</primary>
                            </indexterm>Sonatype maintains an online copy of this book and
                            other tutorials related to Apache Maven.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="installation-sect-license">
            <title>About the Apache Software License</title>

            <para><indexterm>
                    <primary>Apache Software License</primary>
                </indexterm>Apache Maven is released under the Apache Software License,
                Version 2.0. If you want to read this license, you can read
                <filename>\${M2_HOME}/LICENSE.txt</filename> or read this license on the
                Open Source Initiative's web site here: <ulink
                                                             url="http://www.opensource.org/licenses/apache2.0.php">http://www.opensource.org/licenses/apache2.0.php</ulink>.</para>

            <para>There's a good chance that, if you are reading this book, you are
                not a lawyer. If you are wondering what the Apache License, Version 2.0
                means, the Apache Software Foundation has assembled a very helpful
                Frequently Asked Questions (FAQ) page about the license available here:
                <ulink
                     url="http://www.apache.org/foundation/licence-FAQ.html">http://www.apache.org/foundation/licence-FAQ.html</ulink>.
                Here's is the answer to the question "I am not a lawyer. What does it all
                mean?"</para>

            <para><blockquote>
                    <para><emphasis>[This license] allows you to:</emphasis></para>

                    <itemizedlist>
                        <listitem>
                            <para>freely download and use Apache software, in whole or in
                                part, for personal, company internal, or commercial
                                purposes;</para>
                        </listitem>

                        <listitem>
                            <para>use Apache software in packages or distributions that you
                                create.</para>
                        </listitem>
                    </itemizedlist>

                    <para><emphasis>It forbids you to:</emphasis></para>

                    <itemizedlist>
                        <listitem>
                            <para>redistribute any piece of Apache-originated software without
                                proper attribution;</para>
                        </listitem>

                        <listitem>
                            <para>use any marks owned by The Apache Software Foundation in any
                                way that might state or imply that the Foundation endorses your
                                distribution;</para>
                        </listitem>

                        <listitem>
                            <para>use any marks owned by The Apache Software Foundation in any
                                way that might state or imply that you created the Apache software
                                in question.</para>
                        </listitem>
                    </itemizedlist>

                    <para><emphasis>It requires you to:</emphasis></para>

                    <itemizedlist>
                        <listitem>
                            <para>include a copy of the license in any redistribution you may
                                make that includes Apache software;</para>
                        </listitem>

                        <listitem>
                            <para>provide clear attribution to The Apache Software Foundation
                                for any distributions that include Apache software.</para>
                        </listitem>
                    </itemizedlist>

                    <para><emphasis>It does not require you to:</emphasis></para>

                    <itemizedlist>
                        <listitem>
                            <para>include the source of the Apache software itself, or of any
                                modifications you may have made to it, in any redistribution you
                                may assemble that includes it;</para>
                        </listitem>

                        <listitem>
                            <para>submit changes that you make to the software back to the
                                Apache Software Foundation (though such feedback is
                                encouraged).</para>
                        </listitem>
                    </itemizedlist>
            </blockquote></para>

            <para>This ends the installation information. The next part of the book
                contains Maven examples.</para>
        </section>
    </chapter>

    <chapter id="simple-project">
        <title>A Simple Maven Project</title>

        <section id="simple-project-sect-intro">
            <title>Introduction</title>

            <para>In this chapter, we introduce a simple project created from scratch
                using the <indexterm>
                    <primary>Archetype plugin</primary>
                </indexterm>Maven Archetype plugin. This elementary application provides
                us with the opportunity to discuss some core Maven concepts while you
                follow along with the development of the project.</para>

            <para>Before you can start using Maven for complex, multi-module builds,
                we have to start with the basics. If you’ve used Maven before, you’ll
                notice that it does a good job of taking care of the details. Your builds
                tend to “just work,” and you only really need to dive into the details of
                Maven when you want to customize the default behavior or write a custom
                plugin. However, when you do need to dive into the details, a thorough
                understanding of the core concepts is essential. This chapter aims to
                introduce you to the simplest possible Maven project and then presents
                some of the core concepts that make Maven a solid build platform. After
                reading it, you’ll have a fundamental understanding of the build
                lifecycle, Maven repositories, dependency management, and the <indexterm>
                    <primary>Project Object Model (POM)</primary>
                </indexterm>Project Object Model (<acronym>POM</acronym>).</para>

            <section id="simple-project-sect-downloading-example">
                <title>Downloading this Chapter's Example</title>

                <para><indexterm>
                        <primary>book examples</primary>
                    </indexterm>This chapter develops a very simple example which will be
                    used to explore core concepts of Maven. If you follow the steps
                    described in this chapter, you shouldn't need to download the examples
                    to recreate the code produced by the Maven. We will be using the Maven
                    Archetype plugin to create this simple project and this chapter doesn't
                    modify the project in any way. If you would prefer to read this chapter
                    with the final example source code, this chapter’s example project may
                    be downloaded with the book’s example code at:</para>

                <screen>${examples.download.url}</screen>

                <para>Unzip this archive in any directory, and then go to the
                    <filename>ch-simple/</filename> directory. There you will see a
                    directory named <filename>simple/</filename> that contains the source
                    code for this chapter.</para>
            </section>
        </section>

        <section id="simple-project-sect-create-simple">
            <title>Creating a Simple Project</title>

            <para><indexterm>
                    <primary>creating a project</primary>
                </indexterm><indexterm>
                    <primary>archetypes</primary>
                </indexterm><indexterm>
                    <primary>Archetype plugin</primary>

                    <secondary>creating a project</secondary>
                </indexterm>To start a new Maven project, use the Maven Archetype plugin
                from the command line. Run the <varname>archetype:generate</varname> goal,
                select archetype #77, and then enter "Y" to confirm and generate the new
                project:</para>

            <warning>
                <para>At the time of publication, the default
                    "maven-archetype-quickstart" was item #77 in a list of 284 available
                    archetypes. As more and more projects release Maven archetypes, this
                    list will change and the number for the default archetype may change.
                    Don't be surprised if you need to select a different number. When you
                    run <varname>archetype:generate</varname> as shown below, the default
                    <varname>maven-archetype-quickstart</varname> will be selected by
                    default.</para>
            </warning>

            <screen><command>$ mvn archetype:generate -DgroupId=org.sonatype.mavenbook.simple \
                    -DartifactId=simple \
                    -Dpackage=org.sonatype.mavenbook \
                    -Dversion=1.0-SNAPSHOT
                </command>[INFO] Scanning for projects...
                [INFO] Searching repository for plugin with prefix: 'archetype'.
                [INFO] ------------------------------------------------------------------------
                [INFO] Building Maven Default Project
                [INFO]    task-segment: [archetype:generate] (aggregator-style)
                [INFO] ------------------------------------------------------------------------
                [INFO] Preparing archetype:generate
                [INFO] No goals needed for project - skipping
                [INFO] Setting property: velocimacro.messages.on =&gt; 'false'.
                [INFO] Setting property: resource.loader =&gt; 'classpath'.
                [INFO] Setting property: resource.manager.logwhenfound =&gt; 'false'.
                [INFO] [archetype:generate {execution: default-cli}]
                [INFO] Generating project in Interactive mode
                [INFO] No archetype defined. Using maven-archetype-quickstart \
                (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
                Choose archetype:
                ...
                77: internal -&gt; maven-archetype-quickstart ()
                Choose a number:  (...) 77: : <emphasis>77</emphasis>
                Confirm properties configuration:
                groupId: org.sonatype.mavenbook.simple
                artifactId: simple
                version: 1.0-SNAPSHOT
                package: org.sonatype.mavenbook.simple
                Y: : <emphasis>Y</emphasis>
                ...
                [INFO] Parameter: groupId, Value: org.sonatype.mavenbook.simple
                [INFO] Parameter: packageName, Value: org.sonatype.mavenbook.simple
                [INFO] Parameter: package, Value: org.sonatype.mavenbook.simple
                [INFO] Parameter: artifactId, Value: simple
                [INFO] Parameter: basedir, Value: /private/tmp
                [INFO] Parameter: version, Value: 1.0-SNAPSHOT
                [INFO] BUILD SUCCESSFUL
            </screen>

            <para><command>mvn</command> is the Maven 2 command.
                <varname>archetype:generate</varname> is called a Maven goal. If you
                are<indexterm>
                    <primary>goals</primary>

                    <secondary>about</secondary>
                </indexterm><indexterm>
                    <primary>Maven goals, about</primary>
                </indexterm><indexterm>
                    <primary>parent POM</primary>

                    <seealso>POM</seealso>
                </indexterm><indexterm>
                    <primary>top-level POM</primary>

                    <seealso>POM</seealso>
                </indexterm> familiar with Apache Ant, a Maven goal is analogous to an
                Ant target; both describe a unit of work to be completed in a build. The
                <varname>-Dname=value</varname> pairs are arguments that are passed to the
                goal and take the form of <varname>-D</varname> properties, similar to the
                system property options you might pass to the Java Virtual Machine via the
                command line. The purpose of the <varname>archetype:generate</varname>
                goal is to quickly create a project from an archetype. In this context,
                an<indexterm>
                    <primary sortas="archetypes">archetypes, defined</primary>
                </indexterm> archetype is defined as “an original model or type after
                which other similar things are patterned; a prototype.”<footnote
                                                                            id="foot-archetype-def">
                    <para><emphasis>The American Heritage Dictionary of the English
                            Language</emphasis>.</para>
                </footnote>A number of archetypes are available in Maven for anything
                from a simple Swing application to a complex web application, and the
                <varname>archetype:generate</varname> offers a list of approximately 40
                archetypes to choose from. In this chapter, we are going to use the most
                basic archetype to create a simple skeleton starter project. The plugin is
                the prefix <literal>archetype</literal>, and the goal is
                <literal>generate</literal>.</para>

            <para>Once we've generated a project, take a look at the directory
                structure Maven created under the simple directory:</para>

            <screen>simple/<co id="coDef-simple-fs-root"
                               linkends="coRef-simple-fs-root" />
                simple/pom.xml<co id="coDef-simple-fs-pom" linkends="coRef-simple-fs-pom" />
                /src/
                /src/main/<co id="coDef-simple-fs-main" linkends="coRef-simple-fs-main" />
                /main/java
                /src/test/<co id="coDef-simple-fs-test" linkends="coRef-simple-fs-test" />
                /test/java</screen>

            <para>This generated directory adheres to the Maven Standard
                Directory<indexterm>
                    <primary>Standard Directory Layout</primary>
                </indexterm><indexterm>
                    <primary>Maven Standard Directory Layout</primary>
                </indexterm> Layout. We’ll get into more details later in this chapter,
                but for now, let’s just try to understand these few basic <phrase
                                                                               role="keep-together">directories</phrase>:</para>

            <calloutlist>
                <callout arearefs="coDef-simple-fs-root" id="coRef-simple-fs-root">
                    <para>The Maven Archetype plugin creates a directory
                        <filename>simple/</filename> that matches the
                        <varname>artifactId</varname>. This is known as the project’s
                        <indexterm>
                            <primary>base directory</primary>
                        </indexterm> base directory.</para>
                </callout>

                <callout arearefs="coDef-simple-fs-pom" id="coRef-simple-fs-pom">
                    <para>Every Maven project has what is known as a Project Object Model
                        (<acronym>POM</acronym>) in a file named <filename>pom.xml</filename>.
                        This file describes the project, configures plugins, and declares
                        dependencies.</para>
                </callout>

                <callout arearefs="coDef-simple-fs-main" id="coRef-simple-fs-main">
                    <para>Our project's source code and resources are placed under
                        <filename>src/main</filename>. In the case of our simple Java project
                        this will consist of a few Java classes and some properties file. In
                        another project, this could be the document root of a web application
                        or configuration files for an application server. In a Java project,
                        Java classes are placed in <filename>src/main/java</filename> and
                        classpath resources are placed in
                        <filename>src/main/resources</filename>.</para>
                </callout>

                <callout arearefs="coDef-simple-fs-test" id="coRef-simple-fs-test">
                    <para>Our project's test cases are located in
                        <filename>src/test</filename>. Under this directory, Java classes such
                        as JUnit or TestNG tests are placed in
                        <filename>src/test/java</filename>, and classpath resources for tests
                        are located in <filename>src/test/resources</filename>.</para>
                </callout>
            </calloutlist>

            <para>The Maven Archetype plugin generated a single class
                <classname>org.sonatype.mavenbook.App</classname>, which is a 13-line Java
                class with a static main function that prints out a message:</para>

            <programlisting language="java">package org.sonatype.mavenbook;

                /**
                * Hello world!
                *
                */
                public class App 
                {
                public static void main( String[] args )
                {
                System.out.println( "Hello World!" );
                }
                }
            </programlisting>

            <para>The simplest Maven archetype generates the simplest possible
                program: a program which prints "Hello World!" to standard output.</para>
        </section>

        <section id="simple-project-sect-building-simple">
            <title>Building a Simple Project</title>

            <para><indexterm>
                    <primary>building a Maven project</primary>
                </indexterm><indexterm>
                    <primary>Apache Maven</primary>

                    <secondary>running</secondary>
                </indexterm>Once you have created the project with the Maven Archetype
                plugin by following the directions from the previous section (<xref
                                                                                   linkend="simple-project-sect-create-simple" />) you will want to build and
                package the application. To do so, run <command>mvn install</command> from
                the<indexterm>
                    <primary>mvn install command</primary>
                </indexterm><indexterm>
                    <primary>building applications</primary>
                </indexterm><indexterm>
                    <primary>packaging applications</primary>
                </indexterm><indexterm>
                    <primary>applications, building and packaging</primary>
                </indexterm> directory that contains the
                <filename>pom.xml</filename>:</para>

            <screen><command>$ cd simple
                    $ mvn install
                </command>[INFO] Scanning for projects...
                [INFO] ----------------------------------------------------------------------
                [INFO] Building simple
                [INFO]    task-segment: [install]
                [INFO] ----------------------------------------------------------------------
                [INFO] [resources:resources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:compile]
                [INFO] Compiling 1 source file to /simple/target/classes
                [INFO] [resources:testResources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:testCompile]
                [INFO] Compiling 1 source file to /simple/target/test-classes
                [INFO] [surefire:test]
                [INFO] Surefire report directory: /simple/target/surefire-reports

                -------------------------------------------------------
                T E S T S
                -------------------------------------------------------
                Running org.sonatype.mavenbook.AppTest
                Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.105 sec

                Results :

                Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

                [INFO] [jar:jar]
                [INFO] Building jar: /simple/target/simple-1.0-SNAPSHOT.jar
                [INFO] [install:install]
                [INFO] Installing /simple/target/simple-1.0-SNAPSHOT.jar to \
                ~/.m2/repository/com/sonatype/maven/simple/simple/1.0-SNAPSHOT/ \
                simple-1.0-SNAPSHOT.jar
            </screen>

            <para>You've just created, compiled, tested, packaged, and installed the
                simplest possible Maven project. To prove to yourself that this program
                works, run it from the command line.</para>

            <screen><command>$ java -cp target/simple-1.0-SNAPSHOT.jar org.sonatype.mavenbook.App
                </command>Hello World!
            </screen>
        </section>

        <section id="simple-project-sect-pom">
            <title>Simple Project Object Model</title>

            <para><indexterm>
                    <primary>Project Object Model (POM)</primary>
                </indexterm>When Maven executes, it looks to the Project Object Model
                for<indexterm>
                    <primary>POM (Project Object Model)</primary>
                </indexterm><indexterm>
                    <primary>Project Object Model</primary>

                    <see>POM; pom.xml file</see>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>
                </indexterm> information about the project. The <acronym>POM</acronym>
                answers such questions as: What type of project is this? What is the
                project’s name? Are there any build customizations for this project? <xref
                                                                                          linkend="example_simple-project-pom" /> shows the default
                <filename>pom.xml</filename> file created by the Maven Archetype plugin’s
                generate goal.<indexterm>
                    <primary>pom.xml</primary>
            </indexterm></para>

            <example id="example_simple-project-pom">
                <title>Simple Project's <filename>pom.xml</filename> file</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.simple&lt;/groupId&gt;
                    &lt;artifactId&gt;simple&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;simple&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;</programlisting>
            </example>

            <para>This <filename>pom.xml</filename> file is the most basic
                <acronym>POM</acronym> you will ever deal with for a Maven project,
                usually a <acronym>POM</acronym> file is considerably more complex:
                defining multiple dependencies and customizing plugin behavior. The first
                few elements—<sgmltag>groupId</sgmltag>, <sgmltag>artifactId</sgmltag>,
                <sgmltag>packaging</sgmltag>, <sgmltag>version</sgmltag>—are what is known
                as the Maven coordinates which uniquely identify a project.
                <sgmltag>name</sgmltag> and <sgmltag>url</sgmltag> are descriptive
                elements of the <acronym>POM</acronym> providing a human readable name and
                associating the project with a web site. The
                <sgmltag>dependencies</sgmltag> element defines a single, test-scoped
                dependency on a unit testing framework called JUnit. These topics will be
                further introduced in <xref linkend="simple-project-sect-simple-core" />,
                all you need to know, at this point, is that the
                <filename>pom.xml</filename> is the file that makes Maven go.</para>

            <para>Maven always executes against an effective <acronym>POM</acronym>, a
                combination of settings from this project's <filename>pom.xml</filename>,
                all parent <acronym>POM</acronym>s, a super-<acronym>POM</acronym> defined
                within Maven, user-defined settings, and active profiles. All projects
                ultimately extend the super-<acronym>POM</acronym>, which defines a set of
                sensible default configuration settings. While your project might have a
                relatively minimal <filename>pom.xml</filename>, the contents of your
                project's <acronym>POM</acronym> are interpolated with the contents of all
                parent <acronym>POM</acronym>s, user settings, and any active profiles. To
                see this "effective" <acronym>POM</acronym>, run the following command in
                the simple project's base directory.<indexterm>
                    <primary>Help plugin</primary>

                    <secondary>effective POM</secondary>
            </indexterm></para>

            <screen>$ <command>mvn help:effective-pom</command></screen>

            <para>When you run this, you should see a much larger
                <acronym>POM</acronym> which exposes the default settings of Maven. This
                goal can come in handy if you are trying to debug a build and want to see
                how all of the current project's ancestor POMs are contributing to the
                effective POM.</para>
        </section>

        <section id="simple-project-sect-simple-core">
            <title>Core Concepts</title>

            <para>Having just run Maven for the first time, it is a good time to
                introduce a few of the core concepts of Maven. In the previous example,
                you generated a project which consisted of a <acronym>POM</acronym> and
                some code assembled in the Maven standard directory layout. You then
                executed Maven with a lifecycle phase as an argument, which prompted Maven
                to execute a series of Maven plugin goals. Lastly, you installed a Maven
                artifact into your local repository. Wait? What is a "lifecycle"? What is
                a "local repository"? The following section defines some of Maven's
                central concepts.</para>

            <section id="simple-project-sect-plugins-goals">
                <title>Maven Plugins and Goals</title>

                <para><indexterm>
                        <primary>plugins</primary>
                    </indexterm><indexterm>
                        <primary>goals</primary>
                    </indexterm>In the previous section, we ran Maven with two different
                    types of<indexterm>
                        <primary>Maven plugins</primary>

                        <see>plugins</see>
                    </indexterm><indexterm>
                        <primary>goals</primary>

                        <seealso>plugins</seealso>
                    </indexterm> command-line <phrase
                                                   role="keep-together">arguments</phrase>. The first command was a single
                    plugin goal, the <varname>generate</varname> goal of the Archetype
                    plugin. The second execution of Maven was a lifecycle phase,
                    <varname>install</varname>. To<indexterm>
                        <primary>executing goals</primary>
                    </indexterm><indexterm>
                        <primary>executing goals</primary>

                        <seealso>goals</seealso>
                    </indexterm> execute a single Maven plugin goal, we used the syntax
                    <command>mvn archetype:generate</command>, where
                    <varname>archetype</varname> is the identifier of a plugin and
                    <varname>generate</varname> is the identifier of a goal. When Maven
                    executes a plugin goal, it prints out the plugin identifier and goal
                    identifier to standard output:</para>

                <screen><command>$ mvn archetype:generate -DgroupId=org.sonatype.mavenbook.simple \
                        -DartifactId=simple \
                        -Dpackage=org.sonatype.mavenbook
                    </command>...
                    <emphasis>[INFO] [archetype:generate]</emphasis>
                    [INFO] artifact org.apache.maven.archetypes:maven-archetype-quickstart: \
                    checking for updates from central
                    ...
                </screen>

                <para>A Maven Plugin is a collection of one or more goals. Examples of
                    Maven plugins can be simple core plugins like the Jar plugin, which
                    contains goals for creating <acronym>JAR</acronym> files, Compiler
                    plugin, which contains goals for compiling source code and unit tests,
                    or the Surefire plugin, which contains goals for executing unit tests
                    and generating reports. Other, more specialized Maven plugins include
                    plugins like the Hibernate3 plugin for integration with the popular
                    persistence library Hibernate, the JRuby plugin which allows you to
                    execute ruby as part of a Maven build or to write Maven plugins in Ruby.
                    Maven also provides for the ability to define custom plugins. A custom
                    plugin can be written in Java, or a plugin can be written in any number
                    of languages including Ant, Groovy, beanshell, and, as previously
                    mentioned, Ruby.</para>

                <figure id="fig-plugin-goals">
                    <title>A Plugin Contains Goals</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/simple-project_plugin.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/simple-project_plugin.pdf"
                                       format="PDF" scalefit="0" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

                <para>A goal is a specific task that may be executed as a
                    standalone<indexterm>
                        <primary>goals</primary>

                        <secondary>defined</secondary>
                    </indexterm> goal or along with other goals as part of a larger build.
                    A goal is a “unit of work” in Maven. Examples of goals include the
                    <varname>compile</varname> goal in the Compiler plugin, which compiles
                    all of the source code for a project, or the <varname>test</varname>
                    goal of the Surefire plugin, which can execute unit tests. Goals are
                    configured via configuration properties that can be used to customize
                    behavior. For example, the <varname>compile</varname> goal of the
                    Compiler plugin defines a set of configuration <phrase
                                                                        role="keep-together">parameters</phrase> that allow you to specify the
                    target JDK version or whether to use the compiler optimizations. In the
                    previous example, we passed in the configuration parameters
                    <varname>groupId</varname> and <varname>artifactId</varname> to the
                    <varname>generate</varname> goal of the Archetype plugin via the
                    command-line parameters
                    <command>-DgroupId=org.sonatype.mavenbook.simple</command> and
                    <command>-DartifactId=simple</command>. We <phrase
                                                                    role="keep-together">also</phrase> passed the <varname>package</varname>
                    parameter to the <literal>generate</literal> goal as
                    <package>org.sonatype.mavenbook</package>. If we had omitted the
                    <varname>packageName</varname> parameter, the package name would have
                    defaulted to <package>org.sonatype.mavenbook.simple</package>.</para>

                <para><note>
                        <para>When referring to a plugin goal, we frequently use the
                            shorthand notation:
                            <replaceable>pluginId</replaceable><literal>:</literal><replaceable>goalId</replaceable>.
                            For example, when referring to the <literal>generate</literal> goal
                            in the Archetype plugin, we write
                            <varname>archetype:generate</varname>.</para>
                </note></para>

                <para>Goals define parameters that can define sensible default values.
                    In the <varname>archetype:</varname><varname>generate</varname> example,
                    we did not specify what kind of archetype the goal was to create on our
                    command line; we simply passed in a <varname>groupId</varname> and an
                    <varname>artifactId</varname>. Not passing in the type of artifact we
                    wanted to create caused the <varname>generate</varname> goal to prompt
                    us for input, the generate goal stopped and asked us to choose an
                    archetype from a list. If you had run the
                    <varname>archetype:create</varname> goal instead, Maven would have
                    assumed that you wanted to generate a new project using the default
                    <varname>maven-archetype-quickstart</varname> archetype. This is our
                    first brush with<indexterm>
                        <primary>convention over configuration</primary>
                    </indexterm> <emphasis>convention over configuration</emphasis>. The
                    convention, or default, for the <varname>create</varname> goal is to
                    create a simple project called Quickstart. The <varname>create</varname>
                    goal defines a configuration property
                    <varname>archetypeArtifactId</varname> that has a default value of
                    <varname>maven-archetype-</varname><varname>quickstart</varname>. The
                    Quickstart archetype generates a minimal project shell that contains a
                    <acronym>POM</acronym> and a single class. The Archetype plugin is far
                    more powerful than this first example suggests, but it is a great way to
                    get new projects started fast. Later in this book, we’ll show you how
                    the Archetype plugin can be used to generate more complex projects such
                    as web applications, and how you can use the Archetype plugin to define
                    your own set of projects.</para>

                <para>The core of Maven has little to do with the specific tasks
                    involved in your project’s build. By itself, Maven doesn’t know how to
                    compile your code or even how to make a <acronym>JAR</acronym> file. It
                    delegates all of this work to Maven plugins like the Compiler plugin and
                    the Jar plugin, which are downloaded on an as-needed basis and
                    periodically updated from the central Maven repository. When you
                    download Maven, you are getting the core of Maven, which consists of a
                    very basic shell that knows only how to parse the command line, manage a
                    classpath, parse a <acronym>POM</acronym> file, and download Maven
                    plugins as needed. By keeping the Compiler plugin separate from Maven’s
                    core and providing for an update mechanism, Maven makes it easier for
                    users to have access to the latest options in the compiler. In this way,
                    Maven plugins allow for universal reusability of common build logic. You
                    are not defining the compile task in a build file; you are using a
                    Compiler plugin that is shared by every user of Maven. If there is an
                    improvement to the Compiler plugin, every project that uses Maven can
                    immediately benefit from this change. (And, if you don’t like the
                    Compiler plugin, you can override it with your own
                    implementation.)</para>
            </section>

            <section id="simple-project-sect-lifecycle">
                <title>Maven Lifecycle</title>

                <para>The second command we ran in the previous section<indexterm>
                        <primary>Maven lifecycle</primary>

                        <see>build lifecycle</see>
                    </indexterm><indexterm>
                        <primary>lifecycle, Maven</primary>

                        <see>build lifecycle</see>
                    </indexterm><indexterm class="startofrange" id="buildlife">
                        <primary>build lifecycle</primary>
                    </indexterm><indexterm>
                        <primary>phases, lifecycle</primary>

                        <see>build lifecycle</see>
                    </indexterm> was <command>mvn install</command>. This command didn’t
                    specify a plugin goal; instead, it specified a Maven lifecycle phase. A
                    phase is a step in what Maven calls the “build lifecycle.” The build
                    lifecycle is an ordered sequence of phases involved in building a
                    project. Maven can support a number of different lifecycles, but the one
                    that’s most often used is the default<indexterm>
                        <primary>default Maven lifecycle</primary>
                    </indexterm><indexterm>
                        <primary>build lifecycle</primary>

                        <secondary>default Maven lifecycle</secondary>
                    </indexterm> Maven lifecycle, which begins with a phase to validate
                    the basic integrity of the project and ends with a phase that involves
                    deploying a project to production. Lifecycle phases are intentionally
                    vague, defined solely as validation, testing, or deployment, and they
                    may mean different things to different projects. For example, in a
                    project that produces a Java archive, the <varname>package</varname>
                    phase produces a JAR; in a project that produces a web application, the
                    <varname>package</varname> phase produces a WAR.</para>

                <para>Plugin goals can be attached<indexterm>
                        <primary>plugin goals</primary>

                        <see>goals</see>
                    </indexterm><indexterm>
                        <primary>goals</primary>

                        <secondary>attaching to lifecycle phases</secondary>
                    </indexterm> to a lifecycle phase. As Maven moves through the phases
                    in a lifecycle, it will execute the goals attached to each particular
                    phase. Each phase may have zero or more goals bound to it. In the
                    previous section, when you ran <command>mvn install</command>, you might
                    have noticed that more than one goal was executed. Examine the output
                    after running <command>mvn install</command> and take note of the
                    various goals that are executed. When this simple example reached the
                    <varname>package</varname> phase, it executed the <varname>jar</varname>
                    goal in the Jar plugin. Since our simple Quickstart project has (by
                    default) a <varname>jar</varname> packaging type, the
                    <varname>jar:jar</varname> goal is bound to the
                    <varname>package</varname> phase.</para>

                <para><figure id="fig-goals-bind-to-phases">
                        <title>A Goal Binds to a Phase</title>

                        <mediaobject>
                            <imageobject role="web">
                                <imagedata fileref="figs/web/simple-project_phasebinding.png" />
                            </imageobject>

                            <imageobject role="print">
                                <imagedata align="center"
                                           fileref="figs/print/simple-project_phasebinding.pdf"
                                           format="PDF" scalefit="0" width="100%" />
                            </imageobject>
                        </mediaobject>
                </figure></para>

                <para>We know that the <varname>package</varname> phase is going to
                    create a <acronym>JAR</acronym> file for a project with
                    <varname>jar</varname> packaging. But what of the goals preceding it,
                    such as <varname>compiler:compile</varname> and <varname
                                                                         role="keep-together">surefire:test</varname>? These goals are executed
                    as Maven steps through the phases preceding <varname>package</varname>
                    in the<indexterm>
                        <primary>executing lifecycle phases</primary>
                    </indexterm> Maven lifecycle; executing a phase will first execute all
                    preceding phases in order, ending with the phase specified on the
                    command line. Each phase corresponds to zero or more goals, and since we
                    haven’t performed any plugin configuration or customization, this
                    example binds a set of standard plugin goals to the default lifecycle.
                    The following goals are executed in order when Maven walks through the
                    default lifecycle ending with <varname>package</varname>:<indexterm>
                        <primary>default Maven lifecycle</primary>
                </indexterm></para>

                <variablelist>
                    <varlistentry>
                        <term><varname>resources:resources</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Resources plugin</primary>

                                    <secondary>resources goal</secondary>
                                </indexterm>The <varname>resources</varname> goal of the
                                Resources<indexterm>
                                    <primary>Resources plugin</primary>

                                    <secondary>resources goal</secondary>
                                </indexterm> plugin is bound to the
                                <varname>process-resources</varname> phase. This goal copies all
                                of the resources from <filename>src/main/resources</filename> and
                                any other configured resource directories to the output
                                directory.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>compiler:compile</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Compiler plugin</primary>

                                    <secondary>compile goal</secondary>
                                </indexterm>The <varname>compile</varname> goal of the Compiler
                                plugin<indexterm>
                                    <primary>compile:compile goal</primary>
                                </indexterm><indexterm>
                                    <primary>Compiler plugin</primary>

                                    <secondary>compile goal</secondary>
                                </indexterm> is bound to the <varname>compile</varname> phase.
                                This goal compiles all of the source code from
                                <filename>src/main/java</filename> or any other configured source
                                directories to the output directory.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>resources:testResources</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Resources plugin</primary>

                                    <secondary>testResources goal</secondary>
                                </indexterm>The <varname>testResources</varname> goal of the
                                Resources<indexterm>
                                    <primary>Resources plugin</primary>

                                    <secondary>testResources goal</secondary>
                                </indexterm> plugin is bound to the
                                <varname>process-test-resources</varname> phase. This goal copies
                                all of the resources from <filename>src/test/resources</filename>
                                and any other configured test resource directories to a test
                                output directory.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>compiler:testCompile</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Compiler plugin</primary>

                                    <secondary>testCompile goal</secondary>
                                </indexterm>The <varname>testCompile</varname> goal of the
                                Compiler<indexterm>
                                    <primary>Compiler plugin</primary>

                                    <secondary>testCompile goal</secondary>
                                </indexterm> plugin is bound to the
                                <varname>test-compile</varname> phase. This goal compiles test
                                cases from <filename>src/test/java</filename> and any other
                                configured test source directories to a test output
                                directory.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>surefire:test</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Surefire plugin</primary>

                                    <secondary>test goal</secondary>
                                </indexterm>The <varname>test</varname> goal of the Surefire
                                plugin is<indexterm>
                                    <primary>Surefire plugin</primary>

                                    <secondary>test goal</secondary>
                                </indexterm><indexterm>
                                    <primary>Maven Surefire plugin</primary>

                                    <secondary>test goal</secondary>
                                </indexterm><indexterm>
                                    <primary>testing</primary>

                                    <secondary>Surefire:test goal</secondary>
                                </indexterm> bound to the <varname>test</varname> phase. This
                                goal executes all of the tests and creates output files that
                                capture detailed results. By default, this goal will terminate a
                                build if there is a test failure.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>jar:jar</varname></term>

                        <listitem>
                            <para><indexterm>
                                    <primary>Jar plugin</primary>

                                    <secondary>jar goal</secondary>
                                </indexterm>The <varname>jar</varname> goal of the Jar plugin is
                                bound<indexterm>
                                    <primary>jar:jar goal</primary>
                                </indexterm> to the <varname>package</varname> phase. This goal
                                packages the output directory into a JAR file.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>

                <para><figure id="fig-goals-bind-to-default-lifecycle">
                        <title>Bound Goals are Run when Phases Execute</title>

                        <mediaobject>
                            <imageobject role="web">
                                <imagedata fileref="figs/web/simple-project_lifecyclebinding.png" />
                            </imageobject>

                            <imageobject role="print">
                                <imagedata align="center"
                                           fileref="figs/print/simple-project_lifecyclebinding.pdf"
                                           format="PDF" scalefit="0" width="100%" />
                            </imageobject>
                        </mediaobject>
                </figure></para>

                <para>To summarize, when we executed <command>mvn install</command>,
                    Maven executes all phases up to the install phase, and in the process of
                    stepping through the lifecycle phases it executes all goals bound to
                    each phase. Instead of executing a Maven lifecycle goal you could
                    achieve the same results by specifying a sequence of plugin goals as
                    follows:</para>

                <screen><command>mvn resources:resources \
                        compiler:compile \
                        resources:testResources \
                        compiler:testCompile \
                        surefire:test \
                        jar:jar \
                        install:install</command> 
                </screen>

                <para>It is much easier to execute lifecycle phases than it is to
                    specify explicit goals on the command line, and the common lifecycle
                    allows every project that uses Maven to adhere to a well-defined set of
                    standards. The lifecycle is what allows a developer to jump from one
                    Maven project to another without having to know very much about the
                    details of each particular project's build. If you can build one Maven
                    project, you can build them all.</para>
            </section>

            <section id="simple-project-sect-maven-coordinates">
                <title>Maven Coordinates</title>

                <para>The Archetype plugin created a project with a file named<indexterm
                                                                                   class="startofrange" id="coord1">
                        <primary>Maven coordinates</primary>
                    </indexterm><indexterm class="startofrange" id="coord2">
                        <primary>coordinates</primary>
                    </indexterm> <filename>pom.xml</filename>. This is the Project Object
                    Model (<acronym>POM</acronym>), a declarative description of a project.
                    When Maven executes a goal, each goal has access to the information
                    defined in a project’s <acronym>POM</acronym>. When the
                    <varname>jar:jar</varname> goal needs to create a <acronym>JAR</acronym>
                    file, it looks to the <acronym>POM</acronym> to find out what the JAR
                    file’s name is. When the <varname>compiler:compile</varname> goal
                    compiles Java source code into bytecode, it looks to the
                    <acronym>POM</acronym> to see if there are any parameters for the
                    compile goal. Goals execute in the context of a <acronym>POM</acronym>.
                    Goals are actions we wish to take upon a project, and a project is
                    defined by a <acronym>POM</acronym>. The <acronym>POM</acronym> names
                    the project, provides a set of unique identifiers (coordinates) for a
                    project, and defines the relationships between this project and others
                    through dependencies, parents, and prerequisites. A
                    <acronym>POM</acronym> can also customize plugin behavior and supply
                    information about the community and developers involved in a
                    project.</para>

                <para>Maven coordinates define a set of identifiers which can be used to
                    uniquely identify a project, a dependency, or a plugin in a Maven
                    <acronym>POM</acronym>. Take a look at the following
                    <acronym>POM</acronym>.</para>

                <para><figure id="fig-project-coords">
                        <title>A Maven Project's Coordinates</title>

                        <mediaobject>
                            <imageobject role="web">
                                <imagedata fileref="figs/web/simple-project_annopom.png" />
                            </imageobject>

                            <imageobject role="print">
                                <imagedata align="center"
                                           fileref="figs/print/simple-project_annopom.pdf"
                                           format="PDF" scalefit="0" width="100%" />
                            </imageobject>
                        </mediaobject>
                </figure></para>

                <para>We've highlighted the Maven coordinates for this project: the
                    <varname>groupId</varname>, <varname>artifactId</varname>,
                    <varname>version</varname> and <varname>packaging</varname>. These
                    combined identifiers make up a project's coordinates.<footnote
                                                                              id="foot-simple-classify">
                        <para>There is a fifth, seldom-used coordinate named
                            <varname>classifier</varname> which we will introduce later in the
                            book. You can feel free to ignore classifiers for now.</para>
                    </footnote>Just like in any other coordinate system, a set of Maven
                    coordinates is an address for a specific point in "space". Maven
                    pinpoints a project via its coordinates when one project relates to
                    another, either as a dependency, a plugin, or a parent project
                    reference. Maven coordinates are often written using a colon as a
                    delimiter in the following format:
                    <code>groupId:artifactId:packaging:version</code>. In the above
                    <filename>pom.xml</filename> file for our current project, its
                    coordinates are represented as
                    <code>mavenbook:my-app:jar:1.0-SNAPSHOT</code>.</para>

                <variablelist>
                    <varlistentry>
                        <term><varname>groupId</varname></term>

                        <listitem>
                            <para>The group, company, team, organization, project, or
                                other<indexterm>
                                    <primary>groupId attribute (pom.xml)</primary>
                                </indexterm> group. The convention for group identifiers is that
                                they begin with the reverse domain name of the organization that
                                creates the project. Projects from Sonatype would have a
                                <varname>groupId</varname> that begins with
                                <package>com.sonatype</package>, and projects in the Apache
                                Software Foundation would have a <varname>groupId</varname> that
                                starts with <package>org.apache</package>.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>artifactId</varname></term>

                        <listitem>
                            <para>A unique identifier under <varname>groupId</varname>
                                that<indexterm>
                                    <primary>artifactId attribute (pom.xml)</primary>
                                </indexterm> represents a single project.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>version</varname></term>

                        <listitem>
                            <para>A specific release of a project. Projects that have
                                been<indexterm>
                                    <primary>version attribute (pom.xml)</primary>
                                </indexterm> released have a fixed version identifier that
                                refers to a specific version of the project. Projects undergoing
                                active development can use a special identifier that marks a
                                version as a <varname>SNAPSHOT</varname>.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>

                <para>The packaging format of a project is also an important component
                    in the Maven coordinates, but it isn't a part of a project's unique
                    identifier. A project's <varname>groupId:artifactId:version</varname>
                    make that project unique; you can't have a project with the same three
                    <varname>groupId</varname>, <varname>artifactId</varname>, and
                    <varname>version</varname> identifiers.</para>

                <variablelist>
                    <varlistentry>
                        <term><varname>packaging</varname></term>

                        <listitem>
                            <para>The type of project, defaulting to
                                <varname>jar</varname>,<indexterm>
                                    <primary>packaging attribute (pom.xml)</primary>
                                </indexterm> describing the packaged output produced by a
                                project. A project with packaging <varname>jar</varname> produces
                                a <acronym>JAR</acronym> archive; a project with packaging
                                <varname>war</varname> produces a web application.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>

                <para>These four elements become the key to locating and using one
                    particular project in the vast space of other “Mavenized” projects .
                    Maven repositories (public,<indexterm>
                        <primary>repositories</primary>
                    </indexterm><indexterm>
                        <primary>Maven repositories</primary>
                    </indexterm> private, and local) are organized according to these
                    identifiers. When this project is installed into the local Maven
                    repository, it immediately becomes locally available to any other
                    project that wishes to use it. All you must do is add it as a dependency
                    of another project <indexterm class="endofrange"
                                                  startref="coord1"></indexterm><indexterm class="endofrange"
                                                                                           startref="coord2"></indexterm>using the unique Maven coordinates for a
                    specific artifact.</para>

                <para><figure id="fig-simple-mavenspace">
                        <title>Maven Space is a Coordinate System of Projects</title>

                        <mediaobject>
                            <imageobject role="web">
                                <imagedata fileref="figs/web/simple-project_mavenspace.png" />
                            </imageobject>

                            <imageobject role="print">
                                <imagedata align="center"
                                           fileref="figs/print/simple-project_mavenspace.pdf"
                                           scalefit="0" width="100%" />
                            </imageobject>
                        </mediaobject>
                </figure></para>
            </section>

            <section id="simple-project-section-simple-repo">
                <title>Maven Repositories</title>

                <para><indexterm>
                        <primary>repositories</primary>
                    </indexterm><indexterm>
                        <primary>Apache Maven</primary>

                        <secondary>repositories</secondary>
                    </indexterm>When you run Maven for the first time, you will notice
                    that Maven downloads a number of files from a remote Maven repository.
                    If the simple project was the first time you ran Maven, the first thing
                    it will do is download the latest release of the Resources plugin when
                    it triggers the <varname>resources:resource</varname> goal. In Maven,
                    artifacts and plugins are retrieved from a remote repository when they
                    are needed. One of the reasons the initial Maven download is so small
                    (1.5 MiB) is due to the fact that Maven doesn't ship with much in the
                    way of plugins. Maven ships with the bare minimum and fetches from a
                    remote repository when it needs to. Maven ships with a default remote
                    repository location (<ulink
                                              url="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</ulink>)
                    which it uses to download the core Maven plugins and
                    dependencies.</para>

                <para>Often you will be writing a project which depends on libraries
                    that are neither free nor publicly distributed. In this case you will
                    need to either setup a custom repository inside your organization's
                    network or download and install the dependencies manually. The default
                    remote repositories can be replaced or augmented with references to
                    custom Maven repositories maintained by your organization. There are
                    multiple products available to allow organizations to manage and
                    maintain mirrors of the public Maven repositories.</para>

                <para><indexterm>
                        <primary>maven repository</primary>

                        <secondary>structure</secondary>
                    </indexterm><indexterm>
                        <primary>remote repository</primary>
                    </indexterm>What makes a Maven repository a Maven repository? A
                    repository is a collection of project artifacts stored in a directory
                    structure that closely matches a project's Maven coordinates. You can
                    see this structure by opening up a web browser and browsing the central
                    Maven repository at <ulink
                                             url="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</ulink>.
                    You will see that an artifact with the coordinates
                    <varname>org.apache.commons:commons-email:1.1</varname> is available
                    under the directory
                    <filename>/org/apache/commons/commons-email/1.1/</filename> in a file
                    named <filename>commons-email-1.1.jar</filename>. The standard for a
                    Maven repository is to store an artifact in the following directory
                    relative to the root of the repository: <screen>/&lt;<varname>groupId</varname>&gt;/&lt;<varname>artifactId</varname>&gt;/&lt;<varname>version</varname>&gt;/&lt;<varname>artifactId</varname>&gt;-&lt;<varname>version</varname>&gt;.&lt;<varname>packaging</varname>&gt;</screen></para>

                <para><indexterm>
                        <primary>local repository</primary>
                    </indexterm>Maven downloads artifacts and plugins from a remote
                    repository to your local machine and stores these artifacts in your
                    local Maven repository. Once Maven has downloaded an artifact from the
                    remote Maven repository it never needs to download that artifact again
                    as Maven will always look for the artifact in the local repository
                    before looking elsewhere. On Windows XP, your local repository is likely
                    in <filename>C:\Documents and
                        Settings\USERNAME\.m2\repository</filename>, and on Windows Vista, your
                    local repository is in
                    <filename>C:\Users\USERNAME\.m2\repository</filename>. On Unix systems,
                    your local Maven repository is available in
                    <filename>~/.m2/repository</filename>. When you build a project like the
                    simple project you created in the previous section, the
                    <varname>install</varname> phase executes a goal which installs your
                    project's artifacts in your local Maven repository.</para>

                <para><indexterm>
                        <primary>local repository</primary>

                        <secondary>installing artifacts in</secondary>
                    </indexterm>In your local repository, you should be able to see the
                    artifact created by our simple project. If you run the <command>mvn
                        install</command> command, Maven will install our project's artifact in
                    your local repository. Try it.</para>

                <screen>$ <command>mvn install</command>
                    ...
                    [INFO] [install:install]
                    [INFO] Installing .../simple-1.0-SNAPSHOT.jar to \
                    ~/.m2/repository/com/sonatype/maven/simple/1.0-SNAPSHOT/ \
                    simple-1.0-SNAPSHOT.jar
                    ...</screen>

                <para><indexterm>
                        <primary>project relationships</primary>
                    </indexterm>As you can see from the output of this command, Maven
                    installed our project's <acronym>JAR</acronym> file into our local Maven
                    repository. Maven uses the local repository to share dependencies across
                    local projects. If you develop two projects—project A and project B—with
                    project B depending on the artifact produced by project A, Maven will
                    retrieve project A's artifact from your local repository when it is
                    building project B. Maven repositories are both a local cache of
                    artifacts downloaded from a remote repository and a mechanism for
                    allowing your projects to depend on each other.</para>
            </section>

            <section id="simple-project-sect-dep-management">
                <title>Maven's Dependency Management</title>

                <para><indexterm>
                        <primary>dependency management</primary>
                    </indexterm>In this chapter's simple example, Maven resolved the
                    coordinates of the JUnit
                    dependency—<varname>junit:junit:3.8.1</varname>—to a path in a Maven
                    repository <filename>/junit/junit/3.8.1/junit-3.8.1.jar</filename>. The
                    ability to locate an artifact in a repository based on Maven coordinates
                    gives us the ability to define dependencies in a project's
                    <acronym>POM</acronym>. If you examine the simple project's
                    <filename>pom.xml</filename> file, you will see that there is a section
                    which deals with <sgmltag>dependencies</sgmltag>, and that this section
                    contains a single dependency—JUnit.</para>

                <para>A more complex project would contain more than one dependency, or
                    it might contain dependencies that depend on other artifacts.
                    Support<indexterm>
                        <primary>transitive dependencies</primary>

                        <secondary>support for</secondary>
                    </indexterm> for transitive dependencies is one of Maven’s most
                    powerful features. Let’s say your project depends on a library that, in
                    turn, depends on 5 or 10 other libraries (Spring or Hibernate, for
                    example). Instead of having to track down all of these dependencies and
                    list them in your <filename>pom.xml</filename> explicitly, you can
                    simply depend on the library you are interested in and Maven will add
                    the dependencies of this library to your project’s dependencies
                    implicitly. Maven will also take care of working out conflicts between
                    dependencies, and provides you with the ability to customize the default
                    behavior and exclude certain transitive dependencies.</para>

                <para>Let's take a look at a dependency which was downloaded to your
                    local repository when you ran the previous example. Look in your local
                    repository path under
                    <filename>~/.m2/repository/junit/junit/3.8.1/</filename>. If you have
                    been following this chapter's examples, there will be a file named
                    <filename>junit-3.8.1.jar</filename> and a
                    <filename>junit-3.8.1.pom</filename> file in addition to a few checksum
                    files which Maven uses to verify the authenticity of a downloaded
                    artifact. Note that Maven doesn't just download the JUnit<acronym>
                        JAR</acronym> file, Maven also downloads a <acronym>POM</acronym> file
                    for the JUnit dependency. The fact that Maven downloads
                    <acronym>POM</acronym> files in addition to artifacts is central to
                    Maven's support for transitive dependencies.</para>

                <para>When you install your project’s artifact in the local repository,
                    you will also notice that Maven publishes a slightly modified version of
                    the project’s <filename>pom.xml</filename> file in the same directory as
                    the <acronym>JAR</acronym> file. Storing a <acronym>POM</acronym> file
                    in the repository gives other projects information about this project,
                    most importantly what dependencies it has. If Project B depends on
                    Project A, it also depends on Project A’s dependencies. When Maven
                    resolves a dependency artifact from a set of Maven coordinates, it also
                    retrieves the <acronym>POM</acronym> and consults the dependencies
                    <acronym>POM</acronym> to find any transitive dependencies. These
                    transitive dependencies are then added as dependencies of the current
                    project.</para>

                <para>A dependency in Maven isn’t just a <acronym>JAR</acronym> file;
                    it’s a <acronym>POM</acronym> file that, in turn, may declare
                    dependencies on other artifacts. These dependencies of dependencies are
                    called transitive dependencies, and they are made possible by the fact
                    that the Maven repository stores more than just bytecode; it stores
                    metadata about artifacts.</para>

                <figure id="fig-resolve-transitive">
                    <title>Maven Resolves Transitive Dependencies</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/simple-project_depgraph.png" width="" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/simple-project_depgraph.pdf"
                                       format="PDF" scalefit="0" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

                <para><indexterm>
                        <primary>transitive dependency</primary>
                    </indexterm>In the previous figure, project A depends on projects B
                    and C. Project B depends on project D, and project C depends on project
                    E. The full set of direct and transitive dependencies for project A
                    would be projects B, C, D, and E, but all project A had to do was define
                    a dependency on B and C. Transitive dependencies can come in handy when
                    your project relies on other projects with several small dependencies
                    (like Hibernate, Apache Struts, or the Spring Framework). Maven also
                    provides you with the ability to exclude transitive dependencies from
                    being included in a project's classpath.</para>

                <para>Maven also provides for different dependency scopes. The
                    simple<indexterm>
                        <primary>scope, dependency</primary>
                    </indexterm> project’s <filename>pom.xml</filename> contains a single
                    dependency—<varname>junit:junit:jar:3.8.1</varname>—with a scope of
                    <varname>test</varname>. When a dependency has a scope of
                    <varname>test</varname>, it will not be available to the
                    <varname>compile</varname> goal of the Compiler plugin. It will be added
                    to the classpath for only the <varname>compiler:testCompile</varname>
                    and <varname>surefire:test</varname> goals.</para>

                <para>When you create a <acronym>JAR</acronym> for a project,
                    dependencies are not bundled with the generated artifact; they are used
                    only for compilation. When you use Maven to create a
                    <acronym>WAR</acronym> or an <acronym>EAR</acronym> file, you can
                    configure Maven to bundle dependencies with the generated artifact, and
                    you can also configure it to exclude certain dependencies from the
                    <acronym>WAR</acronym> file using the <varname>provided</varname> scope.
                    The <varname>provided</varname> scope tells Maven that a dependency is
                    needed for compilation, but should not be bundled with the output of a
                    build. This scope comes in handy when you are developing a web
                    application. You’ll need to compile your code against the Servlet
                    specification, but you don’t want to include the Servlet
                    <acronym>API</acronym> <acronym>JAR</acronym> in your web application’s
                    <filename>WEB-INF/lib</filename> directory.</para>
            </section>

            <section id="simple-project-sect-site-generation">
                <title>Site Generation and Reporting</title>

                <para>Another important feature of Maven is its ability to
                    generate<indexterm>
                        <primary>documentation generation</primary>
                    </indexterm><indexterm>
                        <primary>site generation</primary>
                    </indexterm><indexterm>
                        <primary>report generation</primary>
                    </indexterm><indexterm>
                        <primary>site lifecycle phase</primary>
                    </indexterm> documentation and reports. In your simple project’s
                    directory, execute the following command:</para>

                <screen>$ <command>mvn site</command>
                </screen>

                <para>This will execute the <varname>site</varname> lifecycle phase.
                    Unlike the default build lifecycle that manages generation of code,
                    manipulation of resources, compilation, packaging, etc., this lifecycle
                    is concerned solely with processing site content under the
                    <filename>src/site</filename> directories and generating reports. After
                    this command executes, you should see a project web site in the
                    <filename>target/site</filename> directory. Load
                    <filename>target/site/index.html</filename> and you should see a basic
                    shell of a project site. This shell contains some reports under “Project
                    Reports” in the lefthand navigation menu, and it also contains
                    information about the project, the dependencies, and developers
                    associated with it under “Project Information.” The simple project’s web
                    site is mostly empty, since the <acronym>POM</acronym> contains very
                    little information about itself beyond its Maven coordinates, a name, a
                    <acronym>URL</acronym>, and a single test dependency.</para>

                <para>On this site, you’ll notice that some default reports are
                    available. A unit test report communicates the success and failure of
                    all unit tests in the project. Another report generates Javadoc for the
                    project’s <acronym>API</acronym>. Maven provides a full range of
                    configurable reports, such as the Clover report that examines unit test
                    coverage, the <acronym>JXR</acronym> report that generates
                    cross-referenced <acronym>HTML</acronym> source code listings useful for
                    code reviews, the <acronym>PMD</acronym> report that analyzes source
                    code for various coding problems, and the JDepend report that analyzes
                    the dependencies between packages in a codebase. You can customize site
                    reports by configuring which reports are included in a build via the
                    <filename>pom.xml</filename> file.</para>
            </section>
        </section>

        <section id="simple-project-sect-summary">
            <title>Summary</title>

            <para>In this chapter, we have created a simple project, packaged the
                project into a JAR file, installed that JAR into the Maven repository for
                use by other projects, and generated a site with documentation. We
                accomplished this without writing a single line of code or touching a
                single configuration file. We also took some time to develop definitions
                for some of the core concepts of Maven. In the next chapter, we’ll start
                customizing and modifying our project <filename>pom.xml</filename> file to
                add dependencies and configure unit tests.</para>
        </section>
    </chapter>

    <chapter id="customizing">
        <title>Customizing a Maven Project</title>

        <section id="customizing-sect-intro">
            <title>Introduction</title>

            <para>This chapter expands on the information introduced in <xref
                                                                             linkend="simple-project" />. We’re going to create a simple
                project<indexterm class="startofrange" id="customproj1">
                    <primary>customizing projects</primary>
                </indexterm><indexterm class="startofrange" id="customproj2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>
                </indexterm> generated with the Maven Archetype plugin, add some
                dependencies, add some source code, and customize the project to suit our
                needs. By the end of this chapter, you will know how to start using Maven
                to create real projects.</para>

            <section id="customizing-sect-downloading">
                <title>Downloading this Chapter's Example</title>

                <para>We’ll be developing a useful program that interacts with a Yahoo!
                    Weather web service. Although you should be able to follow along with
                    this chapter without the example source code, we recommend that you
                    download a copy of the code to use as a reference. This chapter’s
                    example project may be downloaded with the book’s example code
                    at:</para>

                <screen>${examples.download.url}</screen>

                <para>Unzip this archive in any directory, and then go to the
                    <filename>ch-custom/</filename> directory. There you will see a
                    directory named <filename>simple-weather/</filename>, which contains the
                    Maven project developed in this chapter.</para>
            </section>
        </section>

        <section id="customizing-sect-simple-weather">
            <title>Defining the Simple Weather Project</title>

            <para>Before we start customizing this project, let’s take a step back
                and<indexterm>
                    <primary>simple weather application</primary>

                    <see>weather project (example)</see>
                </indexterm><indexterm class="startofrange" id="weather03a">
                    <primary>weather project (example)</primary>

                    <secondary>defining</secondary>
                </indexterm><indexterm class="startofrange" id="weather03a1">
                    <primary>customizing projects</primary>

                    <secondary>defining the project</secondary>
                </indexterm><indexterm class="startofrange" id="weather03a2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>defining the project</tertiary>
                </indexterm> talk about the simple weather project. What is it? It’s a
                contrived example, created to demonstrate some of the features of Maven.
                It is an application that is representative of the kind you might need to
                build. The simple weather application is a basic command-line-driven
                application that takes a zip code and retrieves some data from the Yahoo!
                Weather <acronym>RSS</acronym> feed. It then parses the result and prints
                the result to standard output.</para>

            <para>We chose this example for a number of reasons. First, it is
                straightforward. A user supplies input via the command line, the app takes
                that zip code, makes a request to Yahoo! Weather, parses the result, and
                formats some simple data to the screen. This example is a simple
                <methodname>main()</methodname> function and some supporting classes;
                there is no enterprise framework to introduce and explain, just
                <acronym>XML</acronym> parsing and some logging statements. Second, it
                gives us a good excuse to introduce some interesting libraries such as
                Velocity, Dom4J, and Log4J. Although this book is focused on Maven, we
                won’t shy away from an opportunity to introduce interesting utilities.
                Lastly, it is an example that can be introduced, developed, and deployed
                in a single chapter.</para>

            <section id="customizing-sect-yahoo-weather">
                <title>Yahoo! Weather RSS</title>

                <para>Before you build this application, you should know something
                    about<indexterm>
                        <primary>Yahoo! Weather RSS feed, about</primary>
                    </indexterm> the Yahoo! Weather <acronym>RSS</acronym> feed. To start
                    with, the service is made available under the following terms:</para>

                <blockquote>
                    <para>The feeds are provided free of charge for use by individuals and
                        nonprofit organizations for personal, noncommercial uses. We ask that
                        you provide attribution to Yahoo! Weather in connection with your use
                        of the feeds.</para>
                </blockquote>

                <para>In other words, if you are thinking of integrating these feeds
                    into your commercial web site, think again—this feed is for personal,
                    noncommercial use. The use we’re encouraging in this chapter is personal
                    educational use. For more information about these terms of service,
                    <indexterm class="endofrange" startref="weather03a2"></indexterm>see the
                    Yahoo Weather! API documentation here: <ulink
                                                                url="http://developer.yahoo.com/weather/"></ulink>.</para>
            </section>
        </section>

        <section id="customizing-sect-creating-simple-weather">
            <title>Creating the Simple Weather Project</title>

            <para>First, let’s use the Maven Archetype plugin to create a
                basic<indexterm class="startofrange" id="weather03b">
                    <primary>weather project (example)</primary>

                    <secondary>creating</secondary>
                </indexterm><indexterm class="startofrange" id="weather03b1">
                    <primary>customizing projects</primary>

                    <secondary>creating the project</secondary>
                </indexterm><indexterm class="startofrange" id="weather03b2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>creating the project</tertiary>
                </indexterm><indexterm>
                    <primary>Archetype plugin</primary>

                    <secondary>creating simple weather application with</secondary>
                </indexterm><indexterm>
                    <primary>Maven Archetype plugin</primary>

                    <secondary>creating simple weather application with</secondary>
                </indexterm> skeleton for the simple weather project. Execute the
                following command to create a new project, select archetype 16, and then
                enter "Y" to confirm and generate the new project:</para>

            <screen><command>$ mvn archetype:generate -DgroupId=org.sonatype.mavenbook.custom \
                    -DartifactId=simple-weather \
                    -Dpackage=org.sonatype.mavenbook \
                    -Dversion=1.0
                </command>
                [INFO] Preparing archetype:generate
                ...
                [INFO] [archetype:generate {execution: default-cli}]
                [INFO] Generating project in Interactive mode
                [INFO] No archetype defined. Using maven-archetype-quickstart \
                (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
                Choose archetype:
                ...
                16: internal -&gt; maven-archetype-quickstart ()
                ...
                Choose a number:  (...) 16: : <emphasis>16</emphasis>
                Confirm properties configuration:
                groupId: org.sonatype.mavenbook.custom
                artifactId: simple-weather
                version: 1.0
                package: org.sonatype.mavenbook.custom
                Y: : Y
                [INFO] Parameter: groupId, Value: org.sonatype.mavenbook.custom
                [INFO] Parameter: packageName, Value: org.sonatype.mavenbook.custom
                [INFO] Parameter: package, Value: org.sonatype.mavenbook.custom
                [INFO] Parameter: artifactId, Value: simple-weather
                [INFO] Parameter: basedir, Value: /private/tmp
                [INFO] Parameter: version, Value: 1.0
                [INFO] BUILD SUCCESSFUL
            </screen>

            <para>Once the Maven Archetype plugin creates the project, go into the
                <filename>simple-weather</filename> directory and take a look at the
                <filename>pom.xml</filename> file. You should see the
                <acronym>XML</acronym> document that’s shown in <xref
                                                                     linkend="ex-initial-pom-for-simple-weather" />.<indexterm>
                    <primary>pom.xml</primary>
            </indexterm></para>

            <example id="ex-initial-pom-for-simple-weather">
                <title>Initial <acronym>POM</acronym> for the simple-weather
                    Project</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.custom&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;name&gt;simple-weather&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Next, you will need to configure the <indexterm>
                    <primary>Compiler plugin</primary>
                </indexterm>Maven Compiler plugin to target Java 5. To do this, add the
                <sgmltag>build</sgmltag> element to the initial POM as shown in <xref
                                                                                     linkend="ex-customization-initial-pom-with-compiler" />.</para>

            <example id="ex-customization-initial-pom-with-compiler">
                <title><acronym>POM</acronym> for the simple-weather Project with
                    Compiler Configuration</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.custom&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;name&gt;simple-weather&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    <emphasis>  &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;1.5&lt;/source&gt;
                        &lt;target&gt;1.5&lt;/target&gt;
                        &lt;/configuration&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;</emphasis>
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Notice that we passed in the <varname>version</varname> parameter to
                the <varname>archetype:generate</varname> goal. This overrides the default
                value of <literal>1.0-SNAPSHOT</literal>. In this project, we're
                developing the <literal>1.0</literal> version of the
                <varname>simple-weather</varname> project as you can see in the
                <filename>pom.xml</filename> <varname>version</varname> element.</para>
        </section>

        <section id="customizing-sect-customizing-project-info">
            <title>Customize Project Information</title>

            <para>Before we start writing code, let’s customize the project<indexterm
                                                                                class="startofrange" id="weather03c">
                    <primary>weather project (example)</primary>

                    <secondary>adding project information to pom.xml</secondary>
                </indexterm><indexterm class="startofrange" id="weather03c1">
                    <primary>customizing projects</primary>

                    <secondary>adding project information to pom.xml</secondary>
                </indexterm><indexterm class="startofrange" id="weather03c2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>adding project information to pom.xml</tertiary>
                </indexterm><indexterm>
                    <primary>project information (in pom.xml)</primary>

                    <secondary>adding to project</secondary>
                </indexterm><indexterm>
                    <primary>licensing information (project information)</primary>

                    <secondary>adding to project</secondary>
                </indexterm><indexterm>
                    <primary>organizational information (project information)</primary>

                    <secondary>adding to project</secondary>
                </indexterm><indexterm>
                    <primary>developer information (project information)</primary>

                    <secondary>adding to project</secondary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>project information in</secondary>

                    <tertiary>adding</tertiary>
                </indexterm> information a bit. We want to add some information about
                the project’s license, the organization, and a few of the developers
                associated with the project. This is all standard information you would
                expect to see in most projects. <xref linkend="ex-custom-org-info" />
                shows the <acronym>XML</acronym> that supplies the organizational
                information, the licensing information, and the developer
                information.</para>

            <example id="ex-custom-org-info">
                <title>Adding Organizational, Legal, and Developer Information to the
                    pom.xml</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    ...

                    &lt;name&gt;simple-weather&lt;/name&gt;
                    &lt;url&gt;http://www.sonatype.com&lt;/url&gt;

                    &lt;licenses&gt;
                    &lt;license&gt;
                    &lt;name&gt;Apache 2&lt;/name&gt;
                    &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;
                    &lt;distribution&gt;repo&lt;/distribution&gt;
                    &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;
                    &lt;/license&gt;
                    &lt;/licenses&gt;

                    &lt;organization&gt;
                    &lt;name&gt;Sonatype&lt;/name&gt;
                    &lt;url&gt;http://www.sonatype.com&lt;/url&gt;
                    &lt;/organization&gt;

                    &lt;developers&gt;
                    &lt;developer&gt;
                    &lt;id&gt;jason&lt;/id&gt;
                    &lt;name&gt;Jason Van Zyl&lt;/name&gt;
                    &lt;email&gt;jason@maven.org&lt;/email&gt;
                    &lt;url&gt;http://www.sonatype.com&lt;/url&gt;
                    &lt;organization&gt;Sonatype&lt;/organization&gt;
                    &lt;organizationUrl&gt;http://www.sonatype.com&lt;/organizationUrl&gt;
                    &lt;roles&gt;
                    &lt;role&gt;developer&lt;/role&gt;
                    &lt;/roles&gt;
                    &lt;timezone&gt;-6&lt;/timezone&gt;
                    &lt;/developer&gt;
                    &lt;/developers&gt;
                    ...
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>The ellipses in <xref linkend="ex-custom-org-info" /> are shorthand
                for an abbreviated listing. When you see a <filename>pom.xml</filename>
                with "..." and "..." directly after the <varname>project</varname>
                element's start tag and directly before the <varname>project</varname>
                element's end tag, this implies that we are not showing the entire
                <filename>pom.xml</filename> file. In this case the
                <varname>licenses</varname>, <varname>organization</varname>, and
                <varname>developers</varname> element were all added before the
                <varname>dependencies</varname> element.</para>
        </section>

        <section id="customizing-sect-add-depend">
            <title>Add New Dependencies</title>

            <para>The simple weather application is going to have to complete the
                following three tasks: retrieve <acronym>XML</acronym> data from Yahoo!
                Weather, parse the <acronym>XML</acronym> from Yahoo, and then print
                formatted output to standard output. To accomplish these tasks, we have to
                introduce some new dependencies to our project's
                <filename>pom.xml</filename>. To parse the <acronym>XML</acronym> response
                from Yahoo!, we're going to be using Dom4J and Jaxen, to format the output
                of this command-line program we are going to be using Velocity, and we
                will also need to add a dependency for Log4J which we will be using for
                logging. After we add these dependencies, our
                <varname>dependencies</varname> element will look like the following
                example.<indexterm>
                    <primary>dependency management</primary>
            </indexterm></para>

            <example>
                <title>Adding Dom4J, Jaxen, Velocity, and Log4J as Dependencies</title>

                <programlisting language="xml">&lt;project&gt;
                    [...]
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;log4j&lt;/groupId&gt;
                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
                    &lt;version&gt;1.2.14&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;dom4j&lt;/groupId&gt;
                    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
                    &lt;version&gt;1.6.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;jaxen&lt;/groupId&gt;
                    &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
                    &lt;version&gt;1.1.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;version&gt;1.5&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    [...]
                    &lt;/project&gt;</programlisting>
            </example>

            <para>As you can see above, we've added four more dependency elements in
                addition to the existing element which was referencing the
                <varname>test</varname> scoped dependency on JUnit. If you add these
                dependencies to the project's <filename>pom.xml</filename> file and then
                run <command>mvn install</command>, you will see Maven downloading all of
                these dependencies and other transitive dependencies to your local Maven
                repository.</para>

            <para><indexterm>
                    <primary>searching for artifacts</primary>
                </indexterm>How did we find these dependencies? Did we just "know" the
                appropriate <varname>groupId</varname> and <varname>artifactId</varname>
                values? Some of the dependencies are so widely used (like Log4J) that
                you'll just remember what the <varname>groupId</varname> and
                <varname>artifactId</varname> are every time you need to use them.
                Velocity, Dom4J, and Jaxen were all located using the searching capability
                on <ulink
                        url="http://repository.sonatype.org">http://repository.sonatype.org</ulink>
                . This is a public Sonatype Nexus instance which provides a search
                interface to various public Maven repositories, you can use it to search
                for dependencies. To test this for yourself, load <ulink
                                                                       url="http://repository.sonatype.org">http://repository.sonatype.org</ulink>
                and search for some commonly used libraries such as Hibernate or the
                Spring Framework. When you search for an artifact on this site, it will
                show you an <varname>artifactId</varname> and all of the versions known to
                the central Maven repository. Clicking on the details for a specific
                version will load a page that contains the dependency element you'll need
                to copy and paste into your own project's <filename>pom.xml</filename>. If
                you need to find a dependency, you'll want to check out <ulink
                                                                             url="http://repository.sonatype.org">repository.sonatype.org</ulink>, as
                you'll often find that certain libraries have more than one
                <varname>groupId</varname>. With this tool, you can make sense of the
                Maven repository.</para>
        </section>

        <section id="customizing-sect-simple-weather-source">
            <title>Simple Weather Source Code</title>

            <para>The Simple Weather command-line application consists of five Java
                classes.</para>

            <variablelist>
                <varlistentry>
                    <term><classname>org.sonatype.mavenbook.weather.Main</classname></term>

                    <listitem>
                        <para>The <literal>Main</literal> class contains a static
                            <methodname>main()</methodname> function: the entry point for this
                            system.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><classname>org.sonatype.mavenbook.weather.Weather</classname></term>

                    <listitem>
                        <para>The <classname>Weather</classname> class is a straightforward
                            Java bean that holds the location of our weather report and some key
                            facts, such as the temperature and humidity.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><classname>org.sonatype.mavenbook.weather.YahooRetriever</classname></term>

                    <listitem>
                        <para>The <classname>YahooRetriever</classname> class connects to
                            Yahoo! Weather and returns an <classname
                                                               role="keep-together">InputStream</classname> of the data from the
                            feed.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><classname>org.sonatype.mavenbook.weather.YahooParser</classname></term>

                    <listitem>
                        <para>The <classname>YahooParser</classname> class parses the
                            <acronym>XML</acronym> from Yahoo! Weather, and returns a
                            <classname>Weather</classname> object.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><classname>org.sonatype.mavenbook.weather.WeatherFormatter</classname></term>

                    <listitem>
                        <para>The <classname>WeatherFormatter</classname> class takes a
                            <classname>Weather</classname> object, creates a
                            <classname>VelocityContext</classname>, and evaluates a Velocity
                            template.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>Although we won’t dwell on the code here, we will provide all the
                necessary code for you to get the example working. We assume that most
                readers have downloaded the examples that accompany this book, but we’re
                also mindful of those who may wish to follow the example in this chapter
                step-by-step. The sections that follow list classes in the
                <varname>simple-weather</varname> project. Each of these classes should be
                placed in the same package:
                <package>org.sonatype.mavenbook.weather</package>.</para>

            <para>Let's remove the <classname>App</classname> and the
                <classname>AppTest</classname> classes created by
                <varname>archetype:generate</varname> and add our new package. In a Maven
                project, all of a project's source code is stored in
                <filename>src/main/java</filename>. From the base directory of the new
                project, execute the following commands:</para>

            <screen>$ <command>cd src/test/java/org/sonatype/mavenbook</command>
                $ <command>rm AppTest.java</command>
                $ <command>cd ../../../../../..</command>
                $ <command>cd src/main/java/org/sonatype/mavenbook</command>
                $ <command>rm App.java</command>
                $ <command>mkdir weather</command>
                $ <command>cd weather</command></screen>

            <para>This creates a new package named
                <package>org.sonatype.mavenbook.weather</package>. Now we need to put some
                classes in this directory. Using your favorite text editor, create a new
                file named <filename>Weather.java</filename> with the contents shown
                in<indexterm>
                    <primary>classes</primary>

                    <secondary>creating new</secondary>
                </indexterm> <xref linkend="ex-simple-weather-model-object" />.</para>

            <example id="ex-simple-weather-model-object">
                <title>Simple Weather's Weather Model Object</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    public class Weather {
                    private String city;
                    private String region;
                    private String country;
                    private String condition;
                    private String temp;
                    private String chill;
                    private String humidity;
                    
                    public Weather() {}

                    public String getCity() { return city; }
                    public void setCity(String city) { this.city = city; }

                    public String getRegion() { return region; }
                    public void setRegion(String region) { this.region = region; }

                    public String getCountry() { return country; }
                    public void setCountry(String country) { this.country = country; }

                    public String getCondition() { return condition; }
                    public void setCondition(String condition) { this.condition = condition; }

                    public String getTemp() { return temp; }
                    public void setTemp(String temp) { this.temp = temp; }
                    
                    public String getChill() { return chill; }
                    public void setChill(String chill) { this.chill = chill; }

                    public String getHumidity() { return humidity; }
                    public void setHumidity(String humidity) { this.humidity = humidity; }
                    }
                </programlisting>
            </example>

            <para>The <classname>Weather</classname> class defines a simple bean that
                is used to hold the weather information parsed from the Yahoo! Weather
                feed. This feed provides a wealth of information, from the sunrise and
                sunset times to the speed and direction of the wind. To keep this example
                as simple as possible, the <classname>Weather</classname> model object
                keeps track of only the temperature, chill, humidity, and a textual
                description of current conditions.</para>

            <para>Now, in the same directory, create a file named
                <filename>Main.java</filename>. This <classname>Main</classname> class
                will hold the static <methodname>main()</methodname> function—the entry
                point for this example.</para>

            <example>
                <title>Simple Weather's Main Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStream;

                    import org.apache.log4j.PropertyConfigurator;


                    public class Main {

                    public static void main(String[] args) throws Exception {
                    // Configure Log4J
                    PropertyConfigurator.configure(Main.class.getClassLoader()
                    .getResource("log4j.properties"));

                    // Read the Zip Code from the Command-line (if none supplied, use 60202)
                    String zipcode = "60202";
                    try {
                    zipcode = args[0];
                    } catch( Exception e ) {}

                    // Start the program
                    new Main(zipcode).start();
                    }

                    private String zip;

                    public Main(String zip) {
                    this.zip = zip;
                    }

                    public void start() throws Exception {
                    // Retrieve Data
                    InputStream dataIn = new YahooRetriever().retrieve( zip );

                    // Parse Data
                    Weather weather = new YahooParser().parse( dataIn );

                    // Format (Print) Data
                    System.out.print( new WeatherFormatter().format( weather ) );
                    }
                    }
                </programlisting>
            </example>

            <para>The <methodname>main()</methodname> function shown above configures
                Log4J by retrieving a resource from the classpath, it then tries to read a
                zip code from the command-line. If an exception is thrown while it is
                trying to read the zip code, the program will default to a zip code of
                60202. Once it has a zip code, it instantiates an instance of
                <classname>Main</classname> and calls the <methodname>start()</methodname>
                method on an instance of <classname>Main</classname>. The
                <methodname>start()</methodname> method calls out to the
                <classname>YahooRetriever</classname> to retrieve the weather
                <acronym>XML</acronym>. The <classname>YahooRetriever</classname> returns
                an <classname>InputStream</classname> which is then passed to the
                <classname>YahooParser</classname>. The <classname>YahooParser</classname>
                parses the Yahoo! Weather <acronym>XML</acronym> and returns a
                <classname>Weather</classname> object. Finally, the<classname>
                    WeatherFormatter</classname> takes a <classname>Weather</classname> object
                and spits out a formatted <classname>String</classname> which is printed
                to standard output.</para>

            <para>Create a file named <filename>YahooRetriever.java</filename> in the
                same directory with the contents shown in <xref
                                                               linkend="ex-simple-weather-yahoo-retriever-class" />.</para>

            <example id="ex-simple-weather-yahoo-retriever-class">
                <title>Simple Weather's YahooRetriever Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStream;
                    import java.net.URL;
                    import java.net.URLConnection;

                    import org.apache.log4j.Logger;

                    public class YahooRetriever {

                    private static Logger log = Logger.getLogger(YahooRetriever.class);

                    public InputStream retrieve(String zipcode) throws Exception {
                    log.info( "Retrieving Weather Data" );
                    String url = "http://weather.yahooapis.com/forecastrss?p=" + zipcode;
                    URLConnection conn = new URL(url).openConnection();
                    return conn.getInputStream();
                    }
                    }
                </programlisting>
            </example>

            <para>This simple class opens a <classname>URLConnection</classname> to
                the Yahoo! Weather <acronym>API</acronym> and returns an
                <classname>InputStream</classname>. To create something to parse this
                feed, we’ll need to create the <filename
                                                    role="keep-together">YahooParser.java</filename> file in the same
                directory.</para>

            <example>
                <title>Simple Weather's YahooParser Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStream;
                    import java.util.HashMap;
                    import java.util.Map;

                    import org.apache.log4j.Logger;
                    import org.dom4j.Document;
                    import org.dom4j.DocumentFactory;
                    import org.dom4j.io.SAXReader;

                    public class YahooParser {

                    private static Logger log = Logger.getLogger(YahooParser.class);

                    public Weather parse(InputStream inputStream) throws Exception {
                    Weather weather = new Weather();
                    
                    log.info( "Creating XML Reader" );
                    SAXReader xmlReader = createXmlReader();
                    Document doc = xmlReader.read( inputStream );

                    log.info( "Parsing XML Response" );
                    weather.setCity( doc.valueOf("/rss/channel/y:location/@city") );
                    weather.setRegion( doc.valueOf("/rss/channel/y:location/@region") );
                    weather.setCountry( doc.valueOf("/rss/channel/y:location/@country") );
                    weather.setCondition( doc.valueOf("/rss/channel/item/y:condition/@text") );
                    weather.setTemp( doc.valueOf("/rss/channel/item/y:condition/@temp") );
                    weather.setChill( doc.valueOf("/rss/channel/y:wind/@chill") );
                    weather.setHumidity( doc.valueOf("/rss/channel/y:atmosphere/@humidity") );
                    
                    return weather;
                    }

                    private SAXReader createXmlReader() {
                    Map&lt;String,String&gt; uris = new HashMap&lt;String,String&gt;();
                    uris.put( "y", "http://xml.weather.yahoo.com/ns/rss/1.0" );
                    
                    DocumentFactory factory = new DocumentFactory();
                    factory.setXPathNamespaceURIs( uris );
                    
                    SAXReader xmlReader = new SAXReader();
                    xmlReader.setDocumentFactory( factory );
                    return xmlReader;
                    }
                    }
                </programlisting>
            </example>

            <para>The <classname>YahooParser</classname> is the most complex class in
                this example. We’re not going to dive into the details of Dom4J or Jaxen
                here, but the class deserves some explanation.
                <classname>YahooParser</classname>’s <methodname>parse()</methodname>
                method takes an <classname>InputStream</classname> and returns a
                <classname>Weather</classname> object. To do this, it needs to parse an
                <acronym>XML</acronym> document with Dom4J. Since we’re interested in
                elements under the Yahoo! Weather <acronym>XML</acronym> namespace, we
                need to create a namespace-aware <classname>SAXReader</classname> in the
                <methodname>createXmlReader()</methodname> method. Once we create this
                reader and parse the document, we get an
                <classname>org.dom4j.Document</classname> object back. Instead of
                iterating through child elements, we simply address each piece of
                information we need using an XPath expression. Dom4J provides the
                <acronym>XML</acronym> parsing in this example, and Jaxen provides the
                XPath capabilities.</para>

            <para>Once we’ve created a <classname>Weather</classname> object, we need
                to format our output for human consumption. Create a file named
                <filename>WeatherFormatter.java</filename> in the same directory as the
                other classes.</para>

            <example>
                <title>Simple Weather's WeatherFormatter Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStreamReader;
                    import java.io.Reader;
                    import java.io.StringWriter;

                    import org.apache.log4j.Logger;
                    import org.apache.velocity.VelocityContext;
                    import org.apache.velocity.app.Velocity;

                    public class WeatherFormatter {

                    private static Logger log = Logger.getLogger(WeatherFormatter.class);

                    public String format( Weather weather ) throws Exception {
                    log.info( "Formatting Weather Data" );
                    Reader reader = 
                    new InputStreamReader( getClass().getClassLoader()
                    .getResourceAsStream("output.vm"));
                    VelocityContext context = new VelocityContext();
                    context.put("weather", weather );
                    StringWriter writer = new StringWriter();
                    Velocity.evaluate(context, writer, "", reader);
                    return writer.toString();
                    }
                    }
                </programlisting>
            </example>

            <para>The <classname>WeatherFormatter</classname> uses Velocity to render
                a template. The <methodname>format()</methodname> method takes a
                <classname>Weather</classname> bean and spits out a formatted
                <classname>String</classname>. The first thing the
                <methodname>format()</methodname> method does is load a Velocity template
                from the classpath named <filename>output.vm</filename>. We then create a
                <classname>VelocityContext</classname> which is populated with a single
                <classname>Weather</classname> object named <varname>weather</varname>. A
                <classname>StringWriter</classname> is created to hold the results of the
                template merge. The template is evaluated with a call to
                <methodname>Velocity.evaluate()</methodname> and the results are returned
                as a <classname>String</classname>.</para>

            <para>Before we can run this example, we'll need to add some resources to
                our classpath.</para>
        </section>

        <section id="customizing-sect-add-resources">
            <title>Add Resources</title>

            <para>This project depends on two classpath resources: the<indexterm
                                                                           class="startofrange" id="weather03f">
                    <primary>weather project (example)</primary>

                    <secondary>adding resources</secondary>
                </indexterm><indexterm class="startofrange" id="weather03f1">
                    <primary>customizing projects</primary>

                    <secondary>adding resources</secondary>
                </indexterm><indexterm class="startofrange" id="weather03f2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>adding resources</tertiary>
                </indexterm><indexterm class="startofrange" id="weather03f3">
                    <primary>resources</primary>

                    <secondary>adding to packages</secondary>
                </indexterm> <classname>Main</classname> class that configures Log4J
                with a classpath resource named <filename>log4j.properties</filename>, and
                the <classname>WeatherFormatter</classname> that references a Velocity
                template from the classpath named <filename>output.vm</filename>. Both of
                these resources need to be in the default package (or the root of the
                classpath).</para>

            <para>To add these resources, we’ll need to create a new directory
                from<indexterm>
                    <primary>resources directory, creating</primary>
                </indexterm> the base directory of the project:
                <filename>src/main/resources</filename>. Since this directory was not
                created by the <varname role="keep-together">archetype:generate</varname>
                task, we need to create it by executing the following commands from the
                project’s base directory:</para>

            <screen>$ <command>cd src/main</command>
                $ <command>mkdir resources</command>
                $ <command>cd resources</command></screen>

            <para>Once the resources directory is created, we can add the two
                resources. First, add the <filename>log4j.properties</filename> file in
                the <filename>resources</filename> directory, as shown in <xref
                                                                               linkend="ex-simple-weather-log4j-config" />.</para>

            <example id="ex-simple-weather-log4j-config">
                <title>Simple Weather's Log4J Configuration File</title>

                <programlisting language="java"># Set root category priority to INFO and its only appender to CONSOLE.
                    log4j.rootCategory=INFO, CONSOLE

                    # CONSOLE is set to be a ConsoleAppender using a PatternLayout.
                    log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
                    log4j.appender.CONSOLE.Threshold=INFO
                    log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
                    log4j.appender.CONSOLE.layout.ConversionPattern=%-4r %-5p %c{1} %x - %m%n</programlisting>
            </example>

            <para>This <filename>log4j.properties</filename> file simply configures
                Log4J to print all log messages to standard output using a
                <classname>PatternLayout</classname>. Lastly, we need to create the
                <filename>output.vm</filename>, which is the Velocity template used to
                render the output of this command-line program. Create
                <filename>output.vm</filename> in the <filename>resources/</filename>
                directory.</para>

            <example>
                <title>Simple Weather's Output Velocity Template</title>

                <programlisting>*********************************
                    Current Weather Conditions for:
                    \${weather.city}, \${weather.region}, \${weather.country}
                    
                    Temperature: \${weather.temp}
                    Condition: \${weather.condition}
                    Humidity: \${weather.humidity}
                    Wind Chill: \${weather.chill}
                    *********************************
                </programlisting>
            </example>

            <para>This template contains a number of references to a variable named
                <varname>weather</varname>, which is the <classname>Weather</classname>
                bean that was passed to the <classname>WeatherFormatter</classname>. The
                <varname>\${weather.temp}</varname> syntax is shorthand for retrieving and
                displaying the value of the <varname>temp</varname> bean property. Now
                that we have all of our project’s code in the right place, we can use
                <indexterm class="endofrange" startref="weather03f"></indexterm><indexterm
                                                                                     class="endofrange" startref="weather03f1"></indexterm><indexterm
                                                                                                                                                class="endofrange" startref="weather03f2"></indexterm><indexterm
                                                                                                                                                                                                           class="endofrange" startref="weather03f3"></indexterm>Maven to run the
                example.</para>
        </section>

        <section id="customizing-sect-custom-exec">
            <title>Running the Simple Weather Program</title>

            <para>Using the Exec plugin from the <ulink
                                                      url="http://mojo.codehaus.org">Codehaus Mojo project</ulink>, we
                can<indexterm class="startofrange" id="weather03g">
                    <primary>weather project (example)</primary>

                    <secondary>running (executing)</secondary>
                </indexterm><indexterm class="startofrange" id="weather03g1">
                    <primary>customizing projects</primary>

                    <secondary>running (executing)</secondary>
                </indexterm><indexterm class="startofrange" id="weather03g2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>running (executing)</tertiary>
                </indexterm> execute this program. To execute the
                <classname>Main</classname> class, run the following command from the
                project’s base directory:<indexterm>
                    <primary>Exec plugin</primary>

                    <secondary>java goal</secondary>
                </indexterm><indexterm>
                    <primary>executing code via Maven</primary>
            </indexterm></para>

            <screen>$ <command>mvn install</command>
                /$ <command>mvn exec:java -Dexec.mainClass=org.sonatype.mavenbook.weather.Main</command>
                ...
                [INFO] [exec:java]
                0    INFO  YahooRetriever  - Retrieving Weather Data
                134  INFO  YahooParser  - Creating XML Reader
                333  INFO  YahooParser  - Parsing XML Response
                420  INFO  WeatherFormatter  - Formatting Weather Data
                *********************************
                Current Weather Conditions for:
                Evanston, IL, US
                
                Temperature: 45
                Condition: Cloudy
                Humidity: 76
                Wind Chill: 38
                *********************************
                ...</screen>

            <para>We didn’t supply a command-line argument to the
                <classname>Main</classname> class, so we ended up with the default zip
                code, 60202. To supply a zip code, we would use the
                <varname>-Dexec.args</varname> argument and pass in a zip code:</para>

            <screen>$ <command>mvn exec:java -Dexec.mainClass=org.sonatype.mavenbook.weather.Main \
                    -Dexec.args="70112"</command>
                ...
                [INFO] [exec:java]
                0    INFO  YahooRetriever  - Retrieving Weather Data
                134  INFO  YahooParser  - Creating XML Reader
                333  INFO  YahooParser  - Parsing XML Response
                420  INFO  WeatherFormatter  - Formatting Weather Data
                *********************************
                Current Weather Conditions for:
                New Orleans, LA, US
                
                Temperature: 82
                Condition: Fair
                Humidity: 71
                Wind Chill: 82
                *********************************
                [INFO] Finished at: Sun Aug 31 09:33:34 CDT 2008
                ...</screen>

            <para>As you can see, we’ve successfully executed the simple weather
                command-line tool, retrieved some data from Yahoo! Weather, parsed the
                result, and formatted the resulting data with Velocity. We achieved all of
                this without doing much more than writing our project’s source code and
                adding some minimal configuration to the <filename>pom.xml</filename>.
                Notice that no “build process” was involved. We didn’t need to define how
                or where the Java compiler compiles our source to bytecode, and we didn’t
                need to instruct the build system how to locate the bytecode when we
                executed the example application. All we needed to do to include a few
                dependencies was locate the appropriate Maven coordinates.</para>

            <section id="customizing-sect-maven-exec">
                <title>The Maven Exec Plugin</title>

                <para>The Exec plugin allows you to execute Java classes and other
                    scripts. It is not a core Maven plugin, but it is available from the
                    <ulink url="http://mojo.codehaus.org">Mojo</ulink> project hosted by
                    <ulink url="http://www.codehaus.org">Codehaus</ulink>. For a full
                    description of the Exec plugin, run:<indexterm>
                        <primary>Help plugin</primary>

                        <secondary>describe goal</secondary>
                </indexterm></para>

                <screen>$ <command>mvn help:describe -Dplugin=exec -Dfull</command></screen>

                <para>This will list all of the goals that are available in the Maven
                    Exec plugin. The Help plugin will also list all of the valid parameters
                    for the Exec plugin. If you would like to customize the behavior of the
                    Exec plugin you should use the documentation provided by
                    <varname>help:describe</varname> as a guide. Although the Exec plugin is
                    useful, you shouldn’t rely on it as a way to execute your application
                    outside of running tests during development. For a more robust solution,
                    use the Maven <phrase role="keep-together">Assembly</phrase> plugin that
                    is demonstrated in the section <xref
                                                        linkend="customizing-sect-custom-packaged" />, later in this
                    chapter.</para>
            </section>

            <section id="customizing-sect-exploring-dependencies">
                <title>Exploring Your Project Dependencies</title>

                <para>The Exec plugin makes it possible for us to run the simplest
                    weather program without having to load the appropriate dependencies into
                    the classpath. In any other build system, we would have to copy all of
                    the program dependencies into some sort of <filename>lib/</filename>
                    directory containing a collection of <acronym>JAR</acronym> files. Then,
                    we would have to write a simple script that includes our program’s
                    bytecode and all of our dependencies in a classpath. Only then could we
                    run <command>java org.sonatype.mavenbook.weather.Main</command>. The
                    Exec plugin leverages the fact that Maven already knows how to create
                    and manage your classpath and dependencies.</para>

                <para>This is convenient, but it’s also nice to know exactly what is
                    being included in your project’s classpath. Although the project depends
                    on a few libraries such as Dom4J, Log4J, Jaxen, and Velocity, it also
                    relies on a few transitive dependencies. If you need to find out what is
                    on the classpath, you can use the Maven Dependency plugin to print out
                    a<indexterm>
                        <primary>Dependency plugin</primary>
                    </indexterm><indexterm>
                        <primary>Maven Dependency plugin</primary>
                    </indexterm><indexterm>
                        <primary>dependencies</primary>

                        <secondary>exploring with Dependency plugin</secondary>
                    </indexterm> list of resolved dependencies. To print out this list for
                    the simple weather project, execute the
                    <varname>dependency:resolve</varname> goal:<indexterm>
                        <primary>Dependency plugin</primary>

                        <secondary>resolve goal</secondary>
                </indexterm></para>

                <screen>$ <command>mvn dependency:resolve</command>
                    ...
                    [INFO] [dependency:resolve]
                    [INFO] 
                    [INFO] The following files have been resolved: 
                    [INFO]    com.ibm.icu:icu4j:jar:2.6.1 (scope = compile)
                    [INFO]    commons-collections:commons-collections:jar:3.1 (scope = compile)
                    [INFO]    commons-lang:commons-lang:jar:2.1 (scope = compile)
                    [INFO]    dom4j:dom4j:jar:1.6.1 (scope = compile)
                    [INFO]    jaxen:jaxen:jar:1.1.1 (scope = compile)
                    [INFO]    jdom:jdom:jar:1.0 (scope = compile)
                    [INFO]    junit:junit:jar:3.8.1 (scope = test)
                    [INFO]    log4j:log4j:jar:1.2.14 (scope = compile)
                    [INFO]    oro:oro:jar:2.0.8 (scope = compile)
                    [INFO]    velocity:velocity:jar:1.5 (scope = compile)
                    [INFO]    xalan:xalan:jar:2.6.0 (scope = compile)
                    [INFO]    xerces:xercesImpl:jar:2.6.2 (scope = compile)
                    [INFO]    xerces:xmlParserAPIs:jar:2.6.2 (scope = compile)
                    [INFO]    xml-apis:xml-apis:jar:1.0.b2 (scope = compile)
                    [INFO]    xom:xom:jar:1.0 (scope = compile)
                </screen>

                <para>As you can see, our project has a very large set of dependencies.
                    While we only included direct dependencies on four libraries, we appear
                    to be depending on 15 dependencies in total. Dom4J depends on Xerces and
                    the XML Parser <acronym>API</acronym>s, Jaxen depends on Xalan being
                    available in the classpath. The Dependency plugin is going to print out
                    the final combination of dependencies under which your project is being
                    compiled. If you would like to know about the entire dependency tree of
                    your project, you can run the <varname>dependency:tree</varname>
                    goal.<indexterm>
                        <primary>Dependency plugin</primary>

                        <secondary>tree goal</secondary>
                    </indexterm><indexterm>
                        <primary>generating a dependency tree</primary>
                </indexterm></para>

                <screen>$ <command>mvn dependency:tree</command>
                    ...
                    [INFO] [dependency:tree]
                    [INFO] org.sonatype.mavenbook.custom:simple-weather:jar:1.0
                    [INFO] +- log4j:log4j:jar:1.2.14:compile
                    [INFO] +- dom4j:dom4j:jar:1.6.1:compile
                    [INFO] |  \- xml-apis:xml-apis:jar:1.0.b2:compile
                    [INFO] +- jaxen:jaxen:jar:1.1.1:compile
                    [INFO] |  +- jdom:jdom:jar:1.0:compile
                    [INFO] |  +- xerces:xercesImpl:jar:2.6.2:compile
                    [INFO] |  \- xom:xom:jar:1.0:compile
                    [INFO] |     +- xerces:xmlParserAPIs:jar:2.6.2:compile
                    [INFO] |     +- xalan:xalan:jar:2.6.0:compile
                    [INFO] |     \- com.ibm.icu:icu4j:jar:2.6.1:compile
                    [INFO] +- velocity:velocity:jar:1.5:compile
                    [INFO] |  +- commons-collections:commons-collections:jar:3.1:compile
                    [INFO] |  +- commons-lang:commons-lang:jar:2.1:compile
                    [INFO] |  \- oro:oro:jar:2.0.8:compile
                    [INFO] +- org.apache.commons:commons-io:jar:1.3.2:test
                    [INFO] \- junit:junit:jar:3.8.1:test
                    ...</screen>

                <para>If you're truly adventurous or want to see the full dependency
                    trail, including artifacts that were rejected due to conflicts and other
                    reasons, run Maven with the debug flag.<indexterm>
                        <primary>debugging Maven</primary>
                </indexterm></para>

                <screen>$ <command>mvn install -X</command>
                    ...
                    [DEBUG] org.sonatype.mavenbook.custom:simple-weather:jar:1.0 (selected for null)
                    [DEBUG]   log4j:log4j:jar:1.2.14:compile (selected for compile)
                    [DEBUG]   dom4j:dom4j:jar:1.6.1:compile (selected for compile)
                    [DEBUG]     xml-apis:xml-apis:jar:1.0.b2:compile (selected for compile)
                    [DEBUG]   jaxen:jaxen:jar:1.1.1:compile (selected for compile)
                    [DEBUG]     jaxen:jaxen:jar:1.1-beta-6:compile (removed - )
                    [DEBUG]     jaxen:jaxen:jar:1.0-FCS:compile (removed - )
                    [DEBUG]     jdom:jdom:jar:1.0:compile (selected for compile)
                    [DEBUG]     xml-apis:xml-apis:jar:1.3.02:compile (removed - nearer: 1.0.b2)
                    [DEBUG]     xerces:xercesImpl:jar:2.6.2:compile (selected for compile)
                    [DEBUG]     xom:xom:jar:1.0:compile (selected for compile)
                    [DEBUG]       xerces:xmlParserAPIs:jar:2.6.2:compile (selected for compile)
                    [DEBUG]       xalan:xalan:jar:2.6.0:compile (selected for compile)
                    [DEBUG]       xml-apis:xml-apis:1.0.b2.
                    [DEBUG]       com.ibm.icu:icu4j:jar:2.6.1:compile (selected for compile)
                    [DEBUG]   velocity:velocity:jar:1.5:compile (selected for compile)
                    [DEBUG]     commons-collections:commons-collections:jar:3.1:compile 
                    [DEBUG]     commons-lang:commons-lang:jar:2.1:compile (selected for compile)
                    [DEBUG]     oro:oro:jar:2.0.8:compile (selected for compile)
                    [DEBUG]   junit:junit:jar:3.8.1:test (selected for test)
                </screen>

                <para>In the debug output, we see some of the guts of the dependency
                    management system at work. What you see here is the tree of dependencies
                    for this project. Maven is printing out the full Maven coordinates for
                    all of your project’s dependencies and the <phrase
                                                                    role="keep-together">dependencies</phrase> of your dependencies (and the
                    dependencies of your dependencies’ dependencies). You can see that
                    <varname>simple-weather</varname> depends on <varname>jaxen</varname>,
                    which depends on <varname>xom</varname>, which in turn depends on
                    <varname>icu4j</varname>. You can also see that Maven is creating a
                    graph of dependencies, eliminating duplicates, and resolving any
                    conflicts between different versions. If you are having problems with
                    dependencies, it is often helpful to dig a little deeper than the list
                    generated by <varname>dependency:resolve</varname>. Turning on the debug
                    output allows you to see Maven’s dependency <indexterm
                                                                     class="endofrange" startref="weather03g"></indexterm><indexterm
                                                                                                                               class="endofrange" startref="weather03g1"></indexterm><indexterm
                                                                                                                                                                                          class="endofrange" startref="weather03g2"></indexterm>mechanism at
                    work.</para>
            </section>
        </section>

        <section id="customizing-sect-writing-tests">
            <title>Writing Unit Tests</title>

            <para>Maven has built-in support for unit tests, and testing is a part
                of<indexterm class="startofrange" id="weather03h">
                    <primary>weather project (example)</primary>

                    <secondary>writing unit tests</secondary>
                </indexterm><indexterm class="startofrange" id="weather03h1">
                    <primary>customizing projects</primary>

                    <secondary>writing unit tests</secondary>
                </indexterm><indexterm class="startofrange" id="weather03h2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>writing unit tests</tertiary>
                </indexterm><indexterm class="startofrange" id="weather03h3">
                    <primary>unit tests</primary>

                    <secondary>writing</secondary>
                </indexterm><indexterm>
                    <primary>testing</primary>

                    <secondary>unit tests</secondary>

                    <see>unit tests</see>
                </indexterm><indexterm>
                    <primary>testing</primary>

                    <seealso>debugging</seealso>
                </indexterm> the default Maven lifecycle. Let’s add some unit tests to
                our simple weather project. First, let’s create the
                <package>org.sonatype.mavenbook.weather</package> package under
                <filename>src/test/java</filename>:</para>

            <screen>$ <command>cd src/test/java</command>
                $ <command>cd org/sonatype/mavenbook</command>
                $ <command>mkdir -p weather/yahoo</command>
                $ <command>cd weather/yahoo</command></screen>

            <para>At this point, we will create two unit tests. The first will test
                the <classname>YahooParser</classname>, and the second will test the
                <classname>WeatherFormatter</classname>. In the <literal>weather</literal>
                package, create a file named <filename>YahooParserTest.java</filename>
                with the contents shown in the next example.</para>

            <example>
                <title>Simple Weather's YahooParserTest Unit Test</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather.yahoo;

                    import java.io.InputStream;

                    import junit.framework.TestCase;

                    import org.sonatype.mavenbook.weather.Weather;
                    import org.sonatype.mavenbook.weather.YahooParser;

                    public class YahooParserTest extends TestCase {

                    public YahooParserTest(String name) {
                    super(name);
                    }
                    
                    public void testParser() throws Exception {
                    InputStream nyData = 
                    getClass().getClassLoader().getResourceAsStream("ny-weather.xml");
                    Weather weather = new YahooParser().parse( nyData );
                    assertEquals( "New York", weather.getCity() );
                    assertEquals( "NY", weather.getRegion() );
                    assertEquals( "US", weather.getCountry() );
                    assertEquals( "39", weather.getTemp() );
                    assertEquals( "Fair", weather.getCondition() );
                    assertEquals( "39", weather.getChill() );
                    assertEquals( "67", weather.getHumidity() );
                    }
                    }
                </programlisting>
            </example>

            <para>This <classname>YahooParserTest</classname> extends the
                <classname>TestCase</classname> class defined by JUnit. It follows the
                usual pattern for a JUnit test: a constructor that takes a single
                <classname>String</classname> argument that calls the constructor of the
                superclass, and a series of public methods that begin with
                “<literal>test</literal>” that are invoked as unit tests. We define a
                single test method, <methodname>testParser</methodname>, which tests the
                <classname>YahooParser</classname> by parsing an <acronym>XML</acronym>
                document with known values. The test <acronym>XML</acronym> document is
                named <filename>ny-weather.xml</filename> and is loaded from the
                classpath. We’ll add test resources in <xref
                                                            linkend="customizing-sect-custom-test-resource" />. In our Maven project’s
                directory layout, the <filename>ny-weather.xml</filename> file is found in
                the directory that contains test
                resources—<filename>\${basedir}/src/test/resources</filename>
                under<filename>
                    org/sonatype/mavenbook/weather/yahoo/ny-weather.xml</filename>. The file
                is read as an <classname>InputStream</classname> and passed to the
                <methodname>parse()</methodname> method on
                <classname>YahooParser</classname>. The <methodname>parse()</methodname>
                method returns a <classname>Weather</classname> object, which is then
                tested with a series of calls to <methodname>assertEquals()</methodname>,
                a method defined by <classname>TestCase</classname>.</para>

            <para>In the same directory, create a file named
                <filename>WeatherFormatterTest.java</filename>.</para>

            <example>
                <title>Simple Weather's WeatherFormatterTest Unit Test</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather.yahoo;

                    import java.io.InputStream;

                    import org.apache.commons.io.IOUtils;

                    import org.sonatype.mavenbook.weather.Weather;
                    import org.sonatype.mavenbook.weather.WeatherFormatter;
                    import org.sonatype.mavenbook.weather.YahooParser;

                    import junit.framework.TestCase;

                    public class WeatherFormatterTest extends TestCase {

                    public WeatherFormatterTest(String name) {
                    super(name);
                    }

                    public void testFormat() throws Exception {
                    InputStream nyData = 
                    getClass().getClassLoader().getResourceAsStream("ny-weather.xml");
                    Weather weather = new YahooParser().parse( nyData );
                    String formattedResult = new WeatherFormatter().format( weather );
                    InputStream expected = 
                    getClass().getClassLoader().getResourceAsStream("format-expected.dat");
                    assertEquals( IOUtils.toString( expected ).trim(), 
                    formattedResult.trim() );
                    }
                    }
                </programlisting>
            </example>

            <para>The second unit test in this simple project tests the
                <classname>WeatherFormatter</classname>. Like the
                <classname>YahooParserTest</classname>, the
                <classname>WeatherFormatterTest</classname> also extends JUnit's
                <classname>TestCase</classname> class. The single test function reads the
                same test resource from
                <filename>\${basedir}/src/test/resources</filename> under the
                <filename>org/sonatype/mavenbook/weather/yahoo</filename> directory via
                this unit test's classpath. We'll add test resources in <xref
                                                                             linkend="customizing-sect-custom-test-resource" />.
                <classname>WeatherFormatterTest</classname> runs this sample input file
                through the <classname>YahooParser</classname> which spits out a
                <classname>Weather</classname> object, and this object is then formatted
                with the <classname>WeatherFormatter</classname>. Since the
                <classname>WeatherFormatter</classname> prints out a
                <classname>String</classname>, we need to test it against some expected
                input. Our expected input has been captured in a text file named
                <filename>format-expected.dat</filename> which is in the same directory as
                <filename>ny-weather.xml</filename>. To compare the test's output to the
                expected output, we read this expected output in as an
                <classname>InputStream</classname> and use Commons IO's
                <classname>IOUtils</classname> class to convert this file to a
                <classname>String</classname>. This <classname>String</classname> is then
                compared to the test output using
                <methodname>assertEquals()</methodname>.</para>
        </section>

        <section id="customizing-sect-test-scope">
            <title>Adding Test-scoped Dependencies</title>

            <para>In <classname>WeatherFormatterTest</classname>, we used a
                utility<indexterm class="startofrange" id="weather03i">
                    <primary>weather project (example)</primary>

                    <secondary>adding test-scoped dependencies</secondary>
                </indexterm><indexterm class="startofrange" id="weather03i1">
                    <primary>customizing projects</primary>

                    <secondary>adding test-scoped dependencies</secondary>
                </indexterm><indexterm class="startofrange" id="weather03i2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>adding test-scoped dependencies</tertiary>
                </indexterm><indexterm class="startofrange" id="weather03i3">
                    <primary>dependencies</primary>

                    <secondary>test-scoped</secondary>
                </indexterm><indexterm class="startofrange" id="weather03i6">
                    <primary>test-scoped dependencies</primary>
                </indexterm><indexterm class="startofrange" id="weather03i4">
                    <primary>unit tests</primary>

                    <secondary>test-scoped dependencies</secondary>
                </indexterm><indexterm class="startofrange" id="weather03i5">
                    <primary>testing</primary>

                    <secondary>using test-scoped dependencies</secondary>
                </indexterm> from Apache Commons IO—the <classname>IOUtils</classname>
                class. <classname>IOUtils</classname> provides a number of helpful static
                functions that take most of the work out of input/output operations. In
                this particular unit test, we used <methodname
                                                        role="keep-together">IOUtils.toString()</methodname> to copy the
                <filename>format-expected.dat</filename> classpath resource to a
                <classname>String</classname>. We could have done this without using
                Commons IO, but it would have required an extra six or seven lines of code
                to deal with the various <classname>InputStreamReader</classname> and
                <classname role="keep-together">StringWriter</classname> objects. The main
                reason we used Commons IO was to give us an excuse to add a
                <literal>test</literal>-scoped dependency on Commons IO.</para>

            <para>A <literal>test</literal>-scoped dependency is a dependency that is
                available on the classpath only during test compilation and test
                execution. If your project has <varname>war</varname> or
                <varname>ear</varname> packaging, a <literal>test</literal>-scoped
                dependency would not be included in the project’s output archive. To add a
                <literal>test</literal>-scoped dependency, add the
                <sgmltag>dependency</sgmltag> element to your project’s<indexterm>
                    <primary sortas="scope element">&lt;scope&gt; element
                        (%lt;dependency&gt; element)</primary>
                </indexterm> <sgmltag>dependencies</sgmltag> section, as shown in the
                following example:</para>

            <example>
                <title>Adding a Test-scoped Dependency</title>

                <programlisting language="xml">&lt;project&gt;
                    ...
                    &lt;dependencies&gt;
                    ...
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
                    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
                    &lt;version&gt;1.3.2&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    ...
                    &lt;/dependencies&gt;
                    &lt;/project&gt;</programlisting>
            </example>

            <para>After you add this dependency to the <filename>pom.xml</filename>,
                run <command>mvn dependency:resolve</command> and you should see that
                <varname>commons-io</varname> is now listed as a dependency with scope
                <varname>test</varname>. We need to do one more thing before we are ready
                to run this project's unit tests. We need to create the classpath
                resources these unit tests depend on.</para>
        </section>

        <section id="customizing-sect-custom-test-resource">
            <title>Adding Unit Test Resources</title>

            <para>A unit test has access to a set of resources which are specific to
                tests. Often you'll store files containing expected results and files
                containing dummy input in the test classpath. In this project, we're
                storing a test <acronym>XML</acronym> document for
                <classname>YahooParserTest</classname> named
                <filename>ny-weather.xml</filename> and a file containing expected output
                from the <classname>WeatherFormatter</classname> in
                <filename>format-expected.dat</filename>.</para>

            <para>To add test resources, you'll need to create the
                <filename>src/test/resources</filename> directory. This is the default
                directory in which Maven looks for unit test resources. To create this
                directory execute the following commands from your project's base
                directory.</para>

            <screen>$ <command>cd src/test</command>
                $ <command>mkdir resources</command>
                $ <command>cd resources</command></screen>

            <para>Once you've create the resources directory, create a file named
                <filename>format-expected.dat</filename> in the
                <filename>resources</filename> directory.</para>

            <example>
                <title>Simple Weather's WeatherFormatterTest Expected Output</title>

                <programlisting>*********************************
                    Current Weather Conditions for:
                    New York, NY, US
                    
                    Temperature: 39
                    Condition: Fair
                    Humidity: 67
                    Wind Chill: 39
                    *********************************
                </programlisting>
            </example>

            <para>This file should look familiar. It is the same output that was
                generated previously when you ran the simple weather project with the
                Maven Exec plugin. The second file you’ll need to add to the resources
                directory is <filename>ny-weather.xml</filename>.</para>

            <example>
                <title>Simple Weather's YahooParserTest XML Input</title>

                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;
                    &lt;rss version="2.0" xmlns:yweather="http://xml.weather.yahoo.com/ns/rss/1.0" 
                    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"&gt;
                    &lt;channel&gt;
                    &lt;title&gt;Yahoo! Weather - New York, NY&lt;/title&gt;
                    &lt;link&gt;http://us.rd.yahoo.com/dailynews/rss/weather/New_York__NY/&lt;/link&gt;
                    &lt;description&gt;Yahoo! Weather for New York, NY&lt;/description&gt;
                    &lt;language&gt;en-us&lt;/language&gt;
                    &lt;lastBuildDate&gt;Sat, 10 Nov 2007 8:51 pm EDT&lt;/lastBuildDate&gt;

                    &lt;ttl&gt;60&lt;/ttl&gt;
                    &lt;yweather:location city="New York" region="NY" country="US" /&gt;
                    &lt;yweather:units temperature="F" distance="mi" pressure="in" speed="mph" /&gt;
                    &lt;yweather:wind chill="39" direction="0" speed="0" /&gt;
                    &lt;yweather:atmosphere humidity="67" visibility="1609" pressure="30.18" 
                    rising="1" /&gt;
                    &lt;yweather:astronomy sunrise="6:36 am" sunset="4:43 pm" /&gt;
                    &lt;image&gt;
                    &lt;title&gt;Yahoo! Weather&lt;/title&gt;

                    &lt;width&gt;142&lt;/width&gt;
                    &lt;height&gt;18&lt;/height&gt;
                    &lt;link&gt;http://weather.yahoo.com/&lt;/link&gt;
                    &lt;url&gt;http://l.yimg.com/us.yimg.com/i/us/nws/th/main_142b.gif&lt;/url&gt;
                    &lt;/image&gt;
                    &lt;item&gt;
                    &lt;title&gt;Conditions for New York, NY at 8:51 pm EDT&lt;/title&gt;

                    &lt;geo:lat&gt;40.67&lt;/geo:lat&gt;
                    &lt;geo:long&gt;-73.94&lt;/geo:long&gt;
                    &lt;link&gt;http://us.rd.yahoo.com/dailynews/rss/weather/New_York__NY/\&lt;/link&gt;
                    &lt;pubDate&gt;Sat, 10 Nov 2007 8:51 pm EDT&lt;/pubDate&gt;
                    &lt;yweather:condition text="Fair" code="33" temp="39" 
                    date="Sat, 10 Nov 2007 8:51 pm EDT" /&gt;
                    &lt;description&gt;&lt;![CDATA[
                    &lt;img src="http://l.yimg.com/us.yimg.com/i/us/we/52/33.gif" /&gt;&lt;br /&gt;
                    &lt;b&gt;Current Conditions:&lt;/b&gt;&lt;br /&gt;
                    Fair, 39 F&lt;BR /&gt;&lt;BR /&gt;
                    &lt;b&gt;Forecast:&lt;/b&gt;&lt;BR /&gt;
                    Sat - Partly Cloudy. High: 45 Low: 32&lt;br /&gt;
                    Sun - Sunny. High: 50 Low: 38&lt;br /&gt;
                    &lt;br /&gt;
                    ]]&gt;&lt;/description&gt;
                    &lt;yweather:forecast day="Sat" date="10 Nov 2007" low="32" high="45" 
                    text="Partly Cloudy" code="29" /&gt;

                    &lt;yweather:forecast day="Sun" date="11 Nov 2007" low="38" high="50" 
                    text="Sunny" code="32" /&gt;
                    &lt;guid isPermaLink="false"&gt;10002_2007_11_10_20_51_EDT&lt;/guid&gt;
                    &lt;/item&gt;
                    &lt;/channel&gt;
                    &lt;/rss&gt;</programlisting>
            </example>

            <para>This file contains a test <acronym>XML</acronym> document for the
                <classname>YahooParserTest</classname>. We store this file so that we can
                test the <classname>YahooParser</classname> without having to retrieve and
                <acronym>XML</acronym> response from Yahoo! Weather.</para>
        </section>

        <section id="customizing-sect-executing-tests">
            <title>Executing Unit Tests</title>

            <para>Now that your project has unit tests, let’s run them. You don’t
                have<indexterm class="startofrange" id="weather03l">
                    <primary>weather project (example)</primary>

                    <secondary>unit tests, executing</secondary>
                </indexterm><indexterm class="startofrange" id="weather03l1">
                    <primary>customizing projects</primary>

                    <secondary>unit tests, executing</secondary>
                </indexterm><indexterm class="startofrange" id="weather03l2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>unit tests, executing</tertiary>
                </indexterm><indexterm class="startofrange" id="weather03l3">
                    <primary>unit tests</primary>

                    <secondary>executing</secondary>
                </indexterm> to do anything special to run a unit test; the
                <varname>test</varname> phase is a normal part of the Maven lifecycle. You
                run Maven tests whenever you run <command>mvn package</command> or
                <command>mvn install</command>. If you would like to run all the lifecycle
                phases up to and including the <varname>test</varname> phase, run
                <command>mvn test</command>:</para>

            <screen>$ <command>mvn test</command>
                ...
                [INFO] [surefire:test]
                [INFO] Surefire report directory: ~/examples/ch-custom/simple-weather/target/\
                surefire-reports

                -------------------------------------------------------
                T E S T S
                -------------------------------------------------------
                Running org.sonatype.mavenbook.weather.yahoo.WeatherFormatterTest
                0    INFO  YahooParser  - Creating XML Reader
                177  INFO  YahooParser  - Parsing XML Response
                239  INFO  WeatherFormatter  - Formatting Weather Data
                Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.547 sec
                Running org.sonatype.mavenbook.weather.yahoo.YahooParserTest
                475  INFO  YahooParser  - Creating XML Reader
                483  INFO  YahooParser  - Parsing XML Response
                Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec

                Results :

                Tests run: 2, Failures: 0, Errors: 0, Skipped: 0
            </screen>

            <para>Executing <command>mvn test</command> from the command line caused
                Maven to execute all lifecycle phases up to the <literal>test</literal>
                phase. The Maven Surefire plugin has a <literal>test</literal> goal which
                is bound to the <literal>test</literal> phase. This
                <literal>test</literal> goal executes all of the unit tests this project
                can find under <filename>src/test/java</filename> with filenames matching
                <filename>**/Test*.java</filename>, <filename>**/*Test.java</filename> and
                <filename>**/*TestCase.java</filename>. In the case of this project, you
                can see that the Surefire plugin's <literal>test</literal> goal executed
                <classname>WeatherFormatterTest</classname> and
                <classname>YahooParserTest</classname>. When the Maven Surefire plugin
                runs the JUnit tests, it also generates <acronym>XML</acronym> and text
                reports in the <filename>\${basedir}/target/surefire-reports</filename>
                directory. If your tests are failing, you should look in this directory
                for details like stack traces and error messages generated by your unit
                tests.</para>

            <section id="customizing-sect-ignoring-failures">
                <title>Ignoring Test Failures</title>

                <para>You will often find yourself developing on a system that has
                    failing unit tests. If you are practicing Test-Driven Development
                    (<acronym>TDD</acronym>), you might use test failure as a measure of how
                    close your project is to completeness. If you have failing unit tests,
                    and you would still like to produce build output, you are going to have
                    to tell Maven to ignore build failures. When Maven encounters a build
                    failure, its default behavior is to stop the current build. To continue
                    building a project even when the Surefire plugin encounters failed
                    test<indexterm>
                        <primary>testFailureIgnore configuration property (Surefire
                            plugin)</primary>
                    </indexterm><indexterm>
                        <primary>Surefire plugin</primary>

                        <secondary>testFailureIgnore configuration property</secondary>
                    </indexterm><indexterm>
                        <primary>Maven Surefire plugin</primary>

                        <secondary>testFailureIgnore configuration property</secondary>
                    </indexterm><indexterm>
                        <primary>unit tests</primary>

                        <secondary>ignoring test failures</secondary>
                    </indexterm> cases, you’ll need to set the
                    <varname>testFailureIgnore</varname> configuration property of the
                    Surefire plugin to <literal>true</literal>.</para>

                <example>
                    <title>Ignoring Unit Test Failures</title>

                    <programlisting language="xml">&lt;project&gt;
                        [...]
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
                        &lt;/configuration&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        [...]
                        &lt;/project&gt;</programlisting>
                </example>

                <para>The plugin documents (<ulink
                                                 url="http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html">http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html</ulink>)
                    show that this parameter declares an expression:</para>

                <example>
                    <title>Plugin Parameter Expressions</title>

                    <programlisting>
                        testFailureIgnore  Set this to true to ignore a failure during \
                        testing. Its use is NOT RECOMMENDED, but quite \
                        convenient on occasion.

                        * Type: boolean
                        * Required: No
                        * Expression: \${maven.test.failure.ignore}
                    </programlisting>
                </example>

                <para>This expression can be set from the command line using the
                    <varname>-D</varname> parameter:</para>

                <screen>$ <command>mvn test -Dmaven.test.failure.ignore=true</command></screen>
            </section>

            <section id="customizing-sect-skipping-tests">
                <title>Skipping Unit Tests</title>

                <para>You may want to configure Maven to skip unit tests altogether.
                    Maybe you have a very large system where the unit tests take minutes to
                    complete and you don't want to wait for unit tests to complete before
                    producing output. You might be working with a legacy system that has a
                    series of failing unit tests, and instead of fixing the unit tests, you
                    might just want to produce a <acronym>JAR</acronym>. Maven provides for
                    the ability to skip unit tests using the <varname>skip</varname>
                    parameter of the Surefire plugin. To skip tests from the command-line,
                    simply add the <varname>maven.test.skip</varname> property to any
                    goal:<indexterm>
                        <primary>skipping unit tests</primary>
                    </indexterm><indexterm>
                        <primary>Surefire plugin</primary>

                        <secondary>skipping tests</secondary>
                </indexterm></para>

                <screen>$ <command>mvn install -Dmaven.test.skip=true</command>
                    ...
                    [INFO] [compiler:testCompile]
                    [INFO] Not compiling test sources
                    [INFO] [surefire:test]
                    [INFO] Tests are skipped.
                    ...</screen>

                <para>When the Surefire plugin reaches the <varname>test</varname> goal,
                    it will skip the unit tests if the <varname>maven.test.skip</varname>
                    properties is set to <literal>true</literal>. Another way to configure
                    Maven to skip unit tests is to add this configuration to your project's
                    <filename>pom.xml</filename>. To do this, you would add a
                    <sgmltag>plugin</sgmltag> element to your <sgmltag>build</sgmltag>
                    configuration.</para>

                <example>
                    <title>Skipping Unit Tests</title>

                    <programlisting language="xml">&lt;project&gt;
                        [...]
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;skip&gt;true&lt;/skip&gt;
                        &lt;/configuration&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        [...]
                        &lt;/project&gt;</programlisting>
                </example>
            </section>
        </section>

        <section id="customizing-sect-custom-packaged">
            <title>Building a Packaged Command Line Application</title>

            <para>In the <xref linkend="customizing-sect-custom-exec" /> section
                earlier in <indexterm class="startofrange" id="weather03m">
                    <primary>weather project (example)</primary>

                    <secondary>building packaged command-line application</secondary>
                </indexterm><indexterm class="startofrange" id="weather03m1">
                    <primary>customizing projects</primary>

                    <secondary>building packaged command-line application</secondary>
                </indexterm><indexterm class="startofrange" id="weather03m2">
                    <primary>projects</primary>

                    <secondary>customizing</secondary>

                    <tertiary>building packaged command-line application</tertiary>
                </indexterm><indexterm class="startofrange" id="weather03m3">
                    <primary>command-line application, packaging</primary>
                </indexterm><indexterm class="startofrange" id="weather03m4">
                    <primary>packaging applications</primary>

                    <secondary>command-line applications</secondary>
                </indexterm><indexterm class="startofrange" id="weather03m5">
                    <primary>applications, building and packaging</primary>

                    <secondary>command-line applications</secondary>
                </indexterm>this chapter, we executed our application using the Maven
                Exec plugin. Although that plugin executed the program and produced some
                output, you shouldn’t look to Maven as an execution container for your
                applications. If you are distributing this command-line application to
                others, you will probably want to distribute a <acronym>JAR</acronym> or
                an archive as a <acronym>ZIP</acronym> or <acronym>TAR</acronym>’d
                <acronym>GZIP</acronym> file. This section outlines a process for using a
                predefined assembly<indexterm>
                    <primary>Assembly plugin</primary>
                </indexterm><indexterm>
                    <primary>Maven Assembly plugin</primary>
                </indexterm> descriptor in the Maven Assembly plugin to produce a
                distributable <acronym>JAR</acronym> file, which contains the project’s
                bytecode and all of the dependencies.</para>

            <para>The Maven Assembly plugin is a plugin you can use to create
                arbitrary distributions for your applications. You can use the Maven
                Assembly plugin to assemble the output of your project in any format you
                desire by defining a custom assembly descriptor. In a later chapter we
                will show you how to create a custom assembly descriptor which produces a
                more complex archive for the Simple Weather application. In this chapter,
                we're going to use the predefined <varname>jar-with-dependencies</varname>
                format. To configure the Maven Assembly Plugin, we need to add the
                following <sgmltag>plugin</sgmltag> configuration to our existing build
                configuration in the <filename>pom.xml</filename>.</para>

            <example>
                <title>Configuring the Maven Assembly Descriptor</title>

                <programlisting language="xml">&lt;project&gt;
                    [...]
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;descriptorRefs&gt;
                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                    &lt;/descriptorRefs&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    [...]
                    &lt;/project&gt;</programlisting>
            </example>

            <para>Once you’ve added this configuration, you can build the assembly by
                running the <varname>assembly:assembly</varname> goal. In the following
                screen listing, the <varname>assembly:assembly</varname> goal is executed
                after the Maven build reaches the <varname>install</varname> lifecycle
                phase:<indexterm>
                    <primary>Assembly plugin</primary>

                    <secondary>assembly goal</secondary>
            </indexterm></para>

            <screen>$ <command>mvn install assembly:assembly</command>
                ...
                [INFO] [jar:jar]
                [INFO] Building jar: 
                ~/examples/ch-custom/simple-weather/target/simple-weather-1.0.jar
                [INFO] [assembly:assembly]
                [INFO] Processing DependencySet (output=)
                [INFO] Expanding: \
                .m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar into \
                /tmp/archived-file-set.1437961776.tmp
                [INFO] Expanding: .m2/repository/commons-lang/commons-lang/2.1/\
                commons-lang-2.1.jar
                into /tmp/archived-file-set.305257225.tmp
                ... (Maven Expands all dependencies into a temporary directory) ...
                [INFO] Building jar: \
                ~/examples/ch-custom/simple-weather/target/\
                simple-weather-1.0-jar-with-dependencies.jar
            </screen>

            <para>Once our assembly is assembled in
                <filename>target/</filename><filename>simple-weather-1.0-jar-with-</filename><filename>dependencies.jar</filename>,
                we can run the <classname>Main</classname> class again from the command
                line. To run the simple weather application’s <classname>Main</classname>
                class, execute the following commands from your project’s base
                directory:</para>

            <screen>$ <command>cd target</command>
                $ <command>java -cp simple-weather-1.0-jar-with-dependencies.jar \
                    org.sonatype.mavenbook.weather.Main 10002</command>
                0    INFO  YahooRetriever  - Retrieving Weather Data
                221  INFO  YahooParser  - Creating XML Reader
                399  INFO  YahooParser  - Parsing XML Response
                474  INFO  WeatherFormatter  - Formatting Weather Data
                *********************************
                Current Weather Conditions for:
                New York, NY, US
                
                Temperature: 44
                Condition: Fair
                Humidity: 40
                Wind Chill: 40
                *********************************</screen>

            <para>The <varname>jar-with-dependencies</varname> format creates a single
                <acronym>JAR</acronym> file that includes all of the bytecode from the
                <varname>simple-weather</varname> project as well as the unpacked bytecode
                from all of the dependencies. This somewhat unconventional format produces
                a 9 MiB <acronym>JAR</acronym> file containing approximately 5,290
                classes, but it does provide for an easy distribution format for
                applications you’ve developed with Maven. Later in this book, we’ll show
                you how to create a custom assembly descriptor to produce a more standard
                <indexterm class="endofrange" startref="weather03m"></indexterm><indexterm
                                                                                     class="endofrange" startref="weather03m1"></indexterm><indexterm
                                                                                                                                                class="endofrange" startref="weather03m2"></indexterm><indexterm
                                                                                                                                                                                                           class="endofrange" startref="weather03m3"></indexterm><indexterm
                                                                                                                                                                                                                                                                      class="endofrange" startref="weather03m4"></indexterm><indexterm
                                                                                                                                                                                                                                                                                                                                 class="endofrange" startref="weather03m5"></indexterm><indexterm
                                                                                                                                                                                                                                                                                                                                                                                            class="endofrange" startref="customproj1"></indexterm><indexterm
                                                                                                                                                                                                                                                                                                                                                                                                                                                       class="endofrange" startref="customproj2"></indexterm><phrase
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  role="keep-together">distribution</phrase>.</para>

            <section id="customizing-sect-attaching-assembly">
                <title>Attaching the Assembly Goal to the Package Phase</title>

                <para><indexterm>
                        <primary>attaching a goal to a phase</primary>
                    </indexterm><indexterm>
                        <primary>plugin configuration</primary>
                    </indexterm>In Maven 1, a build was customized by stringing together a
                    series of plugin goals. Each plugin goal had prerequisites and defined a
                    relationship to other plugin goals. With the release of Maven 2, a
                    lifecycle was introduced and plugin goals are now associated with a
                    series of phases in a default Maven build lifecycle. The lifecycle
                    provides a solid foundation that makes it easier to predict and manage
                    the plugin goals which will be executed in a given build. In Maven 1,
                    plugin goals related to one another directly; in Maven 2, plugin goals
                    relate to a set of common lifecycle stages. While it is certainly valid
                    to execute a plugin goal directly from the command-line as we just
                    demonstrated, it is more consistent with the design of Maven to
                    configure the Assembly plugin to execute the
                    <varname>assembly:assembly</varname> goal during a phase in the Maven
                    lifecycle.</para>

                <para>The following plugin configuration configures the Maven Assembly
                    plugin to execute the <varname>attached</varname> goal during the
                    <varname>package</varname> phase of the Maven default build lifecycle.
                    The <varname>attached</varname> goal does the same thing as the
                    <varname>assembly</varname> goal. To bind to
                    <varname>assembly:attached</varname> goal to the
                    <varname>package</varname> phase we use the
                    <sgmltag>executions</sgmltag> element under <sgmltag>plugin</sgmltag> in
                    the <sgmltag>build</sgmltag> section of the project's POM.<indexterm>
                        <primary>Assembly plugin</primary>

                        <secondary>attaching to phase</secondary>
                </indexterm></para>

                <example floatstyle="" id="ex-customization-attach-assembly">
                    <title>Configuring Attached Goal Execution During the Package
                        Lifecycle Phase</title>

                    <para><programlisting language="xml">&lt;project&gt;
                            [...]
                            &lt;build&gt;
                            &lt;plugins&gt;
                            &lt;plugin&gt;
                            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                            &lt;configuration&gt;
                            &lt;descriptorRefs&gt;
                            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                            &lt;/descriptorRefs&gt;
                            &lt;/configuration&gt;
                            &lt;executions&gt;
                            &lt;execution&gt;
                            &lt;id&gt;simple-command&lt;/id&gt;
                            &lt;phase&gt;package&lt;/phase&gt;
                            &lt;goals&gt;
                            &lt;goal&gt;attached&lt;/goal&gt;
                            &lt;/goals&gt;
                            &lt;/execution&gt;
                            &lt;/executions&gt;
                            &lt;/plugin&gt;
                            &lt;/plugins&gt;
                            &lt;/build&gt;
                            [...]
                            &lt;/project&gt;</programlisting></para>
                </example>

                <para>Once you have this configuration in your POM, all you need to do
                    to generate the assembly is run <command>mvn package</command>. The
                    execution configuration will make sure that the
                    <varname>assembly:attached</varname> goal is executed when the Maven
                    lifecycle transitions to the <varname>package</varname> phase of the
                    lifecycle. The assembly will also be created if you run <command>mvn
                        install</command> as the package phase precedes the install phase in the
                    default Maven lifecycle.</para>
            </section>
        </section>
    </chapter>

    <chapter id="web">
        <title>A Simple Web Application</title>

        <section id="web-sect-intro">
            <title>Introduction</title>

            <para>In this chapter, we create a simple web application with the
                Maven<indexterm>
                    <primary>simple Web application</primary>

                    <see>Web applications</see>
                </indexterm><indexterm class="startofrange" id="webapp1">
                    <primary>Web applications</primary>

                    <secondary>simple Web project (example)</secondary>
                </indexterm><indexterm>
                    <primary>customizing projects</primary>

                    <secondary>Web applications</secondary>

                    <see>Web applications</see>
                </indexterm><indexterm>
                    <primary>projects</primary>

                    <secondary>Web applications</secondary>

                    <see>Web applications</see>
                </indexterm> Archetype plugin. We’ll run this web application in a
                Servlet container named Jetty, add some dependencies, write a simple
                Servlet, and generate a <acronym>WAR</acronym> file. At the end of this
                chapter, you will be able to start using Maven to accelerate the
                development of web applications.</para>

            <section id="web-sect-downloading">
                <title>Downloading this Chapter's Example</title>

                <para>The example in this chapter is generated with the <indexterm>
                        <primary>Archetype plugin</primary>
                    </indexterm>Maven Archetype plugin. While you should be able to follow
                    the development of this chapter without the example source code, we
                    recommend downloading a copy of the example code to use as a reference.
                    This chapter’s example project may be downloaded with the book’s example
                    code at:</para>

                <screen>${examples.download.url}</screen>

                <para>Unzip this archive in any directory, and then go to the
                    <filename>ch-simple-web/</filename> directory. There you will see a
                    directory named <filename>simple-webapp/</filename>, which contains the
                    Maven project developed in this chapter.</para>
            </section>
        </section>

        <section id="web-sect-defining-simple-web">
            <title>Defining the Simple Web Application</title>

            <para>We’ve purposefully kept this chapter focused on Plain-Old Web
                Applications (<acronym>POWA</acronym>)—a <indexterm>
                    <primary>servlet</primary>
                </indexterm>servlet and a <indexterm>
                    <primary>Java Server Page (JSP)</primary>
                </indexterm>JavaServer Pages (<acronym>JSP</acronym>) page. We’re not
                going to tell you how to develop your Struts 2, Tapestry, Wicket, Java
                Server Faces (<acronym>JSF</acronym>), or Waffle application in the next
                20-odd pages, and we’re not going to get into integrating an Inversion of
                Control (<acronym>IoC</acronym>) container such as <indexterm>
                    <primary>Plexus</primary>
                </indexterm>Plexus, <indexterm>
                    <primary>Guice</primary>
                </indexterm>Guice, or the <indexterm>
                    <primary>Spring Framework</primary>
                </indexterm>Spring Framework. The goal of this chapter is to show you
                the basic facilities that Maven provides for developing web
                applications—no more, no less. Later in this book, we’re going to take a
                look at developing two web applications: one using <indexterm>
                    <primary>Hibernate</primary>
                </indexterm>Hibernate, <indexterm>
                    <primary>Velocity</primary>
                </indexterm>Velocity, and the <indexterm>
                    <primary>Spring Framework</primary>
                </indexterm>Spring Framework; and the other that uses Plexus.</para>
        </section>

        <section id="web-sect-creating-project">
            <title>Creating the Simple Web Project</title>

            <para>To create your web application <indexterm class="startofrange"
                                                            id="webapp2">
                    <primary>Web applications</primary>

                    <secondary>simple Web project (example)</secondary>

                    <tertiary>creating</tertiary>
                </indexterm>project, run <command>mvn archetype:generate</command> with
                an <varname>artifactId</varname> and a <varname>groupId</varname>. Run
                <varname>archetype:generate</varname> as shown below, choose archetype #19
                "maven-archetype-webapp", and then press Y to confirm and create the new
                web application project:<indexterm>
                    <primary>Archetype plugin</primary>

                    <secondary>generate goal</secondary>
            </indexterm></para>

            <screen><command>$ mvn archetype:generate -DgroupId=org.sonatype.mavenbook.simpleweb \
                    -DartifactId=simple-webapp \
                    -Dpackage=org.sonatype.mavenbook \
                    -Dversion=1.0-SNAPSHOT</command>
                ...
                [INFO] [archetype:generate {execution: default-cli}]
                Choose archetype:
                ...
                19: internal -&gt; maven-archetype-webapp (A simple Java web application)
                ...
                Choose a number:  (...) 15: : <emphasis>19</emphasis>
                Confirm properties configuration:
                groupId: org.sonatype.mavenbook.simpleweb
                artifactId: simple-webapp
                version: 1.0-SNAPSHOT
                package: org.sonatype.mavenbook.simpleweb
                Y: : <emphasis>Y</emphasis>
                [INFO] Parameter: groupId, Value: org.sonatype.mavenbook.simpleweb
                [INFO] Parameter: packageName, Value: org.sonatype.mavenbook.simpleweb
                [INFO] Parameter: package, Value: org.sonatype.mavenbook.simpleweb
                [INFO] Parameter: artifactId, Value: simple-webapp
                [INFO] Parameter: basedir, Value: /private/tmp
                [INFO] Parameter: version, Value: 1.0-SNAPSHOT
                ...
                [INFO] BUILD SUCCESSFUL
            </screen>

            <para>Once the Maven Archetype plugin creates the project, change
                directories into the <filename
                                          role="keep-together">simple-webapp</filename> directory and take a look at
                the <filename>pom.xml</filename>. You should see the<indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>for simple Web project (example)</secondary>
                </indexterm> <acronym>XML</acronym> document shown in the following
                example:<indexterm>
                    <primary>pom.xml</primary>
            </indexterm></para>

            <example>
                <title>Initial <acronym>POM</acronym> for the simple-webapp
                    Project</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.simpleweb&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    &lt;/build&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Next, you will need to configure the Maven Compiler plugin to target
                Java 5. To do this, add the <sgmltag>plugins</sgmltag> element to the
                initial POM as shown in <xref
                                             linkend="ex-web-initial-pom-with-compiler" />.<indexterm>
                    <primary>Compiler plugin</primary>

                    <secondary>configuration</secondary>
            </indexterm></para>

            <example id="ex-web-initial-pom-with-compiler">
                <title><acronym>POM</acronym> for the simple-webapp Project with
                    Compiler Configuration</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.simpleweb&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    <emphasis>    &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;1.5&lt;/source&gt;
                        &lt;target&gt;1.5&lt;/target&gt;
                        &lt;/configuration&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;</emphasis>
                    &lt;/build&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Notice the <sgmltag>packaging</sgmltag> element contains the value
                <literal>war</literal>. This packaging type is what configures Maven to
                <indexterm>
                    <primary>WAR files</primary>
                </indexterm>produce a web application archive in a
                <acronym>WAR</acronym> file. A project with <literal>war</literal>
                packaging is going to create a <acronym>WAR</acronym> file in the
                <filename>target/</filename> directory. The default name of this file is
                <filename>\${artifactId}-\${version}.war</filename>. In this project, the
                default <acronym>WAR</acronym> would be generated in
                <filename>target/simple-webapp-1.0-SNAPSHOT.war</filename>. In the
                <literal>simple-webapp</literal> project, we’ve customized the name of the
                generated <acronym>WAR</acronym> file by adding a
                <sgmltag>finalName</sgmltag> element inside of this project’s build
                configuration. With a <sgmltag>finalName</sgmltag> of
                <literal>simple-webapp</literal>, the <literal>package</literal> phase
                produces a <acronym>WAR</acronym> file in<indexterm class="endofrange"
                                                                    startref="webapp2"></indexterm>
                <filename>target/simple-webapp.war</filename>.</para>
        </section>

        <section id="web-sect-configuring-jetty">
            <title>Configuring the Jetty Plugin</title>

            <para><indexterm>
                    <primary>Jetty</primary>
                </indexterm>Once you’ve compiled, tested, and packaged your web
                application,<indexterm class="startofrange" id="webapp3a">
                    <primary>Web applications</primary>

                    <secondary>simple Web project (example)</secondary>

                    <tertiary>configuring Jetty plugin</tertiary>
                </indexterm><indexterm class="startofrange" id="webapp3b">
                    <primary>Jetty plugin</primary>

                    <secondary>configuring in pom.xml</secondary>
                </indexterm><indexterm class="startofrange" id="webapp3c">
                    <primary>Maven Jetty plugin</primary>

                    <secondary>configuring in pom.xml</secondary>
                </indexterm> you’ll likely want to deploy it to a servlet container and
                test the <filename>index.jsp</filename> that was created by the Maven
                Archetype plugin. Normally, this would involve downloading something like
                Jetty or Apache Tomcat, unpacking a distribution, copying your
                application’s <acronym>WAR</acronym> file to a
                <filename>webapps/</filename> directory, and then starting your container.
                Although you can still do such a thing, there is no need. Instead, you can
                use the Maven Jetty plugin to run your web application within Maven. To do
                this, we’ll need to configure the Maven Jetty plugin in our project’s
                <filename>pom.xml</filename>. Add the <literal>plugin</literal> element
                shown in the following example to your project’s build
                configuration.<indexterm>
                    <primary>Jetty plugin</primary>

                    <secondary>configuration</secondary>
            </indexterm></para>

            <example>
                <title>Configuring the Jetty Plugin</title>

                <programlisting language="xml">&lt;project&gt;
                    [...]
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    [...]
                    &lt;/project&gt;</programlisting>
            </example>

            <para>Once you've configured the Maven Jetty Plugin in your project's
                <filename>pom.xml</filename>, you can then invoke the Run goal of the
                Jetty plugin to start your web application in the Jetty Servlet container.
                Run <command>mvn jetty:run</command> from the
                <filename>simple-webapp/</filename> project directory as follows:</para>

            <indexterm>
                <primary>Jetty plugin</primary>

                <secondary>run goal</secondary>
            </indexterm>

            <screen>~/examples/ch-simple-web/simple-webapp $ <command>mvn jetty:run</command>
                ...
                [INFO] [jetty:run]
                [INFO] Configuring Jetty for project: simple-webapp Maven Webapp
                [INFO] Webapp source directory = \
                ~/svnw/sonatype/examples/ch-simple-web/simple-webapp/src/main/webapp
                [INFO] web.xml file = \
                ~/svnw/sonatype/examples/ch-simple-web/\
                simple-webapp/src/main/webapp/WEB-INF/web.xml
                [INFO] Classes = ~/svnw/sonatype/examples/ch-simple-web/\
                simple-webapp/target/classes
                2007-11-17 22:11:50.532::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
                [INFO] Context path = /simple-webapp
                [INFO] Tmp directory =  determined at runtime
                [INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
                [INFO] Web overrides =  none
                [INFO] Webapp directory = \
                ~/svnw/sonatype/examples/ch-simple-web/simple-webapp/src/main/webapp
                [INFO] Starting jetty 6.1.6rc1 ...
                2007-11-17 22:11:50.673::INFO:  jetty-6.1.6rc1
                2007-11-17 22:11:50.846::INFO:  No Transaction manager found 
                2007-11-17 22:11:51.057::INFO:  Started SelectChannelConnector@0.0.0.0:8080
                [INFO] Started Jetty Server
            </screen>

            <warning>
                <para>If you are running the Maven Jetty Plugin on a Windows platform
                    you may need to move your local Maven repository to a directory that
                    does not contain spaces. Some readers have reported issues on Jetty
                    startup caused by a repository that was being stored under
                    <filename>"C:\Documents and Settings\&lt;user&gt;"</filename>.
                    <indexterm>
                        <primary>settings.xml</primary>
                    </indexterm>The solution to this problem is to move your local Maven
                    repository to a directory that does not contain spaces and redefine the
                    location of your local repository in
                    <filename>~/.m2/settings.xml</filename>.</para>
            </warning>

            <para>After Maven starts the Jetty Servlet container, load the URL <ulink
                                                                                    url="http://localhost:8080/simple-webapp/">http://localhost:8080/simple-webapp/</ulink>
                in a web browser. The simple <filename>index.jsp</filename> generated by
                the Archetype is trivial; it contains a second-level heading with the text
                "Hello World!". Maven expects the document root of the web application to
                be stored in <filename>src/main/webapp</filename>. It is in this directory
                where you will find the <filename>index.jsp</filename> file shown in <xref
                                                                                          linkend="web-example-index" />.</para>

            <example id="web-example-index">
                <title>Contents of src/main/webapp/index.jsp</title>

                <programlisting language="xml">&lt;html&gt;
                    &lt;body&gt;
                    &lt;h2&gt;Hello World!&lt;/h2&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;
                </programlisting>
            </example>

            <para>In <filename>src/main/webapp/WEB-INF</filename>, we will find the
                smallest possible web application <phrase
                                                       role="keep-together">descriptor</phrase> in<indexterm class="endofrange"
                                                                                                             startref="webapp3a"></indexterm><indexterm class="endofrange"
                                                                                                                                                        startref="webapp3b"></indexterm><indexterm class="endofrange"
                                                                                                                                                                                                   startref="webapp3c"></indexterm> <filename>web.xml</filename>, shown in
                this next example:</para>

            <example>
                <title>Contents of src/main/webapp/WEB-INF/web.xml</title>

                <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
                    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                    "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

                    &lt;web-app&gt;
                    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
                    &lt;/web-app&gt;</programlisting>
            </example>
        </section>

        <section id="web-sect-adding-simple-servlet">
            <title>Adding a Simple Servlet</title>

            <para>A web application with a single JSP page and no configured
                servlets<indexterm class="startofrange" id="webapp4a">
                    <primary>Web applications</primary>

                    <secondary>simple Web project (example)</secondary>

                    <tertiary>adding simple servlet</tertiary>
                </indexterm><indexterm class="startofrange" id="webapp4b">
                    <primary>servlets, adding to project</primary>
                </indexterm> is next to useless. Let’s add a simple servlet to this
                application and make some changes to the <filename>pom.xml</filename> and
                <filename>web.xml</filename> to support this change. First, we’ll need to
                create a new package under <filename>src/main/java</filename> named
                <package>org.sonatype.mavenbook.web</package>:</para>

            <screen>$ <command>mkdir -p src/main/java/org/sonatype/mavenbook/web</command>
                $ <command>cd src/main/java/org/sonatype/mavenbook/web</command></screen>

            <para>Once you’ve created this package, change to the
                <filename>src/main/java/org/sonatype/mavenbook/web</filename> directory
                and create a class named <classname>SimpleServlet</classname> in
                <filename>SimpleServlet.java</filename>, which contains the code shown in
                the <classname>SimpleServlet</classname> class:</para>

            <example>
                <title>SimpleServlet Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.web;

                    import java.io.*;
                    import javax.servlet.*;                                                         
                    import javax.servlet.http.*;

                    public class SimpleServlet extends HttpServlet {
                    public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
                    throws ServletException, IOException {
                    
                    PrintWriter out = response.getWriter();
                    out.println( "SimpleServlet Executed" );
                    out.flush();
                    out.close();
                    }
                    }
                </programlisting>
            </example>

            <para>Our <classname>SimpleServlet</classname> class is just that: a
                servlet that prints a simple message to the response’s
                <classname>Writer</classname>. To add this servlet to your web application
                and map it to a request path, add the <sgmltag>servlet</sgmltag> and
                <sgmltag>servlet-mapping</sgmltag> elements shown in the following
                <filename>web.xml</filename> to your project’s<indexterm>
                    <primary>web.xml file</primary>

                    <secondary>servlet and servlet-mapping attributes</secondary>
                </indexterm><indexterm>
                    <primary>servlet-mapping attribute (web.xml)</primary>
                </indexterm><indexterm>
                    <primary>servlet attribute (web.xml)</primary>
                </indexterm> <filename>web.xml</filename> file. The
                <filename>web.xml</filename> file can be found in
                <filename>src/main/webapp/WEB-INF</filename>.</para>

            <example>
                <title>Mapping the Simple Servlet</title>

                <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
                    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                    "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

                    &lt;web-app&gt;
                    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
                    &lt;servlet&gt;
                    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
                    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
                    &lt;/servlet&gt;
                    &lt;servlet-mapping&gt;
                    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt;
                    &lt;/web-app&gt;</programlisting>
            </example>

            <para>Everything is in place to test this servlet; the class is in
                <filename>src/main/java</filename> and the <filename>web.xml</filename>
                has been updated. Before we launch the Jetty plugin, compile your project
                by running <command>mvn compile</command>:</para>

            <screen>~/examples/ch-simple-web/simple-webapp $ <command>mvn compile</command>
                ...
                [INFO] [compiler:compile]
                [INFO] Compiling 1 source file to \
                ~/examples/ch-simple-web/simple-webapp/target/classes
                [INFO] ------------------------------------------------------------------------
                [ERROR] BUILD FAILURE
                [INFO] ------------------------------------------------------------------------
                [INFO] Compilation failure

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[4,0] \
                package javax.servlet does not exist

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[5,0] \
                package javax.servlet.http does not exist

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[7,35] \
                cannot find symbol
                symbol: class HttpServlet
                public class SimpleServlet extends HttpServlet {

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[8,22] \
                cannot find symbol
                symbol  : class HttpServletRequest
                location: class org.sonatype.mavenbook.web.SimpleServlet

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[9,22] \
                cannot find symbol
                symbol  : class HttpServletResponse
                location: class org.sonatype.mavenbook.web.SimpleServlet

                /src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[10,15] \
                cannot find symbol
                symbol  : class ServletException
                location: class org.sonatype.mavenbook.web.SimpleServlet
            </screen>

            <para>The compilation fails because your Maven project doesn't have a
                dependency on the Servlet <acronym>API</acronym>. In the next section,
                we'll add the Servlet <acronym>API</acronym> to this project's
                <acronym>POM</acronym>.</para>
        </section>

        <section id="web-sect-adding-j2ee-depend">
            <title>Adding J2EE Dependencies</title>

            <para>To write a servlet, we’ll need to add the Servlet<indexterm
                                                                        class="startofrange" id="webapp5a">
                    <primary>Web applications</primary>

                    <secondary>simple Web project (example)</secondary>

                    <tertiary>adding J2EE dependences</tertiary>
                </indexterm><indexterm class="startofrange" id="webapp5b">
                    <primary>J2EE dependencies, adding</primary>
                </indexterm><indexterm class="startofrange" id="webapp5c">
                    <primary>dependencies</primary>

                    <secondary>J2EE dependencies, adding</secondary>
                </indexterm><indexterm>
                    <primary>Servlet API, adding as dependency</primary>
                </indexterm> <acronym>API</acronym> as a project dependency. To add the
                Servlet specification <acronym>API</acronym> as a dependency to your
                project’s <acronym>POM</acronym>, add the dependency element as shown in
                this next example:<indexterm>
                    <primary>dependency scope</primary>
            </indexterm></para>

            <example>
                <title>Add the Servlet 2.4 Specification as a Dependency</title>

                <programlisting language="xml">&lt;project&gt;
                    [...]
                    &lt;dependencies&gt;
                    [...]
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    [...]
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>It is also worth pointing out that we have used the
                <literal>provided</literal> scope for this dependency. This tells Maven
                that the jar is "provided" by the container and thus should not be
                included in the war. If you were interested in writing a custom
                <acronym>JSP</acronym><indexterm>
                    <primary>JSP 2.0 specification, dependency on</primary>
                </indexterm><indexterm>
                    <primary>dependencies</primary>

                    <secondary sortas="JSP 2.0 specification">on JSP 2.0
                        specification</secondary>
                </indexterm> tag for this simple web application, you would need to add
                a dependency on the <acronym>JSP</acronym> 2.0 spec. Use the configuration
                shown in this example:</para>

            <example>
                <title>Adding the JSP 2.0 Specification as a Dependency</title>

                <programlisting language="xml">&lt;project&gt;
                    [...]
                    &lt;dependencies&gt;
                    [...]
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
                    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
                    &lt;version&gt;2.0&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    [...]
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Once you've added the Servlet specification as a dependency, run
                <command>mvn clean install</command> followed by <command>mvn
                    jetty:run</command>.</para>

            <note>
                <para>mvn jetty:run will continue to run the Jetty servlet container
                    until you stop the process with CTRL-C. If you started Jetty in <xref
                                                                                         linkend="web-sect-configuring-jetty" />, you will need to stop that
                    process before starting Jetty a second time.</para>
            </note>

            <screen>[tobrien@t1 simple-webapp]$ <command>mvn clean install</command>
                ...
                [tobrien@t1 simple-webapp]$ <command>mvn jetty:run</command>
                [INFO] [jetty:run]
                ...
                2007-12-14 16:18:31.305::INFO:  jetty-6.1.6rc1
                2007-12-14 16:18:31.453::INFO:  No Transaction manager found 
                2007-12-14 16:18:32.745::INFO:  Started SelectChannelConnector@0.0.0.0:8080
                [INFO] Started Jetty Server
            </screen>

            <para>At this point, you should be able to retrieve the output of the
                <classname>SimpleServlet</classname>. From the command line, you can use
                curl to print the output of this servlet to standard output:</para>

            <screen>~/examples/ch-simple-web $ <command>curl http://localhost:8080/simple-webapp/simple</command>
                SimpleServlet Executed
            </screen>
        </section>

        <section id="web-sect-conclusion">
            <title>Conclusion</title>

            <para>After reading this chapter, you should be able to bootstrap a simple
                web application. This chapter didn't dwell on the million different ways
                to create a complete web application, other chapters provide a more
                comprehensive overview of projects that involve some of the more popular
                web frameworks and technologies.</para>
        </section>
    </chapter>

    <chapter id="multimodule">
        <title>A Multi-module Project</title>

        <section id="multimodule-sect-intro">
            <title>Introduction</title>

            <para>In this chapter, we create a multi-module project that combines
                the<indexterm class="startofrange" id="multimod1a">
                    <primary>multi-module project (example)</primary>
                </indexterm><indexterm class="startofrange" id="multimod1b">
                    <primary>Web applications</primary>

                    <secondary>multi-module project example</secondary>
                </indexterm><indexterm>
                    <primary>weather project (example)</primary>

                    <seealso>multi-module project</seealso>
                </indexterm> examples from the two previous chapters. The
                <literal>simple-weather</literal> code developed in <xref
                                                                         linkend="customizing" /> will be combined with the
                <literal>simple-webapp</literal> project defined in <xref linkend="web" />
                to create a web application that retrieves and displays weather forecast
                information on a web page. At the end of this chapter, you will be able to
                use Maven to develop complex, multi-module projects.</para>

            <section id="multimodule-sect-downloading">
                <title>Downloading this Chapter's Example</title>

                <para>The multi-module project developed in this example consists of
                    modified versions of the projects developed in Chapters <xref
                                                                                 linkend="customizing" xrefstyle="select: labelnumber" /> and <xref
                                                                                                                                                   linkend="web" xrefstyle="select: labelnumber" />, and we are not using
                    the Maven Archetype plugin to generate this multi-module project. We
                    strongly recommend downloading a copy of the example code to use as a
                    supplemental reference while reading the content in this chapter. This
                    chapter’s example project may be downloaded with the book’s example code
                    at:</para>

                <screen>${examples.download.url}</screen>

                <para>Unzip this archive in any directory, and then go to the
                    <filename>ch-multi/</filename> directory. There you will see a directory
                    named <filename>simple-parent/</filename>, which contains the
                    multi-module Maven project developed in this chapter. In this directory,
                    you will see a <filename>pom.xml</filename> and the two submodule
                    directories, <filename>simple-weather/</filename> and
                    <filename>simple-webapp/</filename>.</para>
            </section>
        </section>

        <section id="multimodule-sect-simple-parent">
            <title>The Simple Parent Project</title>

            <para>A multi-module project is defined by a parent
                <acronym>POM</acronym><indexterm class="startofrange" id="parent1a">
                    <primary>simple parent project (example)</primary>

                    <secondary>multi-module</secondary>
                </indexterm><indexterm class="startofrange" id="parent1b">
                    <primary>multi-module project (example)</primary>

                    <secondary>simple parent project</secondary>
                </indexterm><indexterm class="startofrange" id="parent1c">
                    <primary>Web applications</primary>

                    <secondary>multi-module project example</secondary>

                    <tertiary>simple parent project</tertiary>
                </indexterm> referencing one or more submodules. In the
                <filename>simple-parent/</filename> directory, you will find the parent
                <acronym>POM</acronym> (also called the top-level <acronym>POM</acronym>)
                in <filename>simple-parent/pom.xml</filename>. See <xref
                                                                        linkend="ex-multimodule-parent-pom" />.</para>

            <example id="ex-multimodule-parent-pom">
                <title>simple-parent Project POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

                    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;packaging&gt;pom&lt;/packaging&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;name&gt;Multi Chapter Simple Parent Project&lt;/name&gt;
                    
                    &lt;modules&gt;
                    &lt;module&gt;simple-weather&lt;/module&gt;
                    &lt;module&gt;simple-webapp&lt;/module&gt;
                    &lt;/modules&gt;

                    &lt;build&gt;
                    &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/pluginManagement&gt; 
                    &lt;/build&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;

                </programlisting>
            </example>

            <para>Notice that the parent defines a set of Maven coordinates: the
                <varname>groupId</varname> is
                <varname>org.</varname><varname>sonatype.</varname><varname>mavenbook.multi</varname>,
                the <varname>artifactId</varname> is <varname>simple-parent</varname>, and
                the <varname>version</varname> is <varname>1.0</varname>. The parent
                project doesn’t create a <acronym>JAR</acronym> or a
                <acronym>WAR</acronym> like our previous projects; instead, it is simply a
                <acronym>POM</acronym> that refers to other Maven projects. The
                appropriate packaging for a project like <varname>simple-parent</varname>
                that simply provides a Project Object Model is <varname>pom</varname>. The
                next section in the <filename>pom.xml</filename> lists the project’s
                submodules. These modules are defined in the <sgmltag>modules</sgmltag>
                element, and each<indexterm>
                    <primary sortas="modules element (pom.xml)">&lt;modules&gt; element
                        (pom.xml)</primary>
                </indexterm><indexterm>
                    <primary sortas="module element (pom.xml)">&lt;module&gt; element
                        (pom.xml)</primary>
                </indexterm><indexterm>
                    <primary>submodules, defining in pom.xml</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>defining submodules</secondary>
                </indexterm> <sgmltag>module</sgmltag> element corresponds to a
                subdirectory of the <filename>simple-parent/</filename> directory. Maven
                knows to look in these directories for <filename>pom.xml</filename> files,
                and it will add submodules to the list of Maven projects included in a
                build.</para>

            <para>Lastly, we define some settings which will be inherited by all
                submodules. The <varname>simple-parent</varname> build configuration
                configures the target for all Java compilation to be the Java 5
                <acronym>JVM</acronym>. Since the compiler plugin is bound to the
                lifecycle by default, we can use the <sgmltag>pluginManagement</sgmltag>
                section do to this. We will discuss <sgmltag>pluginManagement</sgmltag> in
                more detail in later chapters, but the separation between providing
                configuration to default plugins and actually binding plugins is much
                easier to see when they are separated this way. The dependencies element
                adds JUnit 3.8.1 as a global dependency. Both the build configuration and
                the dependencies are inherited by all submodules. Using POM inheritance
                allows you to add common dependencies for universal dependencies like
                JUnit or Log4J.</para>
        </section>

        <section id="multimodule-sect-simple-weather">
            <title>The Simple Weather Module</title>

            <para>The first submodule we’re going to look at is the
                <varname>simple-weather</varname> submodule. This submodule contains
                all<indexterm class="startofrange" id="multimod2a">
                    <primary>multi-module project (example)</primary>

                    <secondary>simple weather submodule</secondary>
                </indexterm><indexterm class="startofrange" id="multimod2b">
                    <primary>Web applications</primary>

                    <secondary>multi-module project example</secondary>

                    <tertiary>simple weather submodule</tertiary>
                </indexterm> of the classes that take care of interacting with and
                parsing the Yahoo! Weather feeds.<indexterm>
                    <primary>pom.xml</primary>
            </indexterm></para>

            <example>
                <title>simple-weather Module POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Multi Chapter Simple Weather API&lt;/name&gt;

                    &lt;build&gt;
                    &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/pluginManagement&gt; 
                    &lt;/build&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;log4j&lt;/groupId&gt;
                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
                    &lt;version&gt;1.2.14&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;dom4j&lt;/groupId&gt;
                    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
                    &lt;version&gt;1.6.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;jaxen&lt;/groupId&gt;
                    &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
                    &lt;version&gt;1.1.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;version&gt;1.5&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
                    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
                    &lt;version&gt;1.3.2&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>In <varname>simple-weather</varname>’s <filename>pom.xml</filename>
                file, we see this module referencing a parent POM using a set of
                Maven<indexterm>
                    <primary>POM (Project Object Model)</primary>

                    <secondary>parent (top-level)</secondary>
                </indexterm><indexterm>
                    <primary>top-level POM</primary>
                </indexterm><indexterm>
                    <primary>parent POM</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>parent (top-level)</secondary>
                </indexterm> coordinates. The parent POM for
                <varname>simple-weather</varname> is identified by a
                <varname>groupId</varname> of
                <varname>org.sonatype.mavenbook.multi</varname>, an
                <varname>artifactId</varname> of <varname>simple-parent</varname>, and a
                <varname>version</varname> of <varname>1.0</varname>.</para>

            <para>The <classname>WeatherService</classname> class shown in <xref
                                                                                linkend="multimodule-weather-service" /> is defined in
                <filename>src/main/java/org/sonatype/mavenbook/weather</filename>, and it
                simply calls out to the three objects defined in <xref
                                                                      linkend="customizing" />. In this chapter’s example, we’re creating a
                separate project that contains service objects that are referenced in the
                web application project. This is a common model in enterprise Java
                development; often a complex application consists of more than just a
                single, simple web application. You might have an enterprise application
                that consists of multiple web applications and some command-line
                applications. Often, you’ll want to refactor common logic to a service
                class that can be reused across a number of projects. This is the
                justification for creating a <classname>WeatherService</classname> class;
                by doing so, you can see how the <varname>simple-webapp</varname> project
                references a service object defined in
                <varname>simple-weather</varname>.</para>

            <example id="multimodule-weather-service">
                <title>The WeatherService Class</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStream;

                    public class WeatherService {

                    public WeatherService() {}

                    public String retrieveForecast( String zip ) throws Exception {
                    // Retrieve Data
                    InputStream dataIn = new YahooRetriever().retrieve( zip );

                    // Parse Data
                    Weather weather = new YahooParser().parse( dataIn );

                    // Format (Print) Data
                    return new WeatherFormatter().format( weather );
                    }
                    }
                </programlisting>
            </example>

            <para>The <methodname>retrieveForecast()</methodname> method takes a
                <classname>String</classname> containing a zip code. This zip code
                parameter is then passed to the <classname>YahooRetriever</classname>’s
                <methodname>retrieve()</methodname> method, which gets the
                <acronym>XML</acronym> from Yahoo! Weather. The <acronym>XML</acronym>
                returned from <classname>YahooRetriever</classname> is then passed to the
                <methodname>parse()</methodname> method on
                <classname>YahooParser</classname> which returns a
                <classname>Weather</classname> object. This <classname>Weather</classname>
                object is then formatted into a presentable <classname>String</classname>
                <indexterm class="endofrange" startref="multimod2a"></indexterm><indexterm
                                                                                     class="endofrange" startref="multimod2b"></indexterm>by the
                <classname>WeatherFormatter</classname>.</para>
        </section>

        <section id="multimodule-sect-simple-web">
            <title>The Simple Web Application Module</title>

            <para>The <varname>simple-webapp</varname> module is the second
                submodule<indexterm class="startofrange" id="multimod3a">
                    <primary>multi-module project (example)</primary>

                    <secondary>simple web application submodule</secondary>
                </indexterm><indexterm class="startofrange" id="multimod3b">
                    <primary>Web applications</primary>

                    <secondary>multi-module project example</secondary>

                    <tertiary>simple web application submodule</tertiary>
                </indexterm> referenced in the <varname>simple-parent</varname> project.
                This web application project depends upon the
                <varname>simple-weather</varname> module, and it contains some simple
                servlets that present the results of the Yahoo! weather service
                query.</para>

            <example>
                <title>simple-webapp Module POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;

                    &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;/project&gt;</programlisting>
            </example>

            <para>This <varname>simple-webapp</varname> module defines a very simple
                servlet that reads a zip code from an HTTP request, calls the
                <classname>WeatherService</classname> shown in <xref
                                                                    linkend="multimodule-weather-service" />, and prints the results to the
                response’s <classname>Writer</classname>.</para>

            <example>
                <title>simple-webapp WeatherServlet</title>

                <programlisting language="java">package org.sonatype.mavenbook.web;

                    import org.sonatype.mavenbook.weather.WeatherService;
                    import java.io.*;
                    import javax.servlet.*;
                    import javax.servlet.http.*;

                    public class WeatherServlet extends HttpServlet {
                    public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
                    throws ServletException, IOException {
                    String zip = request.getParameter("zip" );
                    WeatherService weatherService = new WeatherService();
                    PrintWriter out = response.getWriter();
                    try {
                    out.println( weatherService.retrieveForecast( zip ) );
                    } catch( Exception e ) {
                    out.println( "Error Retrieving Forecast: " + e.getMessage() );
                    }
                    out.flush();
                    out.close();
                    }
                    }</programlisting>
            </example>

            <para>In <classname>WeatherServlet</classname>, we instantiate an instance
                of the <classname>WeatherService</classname> class defined in
                <varname>simple-weather</varname>. The zip code supplied in the request
                parameter is passed to the <methodname>retrieveForecast()</methodname>
                method and the resulting test is printed to the response's
                <classname>Writer</classname>.</para>

            <para>Finally, to tie all of this together is the<indexterm>
                    <primary>web.xml file</primary>
                </indexterm> <filename>web.xml</filename> for
                <varname>simple-webapp</varname> in
                <filename>src/main/webapp/WEB-INF</filename>. The
                <sgmltag>servlet</sgmltag> and <sgmltag>servlet-mapping</sgmltag> elements
                in the <filename>web.xml</filename> shown in <xref
                                                                  linkend="ex-simple-webapp-web.xml" /> map the request path
                <filename>/weather</filename> to the<indexterm class="endofrange"
                                                               startref="multimod3a"></indexterm><indexterm class="endofrange"
                                                                                                            startref="multimod3b"></indexterm>
                <classname>WeatherServlet</classname>.</para>

            <example id="ex-simple-webapp-web.xml">
                <title>simple-webapp web.xml</title>

                <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
                    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                    "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

                    &lt;web-app&gt;
                    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
                    &lt;servlet&gt;
                    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
                    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
                    &lt;/servlet&gt;
                    &lt;servlet&gt;
                    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
                    &lt;servlet-class&gt;org.sonatype.mavenbook.web.WeatherServlet&lt;/servlet-class&gt;
                    &lt;/servlet&gt;
                    &lt;servlet-mapping&gt;
                    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt;
                    &lt;servlet-mapping&gt;
                    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;/weather&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt;
                    &lt;/web-app&gt;
                </programlisting>
            </example>
        </section>

        <section id="multimodule-sect-building-multimodule">
            <title>Building the Multimodule Project</title>

            <para>With the <varname>simple-weather</varname> project containing
                all<indexterm class="startofrange" id="multimod4a">
                    <primary>multi-module project (example)</primary>

                    <secondary>building</secondary>
                </indexterm><indexterm class="startofrange" id="multimod4b">
                    <primary>Web applications</primary>

                    <secondary>multi-module project example</secondary>

                    <tertiary>building</tertiary>
                </indexterm> the general code for interacting with the Yahoo! Weather
                service and the <varname>simple-webapp</varname> project containing a
                simple servlet, it is time to compile and package the application into
                a<indexterm>
                    <primary>WAR files</primary>

                    <secondary>compiling multi-module projects into</secondary>
                </indexterm><indexterm>
                    <primary>compiling projects</primary>

                    <seealso>WAR files</seealso>
                </indexterm> <acronym>WAR</acronym> file. To do this, you will want to
                compile and install both projects in the appropriate order; since
                <varname>simple-webapp</varname> depends on
                <varname>simple-weather</varname>, the <varname>simple-weather</varname>
                <acronym>JAR</acronym> needs to be created before the
                <varname>simple-webapp</varname> project can compile. To do this, you will
                run <command>mvn clean install</command> command from the
                <varname>simple-parent</varname> project:</para>

            <screen>~/examples/ch-multi/simple-parent$ <command>mvn clean install</command>
                [INFO] Scanning for projects...
                [INFO] Reactor build order: 
                [INFO]   Simple Parent Project
                [INFO]   simple-weather
                [INFO]   simple-webapp Maven Webapp
                [INFO] ----------------------------------------------------------------------
                [INFO] Building simple-weather
                [INFO]    task-segment: [clean, install]
                [INFO] ----------------------------------------------------------------------
                [...]
                [INFO] [install:install]
                [INFO] Installing simple-weather-1.0.jar to simple-weather-1.0.jar
                [INFO] ----------------------------------------------------------------------
                [INFO] Building simple-webapp Maven Webapp
                [INFO]    task-segment: [clean, install]
                [INFO] ----------------------------------------------------------------------
                [...]
                [INFO] [install:install]
                [INFO] Installing simple-webapp.war to simple-webapp-1.0.war
                [INFO] 
                [INFO] ----------------------------------------------------------------------
                [INFO] Reactor Summary:
                [INFO] ----------------------------------------------------------------------
                [INFO] Simple Parent Project ............................... SUCCESS [3.041s]
                [INFO] simple-weather ...................................... SUCCESS [4.802s]
                [INFO] simple-webapp Maven Webapp .......................... SUCCESS [3.065s]
                [INFO] ----------------------------------------------------------------------
            </screen>

            <para>When Maven is executed against a project with submodules, Maven
                first loads the parent <acronym>POM</acronym> and locates all of the
                submodule <acronym>POM</acronym>s. Maven then puts all of these project
                <acronym>POM</acronym>s into something called the Maven Reactor which
                analyzes the dependencies between modules. The Reactor takes care of
                ordering components to ensure that interdependent modules are compiled and
                installed in the proper order.</para>

            <note>
                <para>The Reactor preserves the order of modules as defined in the
                    <acronym>POM</acronym> unless changes need to be made. A helpful mental
                    model for this is to picture that modules with dependencies on sibling
                    projects are "pushed down" the list until the dependency ordering is
                    satisfied. On rare occasions, it may be handy to rearrange the module
                    order of your build -- for example if you want a frequently unstable
                    module towards the beginning of the build.</para>
            </note>

            <para>Once the Reactor figures out the order in which projects must be
                built, Maven then executes the specified goals for every module in a
                multi-module build. In this example, you can see that Maven builds
                <varname>simple-weather</varname> before <varname>simple-webapp</varname>
                effectively executing <command>mvn clean install</command> for each
                submodule.</para>

            <note>
                <para>When you run Maven from the command line you'll frequently want to
                    specify the <varname>clean</varname> lifecycle phase before any other
                    lifecycle stages. When you specify <varname>clean</varname>, you make
                    sure that Maven is going to remove old output before it compiles and
                    packages an application. Running <varname>clean</varname> isn't
                    necessary, but it is a useful precaution to make sure that you are
                    performing a "clean build".</para>
            </note>
        </section>

        <section id="multimodule-sect-running-web">
            <title>Running the Web Application</title>

            <para>Once the multi-module project has been installed with <command>mvn
                    <indexterm class="startofrange" id="multimod5a">
                        <primary>multi-module project (example)</primary>

                        <secondary>running</secondary>
                    </indexterm><indexterm class="startofrange" id="multimod5b">
                        <primary>Web applications</primary>

                        <secondary>multi-module project example</secondary>

                        <tertiary>running</tertiary>
                    </indexterm>clean install</command> from the parent project,
                <varname>simple-project</varname>, you can then change directories into
                the <varname>simple-webapp</varname> project and run the Run goal of the
                Jetty plugin:<indexterm>
                    <primary>Jetty plugin</primary>

                    <secondary>run goal</secondary>
            </indexterm></para>

            <screen>~/examples/ch-multi/simple-parent/simple-webapp $ <command>mvn jetty:run</command>
                [INFO] ----------------------------------------------------------------------
                [INFO] Building simple-webapp Maven Webapp
                [INFO]    task-segment: [jetty:run]
                [INFO] ----------------------------------------------------------------------
                [...]
                [INFO] [jetty:run]
                [INFO] Configuring Jetty for project: simple-webapp Maven Webapp
                [...]
                [INFO] Webapp directory = ~/examples/ch-multi/simple-parent/\
                simple-webapp/src/main/webapp
                [INFO] Starting jetty 6.1.6rc1 ...
                2007-11-18 1:58:26.980::INFO:  jetty-6.1.6rc1
                2007-11-18 1:58:26.125::INFO:  No Transaction manager found
                2007-11-18 1:58:27.633::INFO:  Started SelectChannelConnector@0.0.0.0:8080
                [INFO] Started Jetty Server
            </screen>

            <para>Once Jetty has started, load <ulink
                                                    url="http://localhost:8080/simple-webapp/weather?zip=01201">http://localhost:8080/simple-webapp/weather?zip=01201</ulink>
                in a browser and you should see the formatted weather output.</para>
        </section>
    </chapter>

    <chapter id="multimodule-web-spring">
        <title>Multi-module Enterprise Project</title>

        <section id="multimodule-web-spring-sect-intro">
            <title>Introduction</title>

            <para>In this chapter, we create a multi-module project that evolves
                the<indexterm class="startofrange" id="enterprise1a">
                    <primary>multi-module project (example)</primary>

                    <secondary>multi-module enterprise project</secondary>
                </indexterm><indexterm class="startofrange" id="enterprise1b">
                    <primary>Web applications</primary>

                    <secondary>multi-module enterprise project example</secondary>
                </indexterm><indexterm class="startofrange" id="enterprise1c">
                    <primary>enterprise project, multi-module (example)</primary>
                </indexterm> examples from <xref linkend="multimodule" /> and <xref
                                                                                   linkend="web" /> into a project that uses the Spring Framework and
                Hibernate to create both a simple web application and a command-line
                utility to read data from the Yahoo! Weather feed. The
                <varname>simple-weather</varname> code developed in <xref
                                                                         linkend="customizing" /> will be combined with the
                <varname>simple-webapp</varname> project defined in <xref
                                                                         linkend="web" />. In the process of creating this multi-module project,
                we’ll explore Maven and discuss the different ways it can be used to
                create modular projects that encourage reuse.</para>

            <section id="multimodule-web-spring-sect-downloading-example">
                <title>Downloading this Chapter's Example</title>

                <para>The multi-module project developed in this example consists of
                    modified versions of the projects developed in <xref
                                                                        linkend="customizing" /> and <xref linkend="web" />, and we are not
                    using the Maven Archetype plug-in to generate this multi-module project.
                    We strongly recommend downloading a copy of the example code to use as a
                    supplemental reference while reading the content in this chapter.
                    Without the examples, you won't be able to recreate this chapter's
                    example code. This chapter’s example project may be downloaded with the
                    book’s example code at:</para>

                <screen>${examples.download.url}</screen>

                <para>Unzip this archive in any directory, and then go to the
                    <filename>ch-multi-spring/</filename> directory. There you will see a
                    directory named <filename>simple-parent/</filename> that contains the
                    multi-module Maven project developed in this chapter. In the
                    <filename>simple-parent/</filename> project directory you will see a
                    <filename>pom.xml</filename> and the five submodule directories
                    <filename>simple-model/</filename>,
                    <filename>simple-persist/</filename>,
                    <filename>simple-command/</filename>,
                    <filename>simple-weather/</filename> and
                    <filename>simple-webapp/</filename>.</para>
            </section>

            <section id="multimodule-web-spring-sect-project-description">
                <title>Multi-module Enterprise Project</title>

                <para>Presenting the complexity of a massive Enterprise-level project
                    far exceeds the scope of this book. Such projects are characterized by
                    multiple databases, integration with external systems, and subprojects
                    which may be divided by departments. These projects usually span
                    thousands of lines of code, and involve the effort of tens or hundreds
                    of software developers. While such a complete example is outside the
                    scope of this book, we can provide you with a sample project that
                    suggests the complexity of a larger Enterprise application. In the
                    conclusion we suggest some possibilities for modularity beyond that
                    presented in this chapter.</para>

                <para>In this chapter, we're going to look at a multi-module Maven
                    project that will produce two applications: a command-line query tool
                    for the Yahoo! Weather feed and a web application which queries the
                    Yahoo! Weather feed. Both of these applications will store the results
                    of queries in an embedded database. Each will allow the user to retrieve
                    historical weather data from this embedded database. Both applications
                    will reuse application logic and share a persistence library. This
                    chapter's example builds upon the Yahoo! Weather parsing code introduced
                    in <xref linkend="customizing" />. This project is divided into five
                    submodules shown in <xref
                                             linkend="fig-multimodule-web-spring-projects" />.<indexterm>
                        <primary>multi-module project</primary>

                        <secondary>organization</secondary>
                </indexterm></para>

                <figure id="fig-multimodule-web-spring-projects">
                    <title>Multi-module Enterprise Application Module
                        Relationships</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/multimodule-web-spring_projects.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/multimodule-web-spring_projects.pdf"
                                       format="PDF" scalefit="0" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

                <para>In <xref linkend="fig-multimodule-web-spring-projects" />, you can
                    see that there are five submodules of simple-parent, they are:</para>

                <variablelist>
                    <varlistentry>
                        <term>simple-model</term>

                        <listitem>
                            <para>This module defines a simple object model which models the
                                data returned from the Yahoo! Weather feed. This object model
                                contains the <classname>Weather</classname>,
                                <classname>Condition</classname>,
                                <classname>Atmosphere</classname>,
                                <classname>Location</classname>, and <classname>Wind</classname>
                                objects. When our application parses the Yahoo! Weather feed, the
                                parsers defined in <varname>simple-weather</varname> will parse
                                the <acronym>XML</acronym> and create
                                <classname>Weather</classname> objects which are then used by the
                                application. This project contains model objects annotated with
                                Hibernate 3 Annotations. These annotations are used by the logic
                                in <varname>simple-persist</varname> to map each model object to a
                                corresponding table in a relational database.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>simple-weather</term>

                        <listitem>
                            <para>This module contains all of the logic required to retrieve
                                data from the Yahoo! Weather feed and parse the resulting
                                <acronym>XML</acronym>. The <acronym>XML</acronym> returned from
                                this feed is converted into the model objects defined in
                                <varname>simple-model</varname>. <varname>simple-weather</varname>
                                has a dependency on <varname>simple-model</varname>.
                                <varname>simple-weather</varname> defines a
                                <classname>WeatherService</classname> object which is referenced
                                by both the <varname>simple-command</varname> and
                                <varname>simple-webapp</varname> projects.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>simple-persist</term>

                        <listitem>
                            <para>This module contains some Data Access Objects
                                (<acronym>DAO</acronym>) which are configured to store
                                <classname>Weather</classname> objects in an embedded database.
                                Both of the applications defined in this multi-module project will
                                use the <acronym>DAO</acronym>s defined in
                                <varname>simple-persist</varname> to store data in an embedded
                                database. The <acronym>DAO</acronym>s defined in this project
                                understand and return the model objects defined in
                                <varname>simple-model</varname>. <varname>simple-persist</varname>
                                has a direct dependency on <varname>simple-model</varname> and it
                                depends upon the Hibernate Annotations present on the model
                                objects.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>simple-webapp</term>

                        <listitem>
                            <para>The web application project contains two Spring
                                <acronym>MVC</acronym> Controller implementations which use the
                                <classname>WeatherService</classname> defined in
                                <varname>simple-weather</varname> and the <acronym>DAO</acronym>s
                                defined in <varname>simple-persist</varname>.
                                <varname>simple-webapp</varname> has a direct dependency on
                                <varname>simple-weather</varname> and
                                <varname>simple-persist</varname>; it has a transitive dependency
                                on <varname>simple-model</varname>.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>simple-command</term>

                        <listitem>
                            <para>This module contains a simple command-line tool which can be
                                used to query the Yahoo! Weather feed. This project contains a
                                class with a static <methodname>main()</methodname> function and
                                interacts with the <classname>WeatherService</classname> defined
                                in <varname>simple-weather</varname> and the
                                <acronym>DAO</acronym>s defined in
                                <varname>simple-persist</varname>.
                                <varname>simple-command</varname> has a direct dependency on
                                <varname>simple-weather</varname> and
                                <varname>simple-persist</varname>; is has a transitive dependency
                                on <varname>simple-model</varname>.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>

                <para>This chapter contains a contrived example simple enough to
                    introduce in a book, yet complex enough to justify a set of five
                    submodules. Our contrived example has a model project with five classes,
                    a persistence library with two service classes, and a weather parsing
                    library with five or six classes, but a real-world system might have a
                    model project with a hundred objects, several persistence libraries, and
                    service libraries spanning multiple departments. Although we’ve tried to
                    make sure that the code contained in this example is straightforward
                    enough to comprehend in a single sitting, we’ve also gone out of our way
                    to build a modular project. You might be tempted to look at the examples
                    in this chapter and walk away with the idea that Maven encourages too
                    much complexity given that our model project has only five classes.
                    Although using Maven does suggest a certain level of modularity, do
                    realize that we’ve gone out of our way to complicate our simple example
                    projects for the purpose of demonstrating Maven’s multi-module
                    features.</para>
            </section>

            <section id="multimodule-web-spring-sect-example-tech">
                <title>Technology Used in this Example</title>

                <para>This chapter's example involves some technology which, while
                    popular, is not directly related to Maven. These technologies are the
                    Spring Framework and Hibernate. The Spring Framework is an Inversion of
                    Control (<acronym>IoC</acronym>) container and a set of frameworks that
                    aim to simplify interaction with various <acronym>J2EE</acronym>
                    libraries. Using the Spring Framework as a foundational framework for
                    application development gives you access to a number of helpful
                    abstractions that can take much of the meddlesome busywork out of
                    dealing with persistence frameworks like Hibernate or iBatis or
                    enterprise <acronym>API</acronym>s like <acronym>JDBC</acronym>,
                    <acronym>JNDI</acronym>, and <acronym>JMS</acronym>. The Spring
                    Framework has grown in popularity over the past few years as a
                    replacement for the heavy weight enterprise standards coming out of Sun
                    Microsystems. Hibernate is a widely used Object-Relational Mapping
                    framework which allows you to interact with a relational database as if
                    it were a collection of Java objects. This example focuses on building a
                    simple web application and a command-line application that uses the
                    Spring Framework to expose a set of reusable components to applications
                    and which also uses Hibernate to persist weather data in an embedded
                    database.</para>

                <para>We’ve decided to include references to these frameworks to
                    demonstrate how one would construct projects using these technologies
                    when using Maven. Although we make brief efforts to introduce these
                    technologies throughout this chapter, we will not go out of our way to
                    fully explain these technologies. For more information about the Spring
                    Framework, please see the project’s web site at <ulink
                                                                         url="http://www.springframework.org/">http://www.springsource.org/documentation</ulink>.
                    For more information about Hibernate and Hibernate <phrase
                                                                            role="keep-together">Annotations</phrase>, please see the project’s web
                    site at <ulink
                                 url="http://www.hibernate.org">http://www.hibernate.org</ulink>. This
                    chapter uses Hyper Structured Query Language Database
                    (<acronym>HSQLDB</acronym>) as an embedded database; for more
                    information about this database, see the project’s web site at <ulink
                                                                                        url="http://hsqldb.org/">http://hsqldb.org</ulink>.</para>
            </section>
        </section>

        <section id="multimodule-web-spring-sect-simple-parent">
            <title>The Simple Parent Project</title>

            <para>This <varname>simple-parent</varname> project has a<indexterm
                                                                          class="startofrange" id="enterprise2a">
                    <primary>simple parent project (example)</primary>

                    <secondary>multi-module enterprise</secondary>
                </indexterm><indexterm class="startofrange" id="enterprise2b">
                    <primary>multi-module project (example)</primary>

                    <secondary>multi-module enterprise project</secondary>

                    <tertiary>simple parent project</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise2c">
                    <primary>Web applications</primary>

                    <secondary>multi-module enterprise project example</secondary>

                    <tertiary>simple parent project</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise2d">
                    <primary>enterprise project, multi-module (example)</primary>

                    <secondary>simple parent project</secondary>
                </indexterm> <filename>pom.xml</filename> that references five
                submodules: <varname>simple-command</varname>,
                <varname>simple-model</varname>, <varname>simple-weather</varname>,
                <varname>simple-persist</varname>, and <varname>simple-webapp</varname>.
                The top-level <filename>pom.xml</filename> is shown in <xref
                                                                            linkend="ex-multimodule-web-spring-parent" />.</para>

            <example id="ex-multimodule-web-spring-parent">
                <title>simple-parent Project POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;packaging&gt;pom&lt;/packaging&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;name&gt;Multi-Spring Chapter Simple Parent Project&lt;/name&gt;
                    
                    &lt;modules&gt;
                    &lt;module&gt;simple-command&lt;/module&gt;
                    &lt;module&gt;simple-model&lt;/module&gt;
                    &lt;module&gt;simple-weather&lt;/module&gt;
                    &lt;module&gt;simple-persist&lt;/module&gt;
                    &lt;module&gt;simple-webapp&lt;/module&gt;
                    &lt;/modules&gt;

                    &lt;build&gt;
                    &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/pluginManagement&gt; 
                    &lt;/build&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;

                </programlisting>
            </example>

            <note>
                <para>If you are already familiar with Maven POMs, you might notice that
                    this top-level POM does not define a
                    <sgmltag>dependencyManagement</sgmltag> element. The
                    <sgmltag>dependencyManagement</sgmltag> element allows you to define
                    dependency versions in a single, top-level POM, and it is introduced in
                    <xref linkend="optimizing" />.</para>
            </note>

            <para>Note the similarities of this parent <acronym>POM</acronym> to the
                parent <acronym>POM</acronym> defined in <xref
                                                              linkend="ex-multimodule-parent-pom" />. The only real difference between
                these two <acronym>POM</acronym>s is the list of submodules. Where that
                example only listed two submodules, this parent <acronym>POM</acronym>
                lists five submodules. The next few sections explore each of these five
                submodules in some detail. Because our example uses Java annotations,
                we've configured the compiler to target the Java 5
                <acronym>JVM</acronym>.</para>
        </section>

        <section id="multimodule-web-spring-sect-simple-model-project">
            <title>The Simple Model Module</title>

            <para>The first thing most enterprise projects need is an object model. An
                object model captures the core set of domain objects in any system. A
                banking system might have an object model which consists of an
                <classname>Account</classname>, <classname>Customer</classname>, and
                <classname>Transaction</classname> object, or a system to capture and
                communicate sports scores might have a <classname>Team</classname> and a
                <classname>Game</classname> object. Whatever it is, there's a good chance
                that you've modeled the concepts in your system in an object model. It is
                a common practice in Maven projects to separate this project into a
                separate project which is widely referenced. In this system we are
                capturing each query to the Yahoo! Weather feed with a
                <classname>Weather</classname> object which references four other objects.
                Wind direction, chill, and speed are stored in a
                <classname>Wind</classname> object. Location data including the zip code,
                city, region, and country are stored in a <classname>Location</classname>
                class. Atmospheric conditions such as the humidity, maximum visibility,
                barometric pressure, and whether the pressure is rising or falling is
                stored in an <classname>Atmosphere</classname> class. A textual
                description of conditions, the temperature, and the date of the
                observation is stored in a <classname>Condition</classname> class.</para>

            <figure>
                <title>Simple Object Model for Weather Data</title>

                <mediaobject>
                    <imageobject role="web">
                        <imagedata fileref="figs/web/multimodule-web-spring_object-model.png"
                                   format="PNG" />
                    </imageobject>

                    <imageobject role="print">
                        <imagedata align="center"
                                   fileref="figs/print/multimodule-web-spring_object-model.pdf"
                                   format="PDF" scalefit="0" width="100%" />
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The <filename>pom.xml</filename> file for this simple model object
                contains one dependency that bears some explanation. Our object model
                is<indexterm>
                    <primary>Hibernate annotations</primary>
                </indexterm><indexterm>
                    <primary>annotations (Hibernate)</primary>
                </indexterm> annotated with Hibernate Annotations. We use these
                annotations to map the model objects in this model to tables in a
                relational database. The dependency is
                <varname>org.hibernate:hibernate-annotations:3.3.0.ga</varname>. Take a
                look at the <filename>pom.xml</filename> shown in <xref
                                                                       linkend="example_simple-model_pom.xml" />, and then look at the next few
                examples for some illustrations of these annotations.</para>

            <example id="example_simple-model_pom.xml">
                <title>simple-model pom.xml</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Simple Object Model&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                    &lt;version&gt;3.3.0.ga&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                    &lt;version&gt;3.3.0.ga&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

                <para>In
                    <filename>src/main/java/org/sonatype/mavenbook/weather/model</filename>,
                    we have <filename>Weather.java</filename>, which contains the annotated
                    <classname>Weather</classname> model object. The
                    <classname>Weather</classname> object is a simple Java bean. This means
                    that we have private member variables like <varname>id</varname>,
                    <varname>location</varname>, <varname>condition</varname>,
                    <varname>wind</varname>, <varname>atmosphere</varname>, and
                    <varname>date</varname> exposed with public getter and setter methods
                    that adhere to the following pattern: if a property is named
                    <literal>name</literal>, there will be a public no-arg getter method
                    named <methodname>getName()</methodname>, and there will be a
                    one-argument <phrase>setter</phrase> named <methodname
                                                                    role="keep-together">setName(String name)</methodname>. Although we show
                    the getter and setter method for the <varname>id</varname> property,
                    we’ve omitted most of the getters and setters for most of the other
                    properties to save a few trees. See <xref
                                                             linkend="example_weather_model_object" />.</para>
            </example>

            <example id="example_weather_model_object">
                <title>Annotated Weather Model Object</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather.model;

                    import javax.persistence.*;

                    import java.util.Date;

                    @Entity
                    @NamedQueries({
                    @NamedQuery(name="Weather.byLocation", 
                    query="from Weather w where w.location = :location")
                    })
                    public class Weather {

                    @Id
                    @GeneratedValue(strategy=GenerationType.IDENTITY)
                    private Integer id;

                    @ManyToOne(cascade=CascadeType.ALL)
                    private Location location;

                    @OneToOne(mappedBy="weather",cascade=CascadeType.ALL)
                    private Condition condition;

                    @OneToOne(mappedBy="weather",cascade=CascadeType.ALL)
                    private Wind wind;

                    @OneToOne(mappedBy="weather",cascade=CascadeType.ALL)
                    private Atmosphere atmosphere;

                    private Date date;
                    
                    public Weather() {}

                    public Integer getId() { return id; }
                    public void setId(Integer id) { this.id = id; }

                    // All getter and setter methods omitted...
                    }
                </programlisting>
            </example>

            <para>In the <classname>Weather</classname> class, we are using Hibernate
                annotations to provide guidance to the <varname>simple-persist</varname>
                project. These annotations are used by Hibernate to map an object to a
                table in a relational database. Although a full explanation of Hibernate
                annotations is beyond the scope of this chapter, here is a brief<indexterm>
                    <primary sortas="Entity annotation (Hibernate)">@Entity annotation
                        (Hibernate)</primary>
                </indexterm> explanation for the curious. The
                <classname>@Entity</classname> annotation marks this class as a persistent
                entity. We’ve omitted the<indexterm>
                    <primary sortas="Table annotation (Hibernate)">@Table annotation
                        (Hibernate)</primary>
                </indexterm> <classname>@Table</classname> annotation on this class, so
                Hibernate is going to use the name of the class as the name of the table
                to map <classname>Weather</classname> to. The<indexterm>
                    <primary sortas="NamedQueries annotation (Hibernate)">@NamedQueries
                        annotation (Hibernate)</primary>
                </indexterm> <classname>@NamedQueries</classname> annotation defines a
                query that is used by the <classname>WeatherDAO</classname> in
                <varname>simple-persist</varname>. The query language in the<indexterm>
                    <primary sortas="NamedQuery annotation (Hibernate)">@NamedQuery
                        annotation (Hibernate)</primary>
                </indexterm> <classname>@NamedQuery</classname> annotation is written in
                something<indexterm>
                    <primary>HQL (Hibernate Query Language)</primary>
                </indexterm> called Hibernate Query Language (<acronym>HQL</acronym>).
                Each member variable is annotated with annotations that define the type of
                column and any relationships implied by that column:</para>

            <variablelist>
                <varlistentry>
                    <term role="plain"><varname>Id</varname></term>

                    <listitem>
                        <para>The <varname>id</varname> property is annotated with
                            <classname>@Id</classname>. This marks the <varname>id</varname>
                            property as the property that contains the primary key in a database
                            table. The <classname>@GeneratedValue</classname> controls how new
                            primary key values are generated. In the case of
                            <varname>id</varname>, we’re using the <varname>IDENTITY</varname>
                            <classname>GenerationType</classname>, which will use the underlying
                            database’s identity generation facilities.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="plain"><varname>Location</varname></term>

                    <listitem>
                        <para>Each <classname>Weather</classname> object instance
                            corresponds to a <classname>Location</classname> object. A
                            <classname>Location</classname> object represents a zip code, and
                            the <classname>@ManyToOne</classname> makes sure that
                            <classname>Weather</classname> objects that point to the same
                            <classname>Location</classname> object reference the same instance.
                            The <varname>cascade</varname> attribute of the
                            <classname>@ManyToOne</classname> makes sure that we persist a
                            <classname>Location</classname> object every time we persist a
                            <classname>Weather</classname> object.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="plain"><varname>Condition</varname>,
                        <varname>Wind</varname>, <varname>Atmosphere</varname></term>

                    <listitem>
                        <para>Each of these objects is mapped as a
                            <classname>@OneToOne</classname> with the
                            <classname>CascadeType</classname> of <varname>ALL</varname>. This
                            means that every time we save a <classname>Weather</classname>
                            object, we’ll be inserting a row into the <varname>Weather</varname>
                            table, the <varname>Condition</varname> table, the
                            <varname>Wind</varname> table, and the <varname>Atmosphere</varname>
                            table.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="plain"><varname>Date</varname></term>

                    <listitem>
                        <para><varname>Date</varname> is not annotated. This means that
                            Hibernate is going to use all of the column defaults to define this
                            mapping. The column name is going to be <literal>date</literal>, and
                            the column type is going to be the appropriate time to match the
                            <classname>Date</classname> object.</para>

                        <note>
                            <para>If you have a property you wish to omit from a table
                                mapping, you would annotate that property with
                                <classname>@Transient</classname>.</para>
                        </note>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>Next, take a look at one of the secondary model objects,
                <classname>Condition</classname>, shown in <xref
                                                                linkend="example_condition_model_object" />. This class also resides in
                <filename>src/main/java/org/sonatype/mavenbook/weather/model</filename>.</para>

            <example id="example_condition_model_object">
                <title>simple-model's Condition Model Object.</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather.model;

                    import javax.persistence.*;

                    @Entity
                    public class Condition {

                    @Id
                    @GeneratedValue(strategy=GenerationType.IDENTITY)
                    private Integer id;

                    private String text;
                    private String code;
                    private String temp;
                    private String date;

                    @OneToOne(cascade=CascadeType.ALL)
                    @JoinColumn(name="weather_id", nullable=false)
                    private Weather weather;

                    public Condition() {}

                    public Integer getId() { return id; }
                    public void setId(Integer id) { this.id = id; }

                    // All getter and setter methods omitted...
                    }</programlisting>
            </example>

            <para>The <classname>Condition</classname> class resembles the
                <classname>Weather</classname> class. It is annotated as an
                <classname>@Entity</classname>, and it has similar annotations on the
                <varname>id</varname> property. The <varname>text</varname>,
                <varname>code</varname>, <varname>temp</varname>, and
                <varname>date</varname> properties are all left with the default column
                settings, and the <varname>weather</varname> property is annotated with a
                <classname>@OneToOne</classname> annotation and another annotation that
                references the associated <classname>Weather</classname> object with a
                foreign key column named <varname>weather_id</varname>.</para>
        </section>

        <section id="multimodule-web-spring-sect-simple-weather">
            <title>The Simple Weather Module</title>

            <para>The next module we’re going to examine could be considered
                something<indexterm class="startofrange" id="enterprise4a">
                    <primary>multi-module project (example)</primary>

                    <secondary>multi-module enterprise project</secondary>

                    <tertiary>Simple Weather module of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise4b">
                    <primary>Web applications</primary>

                    <secondary>multi-module enterprise project example</secondary>

                    <tertiary>Simple Weather module of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise4c">
                    <primary>enterprise project, multi-module (example)</primary>

                    <secondary>Simple Weather module of</secondary>
                </indexterm> of a “service.” The Simple Weather module is the module
                that contains all of the logic necessary to retrieve and parse the data
                from the Yahoo! Weather <acronym>RSS</acronym> feed. Although Simple
                Weather contains three Java classes and one JUnit test, it is going to
                present a single component, <classname>WeatherService</classname>, to both
                the Simple Web Application and the Simple Command-line Utility. Very often
                an enterprise project will contain several <acronym>API</acronym> modules
                that contain critical business logic or logic that interacts with external
                systems. A banking system might have a module that retrieves and parses
                data from a third-party data provider, and a system to display sports
                scores might interact with an <acronym>XML</acronym> feed that presents
                real-time scores for basketball or soccer. In <xref
                                                                   linkend="example_simple-weather_module_pom" />, this module encapsulates
                all of the network activity and <acronym>XML</acronym> parsing that is
                involved in the interaction with Yahoo! Weather. Other modules can depend
                on this module and simply call out to the <methodname
                                                               role="keep-together">retrieveForecast()</methodname> method on
                <classname>WeatherService</classname>, which takes a zip code as an
                argument and which returns a <classname>Weather</classname> object.</para>

            <example id="example_simple-weather_module_pom">
                <title>simple-weather Module POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Simple Weather API&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;log4j&lt;/groupId&gt;
                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
                    &lt;version&gt;1.2.14&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;dom4j&lt;/groupId&gt;
                    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
                    &lt;version&gt;1.6.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;jaxen&lt;/groupId&gt;
                    &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
                    &lt;version&gt;1.1.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
                    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
                    &lt;version&gt;1.3.2&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;

                </programlisting>
            </example>

            <para>The <varname>simple-weather</varname> <acronym>POM</acronym> extends
                the <varname>simple-parent</varname> <acronym>POM</acronym>, sets the
                packaging to <varname>jar</varname>, and then adds the following
                dependencies:</para>

            <variablelist>
                <varlistentry>
                    <term><literal>org.sonatype.mavenbook.multispring:simple-model:1.0</literal></term>

                    <listitem>
                        <para><varname>simple-weather</varname> parses the Yahoo! Weather
                            <acronym>RSS</acronym> feed into a <classname>Weather</classname>
                            object. It has a direct dependency on
                            <varname>simple-model</varname>.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>log4j:log4j:1.2.14</literal></term>

                    <listitem>
                        <para><varname>simple-weather</varname> uses the Log4J library to
                            print log messages.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>dom4j:dom4j:1.6.1 and
                            jaxen:jaxen:1.1.1</literal></term>

                    <listitem>
                        <para>Both of these dependencies are used to parse the
                            <acronym>XML</acronym> returned from Yahoo! Weather.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>org.apache.commons:commons-io:1.3.2
                            (scope=test)</literal></term>

                    <listitem>
                        <para>This <literal>test</literal>-scoped dependency is used by the
                            <classname>YahooParserTest</classname>.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>Next is the <classname>WeatherService</classname> class, shown in
                <xref linkend="example_weatherservice_class" />. This class is going to
                look very similar to the <classname>WeatherService</classname> class from
                <xref linkend="multimodule-weather-service" />. Although the
                <classname>WeatherService</classname> is the same, there are some subtle
                differences in this chapter’s example. This version’s
                <methodname>retrieveForecast()</methodname> method returns a
                <classname>Weather</classname> object, and the formatting is going to be
                left to the applications that call <classname>WeatherService</classname>.
                The other major change is that the <classname>YahooRetriever</classname>
                and <classname>YahooParser</classname> are both bean properties of the
                <classname>WeatherService</classname> bean.</para>

            <example id="example_weatherservice_class">
                <title>WeatherService Class</title>

                <programlisting>package org.sonatype.mavenbook.weather;

                    import java.io.InputStream;

                    import org.sonatype.mavenbook.weather.model.Weather;

                    public class WeatherService {

                    private YahooRetriever yahooRetriever;
                    private YahooParser yahooParser;

                    public WeatherService() {
                    }

                    public Weather retrieveForecast(String zip) throws Exception {
                    // Retrieve Data                                                                                     
                    InputStream dataIn = yahooRetriever.retrieve(zip);

                    // Parse DataS                                                                                       
                    Weather weather = yahooParser.parse(zip, dataIn);

                    return weather;
                    }

                    public YahooRetriever getYahooRetriever() {
                    return yahooRetriever;
                    }

                    public void setYahooRetriever(YahooRetriever yahooRetriever) {
                    this.yahooRetriever = yahooRetriever;
                    }

                    public YahooParser getYahooParser() {
                    return yahooParser;
                    }

                    public void setYahooParser(YahooParser yahooParser) {
                    this.yahooParser = yahooParser;
                    }

                    }
                </programlisting>
            </example>

            <para>Finally, in this project we have an <acronym>XML</acronym> file that
                is used by the Spring Framework to create something called an<indexterm>
                    <primary>ApplicationContext (Spring Framework)</primary>
                </indexterm> <classname>ApplicationContext</classname>. First, some
                explanation: both of our applications, the web application and the
                command-line utility, need to interact with the
                <classname>WeatherService</classname> class, and they both do so by
                retrieving an instance of this class from a Spring
                <classname>ApplicationContext</classname> using the name
                <varname>weatherService</varname>. Our web application uses a Spring
                <acronym>MVC</acronym> controller that is associated with an instance of
                <classname>WeatherService</classname>, and our command-line utility loads
                the <classname>WeatherService</classname> from an
                <classname>ApplicationContext</classname> in a static
                <methodname>main()</methodname> function. To encourage reuse, we’ve
                included an <filename>applicationContext-weather.xml</filename> file in
                <filename>src/main/resources</filename>, which is available on the
                classpath. Modules that depend on the <varname>simple-weather</varname>
                module can load this application context using the
                <classname>ClasspathXmlApplicationContext</classname> in the Spring
                Framework. They can then reference a named instance of the
                <classname>WeatherService</classname> named
                <varname>weatherService</varname>.</para>

            <example id="ex-spring-app-ctx-simple-weather">
                <title>Spring Application Context for the simple-weather Module</title>

                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

                    &lt;beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
                    default-lazy-init="true"&gt;

                    &lt;bean id="weatherService" 
                    class="org.sonatype.mavenbook.weather.WeatherService"&gt;
                    &lt;property name="yahooRetriever" ref="yahooRetriever"/&gt;
                    &lt;property name="yahooParser" ref="yahooParser"/&gt;
                    &lt;/bean&gt;    

                    &lt;bean id="yahooRetriever" 
                    class="org.sonatype.mavenbook.weather.YahooRetriever"/&gt;    

                    &lt;bean id="yahooParser" 
                    class="org.sonatype.mavenbook.weather.YahooParser"/&gt;
                    &lt;/beans&gt;</programlisting>
            </example>

            <para>This document defines three beans: <varname>yahooParser</varname>,
                <varname>yahooRetriever</varname>, and <varname>weatherService</varname>.
                The <varname>weatherService</varname> bean is an instance of
                <classname>WeatherService</classname>, and this <acronym>XML</acronym>
                document populates the <varname>yahooParser</varname> and
                <varname>yahooRetriever</varname> properties with references to the named
                instances of the corresponding classes. Think of this
                <filename>applicationContext-weather.xml</filename> file as defining the
                architecture of a subsystem in this multi-module project. Projects like
                <varname>simple-webapp</varname> and <varname>simple-command</varname> can
                reference this context and retrieve an instance of
                <classname>WeatherService</classname> which already has relationships to
                instances of <classname>YahooRetriever</classname> and
                <classname>YahooParser</classname>.</para>
        </section>

        <section id="multimodule-web-spring-sect-simple-persist">
            <title>The Simple Persist Module</title>

            <para>This module defines two very simple Data Access Objects (DAOs). A
                DAO<indexterm>
                    <primary>DAO (Data Access Objects)</primary>
                </indexterm><indexterm class="startofrange" id="enterprise5a">
                    <primary>multi-module project (example)</primary>

                    <secondary>multi-module enterprise project</secondary>

                    <tertiary>Simple Persist module of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise5b">
                    <primary>Web applications</primary>

                    <secondary>multimodule enterprise project example</secondary>

                    <tertiary>Simple Persist module of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise5c">
                    <primary>enterprise project, multimodule (example)</primary>

                    <secondary>Simple Persist module of</secondary>
                </indexterm> is an object that provides an interface for persistence
                operations. In an application that makes use of an Object-Relational
                Mapping (ORM) framework such as Hibernate, DAOs are usually defined around
                objects. In this project, we are defining two DAO objects: <varname
                                                                                role="keep-together">WeatherDAO</varname> and
                <varname>LocationDAO</varname>. The <varname>WeatherDAO</varname> class
                allows us to save a <varname>Weather</varname> object to a database and
                retrieve a <varname>Weather</varname> object by <literal>id</literal>, and
                to retrieve <varname>Weather</varname> objects that match a specific
                <varname>Location</varname>. The <varname>LocationDAO</varname> has a
                method that allows us to retrieve a <varname>Location</varname> object by
                zip code. First, let’s take a look at the
                <literal>simple-persist</literal> POM in <xref
                                                              linkend="ex-simple-persist-POM" />.</para>

            <example id="ex-simple-persist-POM">
                <title>simple-persist POM</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Simple Persistence API&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                    &lt;version&gt;3.2.5.ga&lt;/version&gt;
                    &lt;exclusions&gt;
                    &lt;exclusion&gt;
                    &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
                    &lt;artifactId&gt;jta&lt;/artifactId&gt;
                    &lt;/exclusion&gt;
                    &lt;/exclusions&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                    &lt;version&gt;3.3.0.ga&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                    &lt;version&gt;3.3.0.ga&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;version&gt;2.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>This <acronym>POM</acronym> file references
                <varname>simple-parent</varname> as a parent <acronym>POM</acronym>, and
                it defines a few dependencies. The dependencies listed in
                <varname>simple-persist</varname>'s <acronym>POM</acronym> are:</para>

            <variablelist>
                <varlistentry>
                    <term><literal>org.sonatype.mavenbook.multispring:simple-model:1.0</literal></term>

                    <listitem>
                        <para>Just like the <varname>simple-weather</varname> module, this
                            persistence module references the core model objects defined in
                            <varname>simple-model</varname>.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>org.hibernate:hibernate:3.2.5.ga</literal></term>

                    <listitem>
                        <para>We define a dependency on Hibernate version 3.2.5.ga, but
                            notice that we’re excluding a dependency of Hibernate. We’re doing
                            this because the
                            <varname>javax.</varname><varname>transaction:</varname><varname>jta</varname>
                            <indexterm>
                                <primary>dependencies</primary>

                                <secondary>javax.transaction:jta (unavailable)</secondary>
                            </indexterm><indexterm>
                                <primary>javax.transaction:jta dependency
                                    (unavailable)</primary>
                            </indexterm>dependency is not available in the public Maven
                            repository. This dependency happens to be one of those Sun
                            dependencies that has not yet made it into the free central Maven
                            repository. To avoid an annoying message telling us to go download
                            these nonfree dependencies, we simply exclude this dependency from
                            Hibernate.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>javax.servlet:servlet-api:2.4</literal></term>

                    <listitem>
                        <para>Since this project contains a Servlet, we need to include the
                            Servlet API version 2.4.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>org.springframework:spring:2.0.7</literal></term>

                    <listitem>
                        <para>This includes the entire Spring Framework as a
                            dependency<indexterm>
                                <primary>Spring Framework</primary>
                            </indexterm>.</para>

                        <note>
                            <para>It is generally a good practice to depend on only the
                                components of Spring you happen to be using. The Spring Framework
                                project has been nice enough to create focused artifacts such as
                                <varname>spring-hibernate3</varname>.</para>
                        </note>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>Why depend on Spring? When it comes to Hibernate integration, Spring
                allows us to leverage helper classes such as
                <classname>HibernateDaoSupport</classname>. For an example of what is
                possible with the help of <classname>HibernateDaoSupport</classname>, take
                a look at the code for the <classname>WeatherDAO</classname> in <xref
                                                                                     linkend="ex-persist-weatherdao-class" />.</para>

            <example id="ex-persist-weatherdao-class">
                <title>simple-persist's WeatherDAO Class</title>

                <programlisting>package org.sonatype.mavenbook.weather.persist;

                    import java.util.ArrayList;
                    import java.util.List;

                    import org.hibernate.Query;
                    import org.hibernate.Session;
                    import org.springframework.orm.hibernate3.HibernateCallback;
                    import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

                    import org.sonatype.mavenbook.weather.model.Location;
                    import org.sonatype.mavenbook.weather.model.Weather;

                    public class WeatherDAO extends HibernateDaoSupport <co
                                                                             id="coDef-hibDao-extends" linkends="coRef-hibDao-extends" /> {

                    public WeatherDAO() {}

                    public void save(Weather weather) {<co id="coDef-hibDao-2"
                                                           linkends="coRef-hibDao-2" />
                    getHibernateTemplate().save( weather );
                    }

                    public Weather load(Integer id) {<co id="coDef-hibDao-3"
                                                         linkends="coRef-hibDao-3" />
                    return (Weather) getHibernateTemplate().load( Weather.class, id);
                    }

                    @SuppressWarnings("unchecked")
                    public List&lt;Weather&gt; recentForLocation( final Location location ) {
                    return (List&lt;Weather&gt;) getHibernateTemplate().execute(
                    new HibernateCallback() {<co id="coDef-hibDao-4"
                                                 linkends="coRef-hibDao-4" />
                    public Object doInHibernate(Session session) {
                    Query query = getSession().getNamedQuery("Weather.byLocation");
                    query.setParameter("location", location);
                    return new ArrayList&lt;Weather&gt;( query.list() );
                    }
                    });
                    }
                    }</programlisting>
            </example>

            <para>That's it. No really, you are done writing a class that can insert
                new rows, select by primary key, and find all rows in Weather that join to
                an id in the Location table. Clearly, we can't stop this book and insert
                the five hundred pages it would take to get you up to speed on the
                intricacies of Hibernate, but we can do some very quick
                explanation:</para>

            <calloutlist>
                <callout arearefs="coDef-hibDao-extends" id="coRef-hibDao-extends">
                    <para>This class extends <classname>HibernateDaoSupport</classname>.
                        What this means is that the class is going to be associated with a
                        Hibernate <classname>SessionFactory</classname> which it is going to
                        use to create Hibernate <classname>Session</classname> objects. In
                        Hibernate, every operation goes through a
                        <classname>Session</classname> object, a
                        <classname>Session</classname> mediates access to the underlying
                        database and takes care of managing the connection to the JDBC
                        <classname>DataSource</classname>. Extending
                        <classname>HibernateDaoSupport</classname> also means that we can
                        access the <classname>HibernateTemplate</classname> using
                        <methodname>getHibernateTemplate()</methodname>. For an example of
                        what can be done with the
                        <classname>HibernateTemplate</classname>...</para>
                </callout>

                <callout arearefs="coDef-hibDao-2" id="coRef-hibDao-2">
                    <para>The <methodname>save()</methodname> method takes an instance of
                        <classname>Weather</classname> and calls the
                        <methodname>save()</methodname> method on a
                        <classname>HibernateTemplate</classname>. The
                        <classname>HibernateTemplate</classname> simplifies calls to common
                        Hibernate operations and converts any database specific exceptions to
                        runtime exceptions. Here we call out to
                        <methodname>save()</methodname> which inserts a new record into the
                        <classname>Weather</classname> table. Alternatives to
                        <methodname>save()</methodname> are <methodname>update()</methodname>
                        which updates an existing row, or
                        <methodname>saveOrUpdate()</methodname> which would either save or
                        update depending on the presence of a non-null <varname>id</varname>
                        property in Weather.</para>
                </callout>

                <callout arearefs="coDef-hibDao-3" id="coRef-hibDao-3">
                    <para>The <methodname>load()</methodname> method, once again, is a
                        one-liner that just calls a method on an instance of
                        <classname>HibernateTemplate</classname>.
                        <methodname>load()</methodname> on
                        <classname>HibernateTemplate</classname> takes a
                        <classname>Class</classname> object and a
                        <classname>Serializable</classname> object. In this case,
                        the<classname> Serializable</classname> corresponds to the
                        <varname>id</varname> value of the <classname>Weather</classname>
                        object to load.</para>
                </callout>

                <callout arearefs="coDef-hibDao-4" id="coRef-hibDao-4">
                    <para>This last method <methodname>recentForLocation()</methodname>
                        calls out to a <classname>NamedQuery</classname> defined in the
                        <classname>Weather</classname> model object. If you can think back
                        that far, the <classname>Weather</classname> model object defined a
                        named query <code>"Weather.byLocation"</code> with a query of
                        <code>"from Weather w where w.location = :location"</code>. We're
                        loading this <classname>NamedQuery</classname> using a reference to a
                        Hibernate <classname>Session</classname> object inside a
                        <classname>HibernateCallback</classname> which is executed by the
                        <methodname>execute()</methodname> method on
                        <classname>HibernateTemplate</classname>. You can see in this method
                        that we're populating the named parameter location with the parameter
                        passed in to the <methodname>recentForLocation()</methodname>
                        method.</para>
                </callout>
            </calloutlist>

            <para>Now is a good time for some clarification.
                <classname>HibernateDaoSupport</classname> and
                <classname>HibernateTemplate</classname> are classes from the Spring
                Framework. They were created by the Spring Framework to make writing
                Hibernate <acronym>DAO</acronym> objects painless. To support this
                <acronym>DAO</acronym>, we’ll need to do some configuration in the
                <varname>simple-persist</varname> Spring
                <classname>ApplicationContext</classname> definition. The XML document
                shown in <xref linkend="ex-persist-spring" /> is stored in
                <filename>src/main/resources</filename> in a file named <filename
                                                                             role="keep-together">applicationContext-persist.xml</filename>.</para>

            <example id="ex-persist-spring">
                <title>Spring Application Context for simple-persist</title>

                <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
                    default-lazy-init="true"&gt;

                    &lt;bean id="sessionFactory"
                    class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"&gt;
                    &lt;property name="annotatedClasses"&gt;
                    &lt;list&gt;
                    &lt;value&gt;org.sonatype.mavenbook.weather.model.Atmosphere&lt;/value&gt;
                    &lt;value&gt;org.sonatype.mavenbook.weather.model.Condition&lt;/value&gt;
                    &lt;value&gt;org.sonatype.mavenbook.weather.model.Location&lt;/value&gt;
                    &lt;value&gt;org.sonatype.mavenbook.weather.model.Weather&lt;/value&gt;
                    &lt;value&gt;org.sonatype.mavenbook.weather.model.Wind&lt;/value&gt;
                    &lt;/list&gt;
                    &lt;/property&gt;
                    &lt;property name="hibernateProperties"&gt;
                    &lt;props&gt;
                    &lt;prop key="hibernate.show_sql"&gt;false&lt;/prop&gt;
                    &lt;prop key="hibernate.format_sql"&gt;true&lt;/prop&gt;
                    &lt;prop key="hibernate.transaction.factory_class"&gt;
                    org.hibernate.transaction.JDBCTransactionFactory
                    &lt;/prop&gt;
                    &lt;prop key="hibernate.dialect"&gt;
                    org.hibernate.dialect.HSQLDialect
                    &lt;/prop&gt;
                    &lt;prop key="hibernate.connection.pool_size"&gt;0&lt;/prop&gt;
                    &lt;prop key="hibernate.connection.driver_class"&gt;
                    org.hsqldb.jdbcDriver
                    &lt;/prop&gt;
                    &lt;prop key="hibernate.connection.url"&gt;
                    jdbc:hsqldb:data/weather;shutdown=true
                    &lt;/prop&gt;
                    &lt;prop key="hibernate.connection.username"&gt;sa&lt;/prop&gt;
                    &lt;prop key="hibernate.connection.password"&gt;&lt;/prop&gt;
                    &lt;prop key="hibernate.connection.autocommit"&gt;true&lt;/prop&gt;
                    &lt;prop key="hibernate.jdbc.batch_size"&gt;0&lt;/prop&gt;
                    &lt;/props&gt;
                    &lt;/property&gt;
                    &lt;/bean&gt;

                    &lt;bean id="locationDAO" 
                    class="org.sonatype.mavenbook.weather.persist.LocationDAO"&gt;
                    &lt;property name="sessionFactory" ref="sessionFactory"/&gt;
                    &lt;/bean&gt;
                    
                    &lt;bean id="weatherDAO" 
                    class="org.sonatype.mavenbook.weather.persist.WeatherDAO"&gt;
                    &lt;property name="sessionFactory" ref="sessionFactory"/&gt;
                    &lt;/bean&gt;
                    &lt;/beans&gt;</programlisting>
            </example>

            <para>In this application context, we're accomplishing a few things. The
                <varname>sessionFactory</varname> bean is the bean from which the
                <acronym>DAO</acronym>s retrieve Hibernate <classname>Session</classname>
                objects. This bean is an instance of
                <classname>AnnotationSessionFactoryBean</classname> and is supplied with a
                list of <varname>annotatedClasses</varname>. Note that the list of
                annotated classes is the list of classes defined in our
                <varname>simple-model</varname> module. Next, the
                <varname>sessionFactory</varname> is configured with a set of Hibernate
                configuration properties (<varname>hibernateProperties</varname>). In this
                example, our Hibernate properties define a number of settings:</para>

            <variablelist>
                <varlistentry>
                    <term><literal>hibernate.dialect</literal></term>

                    <listitem>
                        <para>This setting controls how <acronym>SQL</acronym> is to be
                            generated for our database. Since we are using the
                            <acronym>HSQLDB</acronym> database, our database dialect is set to
                            <classname>org.</classname><classname>hibernate.</classname><classname>dialect.</classname><classname>HSQLDialect</classname>.
                            Hibernate has dialects for all major databases such as Oracle,
                            MySQL, Postgres, and SQL Server.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>hibernate.connection.*</literal></term>

                    <listitem>
                        <para>In this example, we’re configuring the <acronym>JDBC</acronym>
                            connection properties from the Spring configuration. Our
                            applications are configured to run against a
                            <acronym>HSQLDB</acronym> in the <filename
                                                                  role="keep-together">./data/weather</filename> directory. In a real
                            enterprise application, it is more likely you would use something
                            like <acronym>JNDI</acronym> to externalize database configuration
                            from your application’s code.</para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>Lastly, in this bean definition file, both of the
                <varname>simple-persist</varname> <acronym>DAO</acronym> objects are
                created and given a reference to the <varname>sessionFactory</varname>
                bean just defined. Just like the Spring application context in
                <varname>simple-weather</varname>, this
                <filename>applicationContext-persist.xml</filename> file defines the
                architecture of a submodule in a larger enterprise design. If you were
                working with a larger collection of persistence classes, you might find it
                useful to capture them in an application context which is separate from
                your application.</para>

            <para>There’s one last piece of the puzzle in
                <varname>simple-persist</varname>. Later in this chapter, we’re going to
                <indexterm>
                    <primary>Maven Hibernate3 plugin</primary>
                </indexterm><indexterm>
                    <primary>Hibernate3 plugin</primary>
                </indexterm>see how we can use the Maven Hibernate3 plugin to generate
                our database schema from the annotated model objects. For this to work
                properly, the Maven Hibernate3 plugin needs to read the
                <acronym>JDBC</acronym> connection configuration parameters, the list of
                annotated classes, and other Hibernate configuration from a file
                named<indexterm>
                    <primary>hibernate.cfg.xml file</primary>
                </indexterm> <filename>hibernate.cfg.xml</filename> in
                <filename>src/main/resources</filename>. The purpose of this file (which
                duplicates some of the configuration in
                <filename>applicationContext-persist.xml</filename>) is to allow us to
                leverage the Maven Hibernate3 <phrase role="keep-together">plugin</phrase>
                to generate Data Definition Language (<acronym>DDL</acronym>) from nothing
                more than our annotations. See <xref linkend="ex-hibernate-cfg" />.</para>

            <example id="ex-hibernate-cfg">
                <title>simple-persist hibernate.cfg.xml</title>

                <programlisting language="xml">&lt;!DOCTYPE hibernate-configuration PUBLIC
                    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;
                    
                    &lt;hibernate-configuration&gt;
                    &lt;session-factory&gt;
                    
                    &lt;!-- SQL dialect --&gt;
                    &lt;property name="dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/property&gt;
                    
                    &lt;!-- Database connection settings --&gt;
                    &lt;property name="connection.driver_class"&gt;org.hsqldb.jdbcDriver&lt;/property&gt;
                    &lt;property name="connection.url"&gt;jdbc:hsqldb:data/weather&lt;/property&gt;
                    &lt;property name="connection.username"&gt;sa&lt;/property&gt;
                    &lt;property name="connection.password"&gt;&lt;/property&gt;
                    &lt;property name="connection.shutdown"&gt;true&lt;/property&gt;
                    
                    &lt;!-- JDBC connection pool (use the built-in one) --&gt;
                    &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;
                    
                    &lt;!-- Enable Hibernate's automatic session context management --&gt;
                    &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;
                    
                    &lt;!-- Disable the second-level cache  --&gt;
                    &lt;property name="cache.provider_class"&gt;
                    org.hibernate.cache.NoCacheProvider
                    &lt;/property&gt;
                    
                    &lt;!-- Echo all executed SQL to stdout --&gt;
                    &lt;property name="show_sql"&gt;true&lt;/property&gt;
                    
                    &lt;!-- disable batching so HSQLDB will propagate errors correctly. --&gt;
                    &lt;property name="jdbc.batch_size"&gt;0&lt;/property&gt;
                    
                    &lt;!-- List all the mapping documents we're using --&gt;
                    &lt;mapping class="org.sonatype.mavenbook.weather.model.Atmosphere"/&gt;
                    &lt;mapping class="org.sonatype.mavenbook.weather.model.Condition"/&gt;
                    &lt;mapping class="org.sonatype.mavenbook.weather.model.Location"/&gt;
                    &lt;mapping class="org.sonatype.mavenbook.weather.model.Weather"/&gt;
                    &lt;mapping class="org.sonatype.mavenbook.weather.model.Wind"/&gt;
                    
                    &lt;/session-factory&gt;
                    &lt;/hibernate-configuration&gt;</programlisting>
            </example>

            <para>The contents of <xref linkend="ex-persist-spring" /> and <xref
                                                                                linkend="ex-multimodule-web-spring-parent" /> are redundant. While the
                Spring Application Context <acronym>XML</acronym> is going to be used by
                the web application and the command-line application, the
                <filename>hibernate.cfg.xml</filename> exists only to support the Maven
                Hibernate3 plugin. Later in this chapter, we'll see how to use this
                <filename>hibernate.cfg.xml</filename> and the Maven Hibernate3 plugin to
                generate a database schema based on the annotated object model defined in
                <varname>simple-model</varname>. This
                <filename>hibernate.cfg.xml</filename> file is the file that will
                configure the <acronym>JDBC</acronym> connection properties and enumerate
                the list of annotated model classes for the Maven Hibernate3
                plugin.</para>
        </section>

        <section id="multimodule-web-spring-sect-simple-web">
            <title>The Simple Web Application Module</title>

            <para>The web application is defined in a <varname>simple-webapp</varname>
                <indexterm class="startofrange" id="enterprise6a">
                    <primary>multimodule project (example)</primary>

                    <secondary>multimodule enterprise project</secondary>

                    <tertiary>Simple Web Application of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise6b">
                    <primary>Web applications</primary>

                    <secondary>multimodule enterprise project example</secondary>

                    <tertiary>Simple Web Application of</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise6c">
                    <primary>enterprise project, multimodule (example)</primary>

                    <secondary>Simple Web Application of</secondary>
                </indexterm>project. This simple web application project is going to
                define two Spring <acronym>MVC</acronym> Controllers:
                <classname>WeatherController</classname> and <classname
                                                                  role="keep-together">HistoryController</classname>. Both of these
                controllers are going to reference components defined in
                <varname>simple-weather</varname> and <varname>simple-persist</varname>.
                The Spring container is configured in this application’s
                <filename>web.xml</filename>, which references the
                <filename>applicationContext-weather.xml</filename> file in <varname
                                                                                 role="keep-together">simple-weather</varname> and the
                <filename>applicationContext-persist.xml</filename> file in
                <varname>simple-persist</varname>. The component architecture of this
                simple web application is shown in <xref
                                                        linkend="fig-web-components" />.</para>

            <figure id="fig-web-components">
                <title>Spring MVC Controllers Referencing Components in simple-weather
                    and simple-persist.</title>

                <mediaobject>
                    <imageobject role="web">
                        <imagedata fileref="figs/web/multimodule-web-web-spring.png" />
                    </imageobject>

                    <imageobject role="print">
                        <imagedata align="center"
                                   fileref="figs/print/multimodule-web-web-spring.pdf"
                                   format="PDF" scalefit="0" width="100%" />
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The POM for <varname>simple-webapp</varname> is shown in <xref
                                                                                linkend="example_pom-for-simple-webapp" />.</para>

            <example id="example_pom-for-simple-webapp">
                <title>POM for simple-webapp</title>

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;

                    &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;name&gt;Simple Web Application&lt;/name&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt; <co id="co-springweb-1" linkends="coref-springweb-1" />
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;version&gt;2.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;version&gt;1.5&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt; <co id="coDef-spring-web-2" linkends="coRef-spring-web-2" />
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;dependencies&gt;<co id="coDef-spring-web-3"
                                            linkends="coRef-spring-web-3" />
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;1.8.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;        
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; <co
                                                                          id="coDef-spring-web-4" linkends="coRef-spring-web-4" />
                    &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;2.0&lt;/version&gt;
                    &lt;configuration&gt;
                    &lt;components&gt;
                    &lt;component&gt;
                    &lt;name&gt;hbm2ddl&lt;/name&gt;
                    &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt; <co
                                                                                              id="coDef-spring-web-5" linkends="coRef-spring-web-5" />
                    &lt;/component&gt;
                    &lt;/components&gt;
                    &lt;/configuration&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;1.8.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;        
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>As this book progresses and the examples become more and more
                substantial, you’ll notice that the <filename>pom.xml</filename> begins to
                take on some weight. In this POM, we’re configuring four dependencies and
                two plugins. Let’s go through this POM in detail and dwell on some of the
                important configuration points:</para>

            <calloutlist>
                <callout arearefs="co-springweb-1" id="coref-springweb-1">
                    <para>This <varname>simple-webapp</varname> project defines four
                        dependencies: the Servlet 2.4 specification, the simple-weather
                        service library, the simple-persist persistence library, and the
                        entire Spring Framework 2.0.7.</para>
                </callout>

                <callout arearefs="coDef-spring-web-2" id="coRef-spring-web-2">
                    <para>The Maven Jetty plugin couldn’t be easier to add to this
                        <indexterm>
                            <primary>Maven Jetty plugin</primary>
                        </indexterm><indexterm>
                            <primary>Jetty plugin</primary>
                        </indexterm>project; we simply add a <literal>plugin</literal>
                        element that references the appropriate <literal>groupId</literal> and
                        <literal>artifactId</literal>. The fact that this plugin is so trivial
                        to configure means that the plugin developers did a good job of
                        providing adequate defaults that don’t need to be overridden in most
                        cases. If you did need to override the configuration of the Jetty
                        plugin, you would do so by providing a
                        <literal>configuration</literal> element.</para>
                </callout>

                <callout arearefs="coDef-spring-web-3" id="coRef-spring-web-3">
                    <para>In our build configuration, we're going to be configuring the
                        Maven Hibernate3 Plugin to hit an embedded HSQLDB instance. For the
                        Maven Hibernate 3 plugin to successfully connect to this database
                        using JDBC, the plugin will need reference the HSQLDB JDBC driver on
                        the classpath. To make a dependency available for a plugin, we add a
                        <sgmltag>dependency</sgmltag> declaration right inside
                        <sgmltag>plugin</sgmltag> declaration. In this case, we're referencing
                        hsqldb:hsqldb:1.8.0.7. The Hibernate plugin also needs the JDBC driver
                        to create the database, so we have also added this dependency to its
                        configuration.</para>
                </callout>

                <callout arearefs="coDef-spring-web-4" id="coRef-spring-web-4">
                    <para>The Maven Hibernate plugin is when this POM starts to get
                        <indexterm>
                            <primary>Maven Hibernate plugin</primary>
                        </indexterm><indexterm>
                            <primary>Hibernate plugin</primary>
                        </indexterm>interesting. In the next section, we’re going to run the
                        <literal>hbm2ddl</literal> goal to generate a HSQLDB database. In this
                        <filename>pom.xml</filename>, we’re including a reference to version
                        2.0 of the <literal>hibernate3-maven-plugin</literal> hosted by the
                        Codehaus Mojo plugin.</para>
                </callout>

                <callout arearefs="coDef-spring-web-5" id="coRef-spring-web-5">
                    <para>The Maven Hibernate3 plugin has different ways to obtain
                        Hibernate mapping information that are appropriate for different usage
                        scenarios of the Hibernate3 plugin. If you were using Hibernate
                        Mapping XML (<filename>.hbm.xml</filename>) files, and you wanted to
                        generate model classes using the <literal>hbm2java</literal> goal, you
                        would set your implementation to configuration. If you were using the
                        Hibernate3 plugin to reverse engineer a database to produce
                        <filename>.hbm.xml</filename> files and model classes from an existing
                        database, you would use an implementation of
                        <literal>jdbcconfiguration</literal>. In this case, we’re simply using
                        an existing annotated object model to generate a database. In other
                        words, we have our Hibernate mapping, but we don’t yet have a
                        database. In this usage scenario, the appropriate implementation value
                        is <literal>annotationconfiguration</literal>. The Maven Hibernate3
                        plugin is discussed in more detail in the later section <xref
                                                                                     linkend="multimodule-web-spring-sect-spring-running-web" />.</para>
                </callout>
            </calloutlist>

            <para>Next, we turn our attention to the two Spring MVC controllers that
                will handle all of the requests. Both of these controllers reference the
                beans defined in <varname>simple-weather</varname> and
                <varname>simple-persist</varname>.</para>

            <example>
                <title>simple-webapp WeatherController</title>

                <programlisting language="java">package org.sonatype.mavenbook.web;

                    import org.sonatype.mavenbook.weather.model.Weather;
                    import org.sonatype.mavenbook.weather.persist.WeatherDAO;
                    import org.sonatype.mavenbook.weather.WeatherService;
                    import javax.servlet.http.*;
                    import org.springframework.web.servlet.ModelAndView;
                    import org.springframework.web.servlet.mvc.Controller;

                    public class WeatherController implements Controller {

                    private WeatherService weatherService;
                    private WeatherDAO weatherDAO;

                    public ModelAndView handleRequest(HttpServletRequest request,
                    HttpServletResponse response) throws Exception {

                    String zip = request.getParameter("zip");
                    Weather weather = weatherService.retrieveForecast(zip);
                    weatherDAO.save(weather);
                    return new ModelAndView("weather", "weather", weather);
                    }

                    public WeatherService getWeatherService() {
                    return weatherService;
                    }

                    public void setWeatherService(WeatherService weatherService) {
                    this.weatherService = weatherService;
                    }

                    public WeatherDAO getWeatherDAO() {
                    return weatherDAO;
                    }

                    public void setWeatherDAO(WeatherDAO weatherDAO) {
                    this.weatherDAO = weatherDAO;
                    }
                    }</programlisting>
            </example>

            <para><varname>WeatherController</varname> implements the Spring MVC
                Controller interface that mandates the presence of a
                <methodname>handleRequest()</methodname> method with the signature shown
                in the example. If you look at the meat of this method, you’ll see that it
                invokes the <methodname>retrieveForecast()</methodname> method on the
                <varname>weatherService</varname> instance variable. Unlike the previous
                chapter, which had a Servlet that instantiated the
                <classname>WeatherService</classname> class, the
                <classname>WeatherController</classname> is a bean with a
                <varname>weatherService</varname> property. The Spring IoC container is
                responsible for wiring the controller to the
                <varname>weatherService</varname> component. Also notice that we’re not
                using the <classname role="keep-together">WeatherFormatter</classname> in
                this Spring controller implementation; instead, we’re passing the
                <classname>Weather</classname> object returned by
                <methodname>retrieveForecast()</methodname> to the constructor of
                <classname>ModelAndView</classname>. This
                <classname>ModelAndView</classname> class is going to be used to render a
                <indexterm>
                    <primary>Velocity template</primary>
                </indexterm>Velocity template, and this template will have references to
                a <varname>\${weather}</varname> variable. The
                <filename>weather.vm</filename> template is stored in
                <filename>src/main/webapp/WEB-INF/vm</filename> and is shown in <xref
                                                                                     linkend="ex-weather-vm" />.</para>

            <para>In the <classname>WeatherController</classname>, before we render
                the output of the forecast, we pass the <classname>Weather</classname>
                object returned by the <classname>WeatherService</classname> to the
                <methodname>save()</methodname> method on
                <classname>WeatherDAO</classname>. Here we are saving this
                <classname>Weather</classname> object—using Hibernate—to an HSQLDB
                database. Later, in <classname>HistoryController</classname>, we will see
                how we can retrieve a history of weather forecasts that were saved by the
                <classname>WeatherController</classname>.</para>

            <example id="ex-weather-vm">
                <title>weather.vm Template Rendered by WeatherController</title>

                <programlisting language="xml">&lt;b&gt;Current Weather Conditions for:
                    \${weather.location.city}, \${weather.location.region}, 
                    \${weather.location.country}&lt;/b&gt;&lt;br/&gt;
                    
                    &lt;ul&gt;
                    &lt;li&gt;Temperature: \${weather.condition.temp}&lt;/li&gt;
                    &lt;li&gt;Condition: \${weather.condition.text}&lt;/li&gt;
                    &lt;li&gt;Humidity: \${weather.atmosphere.humidity}&lt;/li&gt;
                    &lt;li&gt;Wind Chill: \${weather.wind.chill}&lt;/li&gt;
                    &lt;li&gt;Date: \${weather.date}&lt;/li&gt;
                    &lt;/ul&gt;
                </programlisting>
            </example>

            <para>The syntax for this Velocity template is straightforward: variables
                are referenced using <code>\${}</code> notation. The expression between
                the curly braces references a property, or a property of a property on the
                <varname>weather</varname> variable, which was passed to this template by
                the <classname>WeatherController</classname>.</para>

            <para>The <classname>HistoryController</classname> is used to retrieve
                recent forecasts that have been requested by the
                <classname>WeatherController</classname>. Whenever we retrieve a forecast
                from the <classname>WeatherController</classname>, that controller saves
                the <classname>Weather</classname> object to the database via the
                <classname>WeatherDAO</classname>. <classname>WeatherDAO</classname> then
                uses Hibernate to dissect the <classname>Weather</classname> object into a
                series of rows in a set of related database tables. The
                <classname>HistoryController</classname> is shown in <xref
                                                                          linkend="ex-spring-history" />.</para>

            <example id="ex-spring-history">
                <title>simple-web HistoryController</title>

                <programlisting language="java">package org.sonatype.mavenbook.web;

                    import java.util.*;
                    import javax.servlet.http.*;
                    import org.springframework.web.servlet.ModelAndView;
                    import org.springframework.web.servlet.mvc.Controller;
                    import org.sonatype.mavenbook.weather.model.*;
                    import org.sonatype.mavenbook.weather.persist.*;

                    public class HistoryController implements Controller {

                    private LocationDAO locationDAO;
                    private WeatherDAO weatherDAO;

                    public ModelAndView handleRequest(HttpServletRequest request,
                    HttpServletResponse response) throws Exception {
                    String zip = request.getParameter("zip");
                    Location location = locationDAO.findByZip(zip);
                    List&lt;Weather&gt; weathers = weatherDAO.recentForLocation( location );

                    Map&lt;String,Object&gt; model = new HashMap&lt;String,Object&gt;();
                    model.put( "location", location );
                    model.put( "weathers", weathers );

                    return new ModelAndView("history", model);
                    }

                    public WeatherDAO getWeatherDAO() {
                    return weatherDAO;
                    }

                    public void setWeatherDAO(WeatherDAO weatherDAO) {
                    this.weatherDAO = weatherDAO;
                    }

                    public LocationDAO getLocationDAO() {
                    return locationDAO;
                    }

                    public void setLocationDAO(LocationDAO locationDAO) {
                    this.locationDAO = locationDAO;
                    }
                    }</programlisting>
            </example>

            <para>The <classname>HistoryController</classname> is wired to two
                <acronym>DAO</acronym> objects defined in
                <varname>simple-persist</varname>. The <acronym>DAO</acronym>s are bean
                properties of the <classname>HistoryController</classname>:
                <classname>WeatherDAO</classname> and <classname>LocationDAO</classname>.
                The goal of the <classname>HistoryController</classname> is to retrieve a
                <classname>List</classname> of <classname>Weather</classname> objects
                which correspond to the <varname>zip</varname> parameter. When the
                <classname>WeatherDAO</classname> saves the <classname>Weather</classname>
                object to the database, it doesn't just store the zip code, it stores a
                <classname>Location</classname> object which is related to the
                <classname>Weather</classname> object in the
                <varname>simple-model</varname>. To retrieve a <classname>List</classname>
                of <classname>Weather</classname> objects, the
                <classname>HistoryController</classname> first retrieves the
                <classname>Location</classname> object that corresponds to the
                <varname>zip</varname> parameter. It does this by invoking the
                <methodname>findByZip()</methodname> method on
                <classname>LocationDAO</classname>.</para>

            <para>Once the <classname>Location</classname> object has been retrieved,
                the <classname>HistoryController</classname> will then attempt to retrieve
                recent <classname>Weather</classname> objects that match the given
                <classname>Location</classname>. Once the
                <classname>List&lt;Weather&gt;</classname> has been retrieved, a
                <classname>HashMap</classname> is created to hold two variables for the
                <filename>history.vm</filename> Velocity template shown in <xref
                                                                                linkend="ex-spring-history-velocity" />.</para>

            <example id="ex-spring-history-velocity">
                <title>history.vm Rendered by the HistoryController</title>

                <programlisting language="java">&lt;b&gt;
                    Weather History for: \${location.city}, \${location.region}, \${location.country}
                    &lt;/b&gt;
                    &lt;br/&gt;
                    
                    #foreach( $weather in $weathers )
                    &lt;ul&gt;
                    &lt;li&gt;Temperature: $weather.condition.temp&lt;/li&gt;
                    &lt;li&gt;Condition: $weather.condition.text&lt;/li&gt;
                    &lt;li&gt;Humidity: $weather.atmosphere.humidity&lt;/li&gt;
                    &lt;li&gt;Wind Chill: $weather.wind.chill&lt;/li&gt;
                    &lt;li&gt;Date: $weather.date&lt;/li&gt;
                    &lt;/ul&gt;
                    #end
                </programlisting>
            </example>

            <para>The <filename>history.vm</filename> template in
                <filename>src/main/webapp/WEB-INF/vm</filename> references the
                <varname>location</varname> variable to print out information about the
                location of the forecasts retrieved from the
                <classname>WeatherDAO</classname>. This template then uses a Velocity
                control structure, <code>#foreach</code>, to loop through each element in
                the <varname>weathers</varname> variable. Each element in
                <varname>weathers</varname> is assigned to a variable named
                <varname>weather</varname> and the template between <code>#foreach</code>
                and <code>#end</code> is rendered for each forecast.</para>

            <para>You've seen these <classname>Controller</classname> implementations,
                and you've seen that they reference other beans defined in
                <varname>simple-weather</varname> and <varname>simple-persist</varname>,
                they respond to <acronym>HTTP</acronym> requests, and they yield control
                to some mysterious templating system that knows how to render Velocity
                templates. All of this magic is configured in a Spring application context
                in <filename>src/main/webapp/WEB-INF/weather-servlet.xml</filename>. This
                <acronym>XML</acronym> configures the controllers and references other
                Spring-managed beans, it is loaded by a
                <classname>ServletContextListener</classname> which is also configured to
                load the <filename>applicationContext-weather.xml</filename> and
                <filename>applicationContext-persist.xml</filename> from the classpath.
                Let's take a closer look at the <filename>weather-servlet.xml</filename>
                shown in <xref linkend="ex-spring-weather-servlet" />.</para>

            <example id="ex-spring-weather-servlet">
                <title>Spring Controller Configuration weather-servlet.xml</title>

                <programlisting>&lt;beans&gt;  
                    &lt;bean id="weatherController" <co id="coDef-weather-servlet-1"
                                                        linkends="coRef-weather-servlet-1" />
                    class="org.sonatype.mavenbook.web.WeatherController"&gt;
                    &lt;property name="weatherService" ref="weatherService"/&gt;
                    &lt;property name="weatherDAO" ref="weatherDAO"/&gt;
                    &lt;/bean&gt;

                    &lt;bean id="historyController" 
                    class="org.sonatype.mavenbook.web.HistoryController"&gt;
                    &lt;property name="weatherDAO" ref="weatherDAO"/&gt;
                    &lt;property name="locationDAO" ref="locationDAO"/&gt;
                    &lt;/bean&gt;

                    &lt;!-- you can have more than one handler defined --&gt;
                    &lt;bean id="urlMapping" 
                    class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
                    &lt;property name="urlMap"&gt;
                    &lt;map&gt;
                    &lt;entry key="/weather.x"&gt; <co
                                                        id="coDef-weather-servlet-2" linkends="coRef-weather-servlet-2" />
                    &lt;ref bean="weatherController" /&gt;
                    &lt;/entry&gt;
                    &lt;entry key="/history.x"&gt;
                    &lt;ref bean="historyController" /&gt;
                    &lt;/entry&gt;
                    &lt;/map&gt;
                    &lt;/property&gt;
                    &lt;/bean&gt;


                    &lt;bean id="velocityConfig" <co id="coDef-weather-servlet-3"
                                                     linkends="coRef-weather-servlet-3" />
                    class="org.springframework.web.servlet.view.velocity.VelocityConfigurer"&gt;
                    &lt;property name="resourceLoaderPath" value="/WEB-INF/vm/"/&gt;
                    &lt;/bean&gt;

                    &lt;bean id="viewResolver" <co id="coDef-weather-servlet-4"
                                                   linkends="coRef-weather-servlet-4" />
                    class="org.springframework.web.servlet.view.velocity.VelocityViewResolver"&gt;
                    &lt;property name="cache" value="true"/&gt;
                    &lt;property name="prefix" value=""/&gt;
                    &lt;property name="suffix" value=".vm"/&gt;
                    &lt;property name="exposeSpringMacroHelpers" value="true"/&gt;
                    &lt;/bean&gt;
                    &lt;/beans&gt;
                </programlisting>
            </example>

            <calloutlist>
                <callout arearefs="coDef-weather-servlet-1" id="coRef-weather-servlet-1">
                    <para>The <filename>weather-servlet.xml</filename> defines the two
                        controllers as Spring-managed beans.
                        <varname>weatherController</varname> has two properties which are
                        references to <varname>weatherService</varname> and
                        <varname>weatherDAO</varname>. <varname>historyController</varname>
                        references the beans <varname>weatherDAO</varname> and
                        <varname>locationDAO</varname>. When this
                        <classname>ApplicationContext</classname> is created, it is created in
                        an environment that has access to the
                        <classname>ApplicationContext</classname>s defined in both
                        <varname>simple-persist</varname> and
                        <varname>simple-weather</varname>. In <xref
                                                                   linkend="ex-spring-web-xml" /> you will see how Spring is configured
                        to merge components from multiple Spring configuration files.</para>
                </callout>

                <callout arearefs="coDef-weather-servlet-2" id="coRef-weather-servlet-2">
                    <para>The <varname>urlMapping</varname> bean defines the
                        <acronym>URL</acronym> patterns which invoke the
                        <classname>WeatherController</classname> and the
                        <classname>HistoryController</classname>. In this example, we are
                        using the <classname>SimpleUrlHandlerMapping</classname> and mapping
                        <filename>/weather.x</filename> to
                        <classname>WeatherController</classname> and
                        <filename>/history.x</filename> to
                        <classname>HistoryController</classname>.</para>
                </callout>

                <callout arearefs="coDef-weather-servlet-3" id="coRef-weather-servlet-3">
                    <para>Since we are using the Velocity templating engine, we will need
                        to pass in some configuration options. In the
                        <varname>velocityConfig</varname> bean, we are telling Velocity to
                        look for all templates in the <filename>/WEB-INF/vm</filename>
                        directory.</para>
                </callout>

                <callout arearefs="coDef-weather-servlet-4" id="coRef-weather-servlet-4">
                    <para>Last, the <varname>viewResolver</varname> is configured with the
                        class <classname>VelocityViewResolver</classname>. There are a number
                        of <classname>ViewResolver</classname> implementations in Spring from
                        a standard ViewResolver to render <acronym>JSP</acronym> or
                        <acronym>JSTL</acronym> pages to a resolver which can render
                        Freemarker templates. In this example, we're configuring the Velocity
                        templating engine and setting the default prefix and suffix which will
                        be automatically appended to the names of the template passed to
                        <classname>ModelAndView</classname>.</para>
                </callout>
            </calloutlist>

            <para>Finally, the <varname>simple-webapp</varname> project was a
                <filename>web.xml</filename> which provides the basic configuration for
                the web application. The <filename>web.xml</filename> file is shown in
                <xref linkend="ex-spring-web-xml" />.</para>

            <example id="ex-spring-web-xml">
                <title>web.xml for simple-webapp</title>

                <programlisting id="ex-spring-webxml">&lt;web-app id="simple-webapp" version="2.4" 
                    xmlns="http://java.sun.com/xml/ns/j2ee" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
                    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;
                    &lt;display-name&gt;Simple Web Application&lt;/display-name&gt;
                    
                    &lt;context-param&gt; <co id="coDef-spring-webx-1"
                                              linkends="coRef-spring-webx-1" />
                    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
                    &lt;param-value&gt;
                    classpath:applicationContext-weather.xml
                    classpath:applicationContext-persist.xml
                    &lt;/param-value&gt;
                    &lt;/context-param&gt;
                    
                    &lt;context-param&gt; <co id="coDef-spring-webx-2"
                                              linkends="coRef-spring-webx-2" />
                    &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;
                    &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;
                    &lt;/context-param&gt;
                    
                    &lt;listener&gt; <co id="coDef-spring-webx-3" linkends="coRef-spring-webx-3" />
                    &lt;listener-class&gt;
                    org.springframework.web.util.Log4jConfigListener
                    &lt;/listener-class&gt;
                    &lt;/listener&gt;
                    
                    &lt;listener&gt;
                    &lt;listener-class&gt; <co id="coDef-spring-webx-4"
                                               linkends="coRef-spring-webx-4" />
                    org.springframework.web.context.ContextLoaderListener
                    &lt;/listener-class&gt;
                    &lt;/listener&gt;
                    
                    &lt;servlet&gt; <co id="coDef-spring-webx-5" linkends="coRef-spring-webx-5" />
                    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
                    &lt;servlet-class&gt;
                    org.springframework.web.servlet.DispatcherServlet
                    &lt;/servlet-class&gt;
                    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
                    &lt;/servlet&gt;
                    
                    &lt;servlet-mapping&gt; <co id="coDef-spring-webx-6"
                                                linkends="coRef-spring-webx-6" />
                    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;*.x&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt;
                    &lt;/web-app&gt;
                </programlisting>
            </example>

            <calloutlist>
                <callout arearefs="coDef-spring-webx-1" id="coRef-spring-webx-1">
                    <para>Here's a bit of magic which allows us to reuse the
                        <filename>applicationContext-weather.xml</filename> and
                        <filename>applicationContext-persist.xml</filename> in this project.
                        The <varname>contextConfigLocation</varname> is used by the
                        <classname>ContextLoaderListener</classname> to create an
                        <classname>ApplicationContext</classname>. When the weather servlet is
                        created, the <filename>weather-servlet.xml</filename> from <xref
                                                                                        linkend="ex-spring-weather-servlet" /> is going to be evaluated with
                        the <classname>ApplicationContext</classname> created from this
                        <varname>contextConfigLocation</varname>. In this way, you can define
                        a set of beans in another project and you can reference these beans
                        via the classpath. Since the <varname>simple-persist</varname> and
                        <varname>simple-weather</varname> <acronym>JAR</acronym>s are going to
                        be in <filename>WEB-INF/lib</filename>, all we do is use the
                        <literal>classpath:</literal> prefix to reference these files.
                        (Another option would have been to copy these files to
                        <filename>/WEB-INF</filename> and reference them with something like
                        <filename>/WEB-INF/applicationContext-persist.xml</filename>).</para>
                </callout>

                <callout arearefs="coDef-spring-webx-2" id="coRef-spring-webx-2">
                    <para>The <varname>log4jConfigLocation</varname> is used to tell the
                        <classname>Log4JConfigListener</classname> where to look for Log4J
                        logging configuration. In this example, we tell Log4J to look in
                        <filename>/WEB-INF/log4j.properties</filename>.</para>
                </callout>

                <callout arearefs="coDef-spring-webx-3" id="coRef-spring-webx-3">
                    <para>This makes sure that the Log4J system is configured when the web
                        application starts. It is important to put this
                        <classname>Log4JConfigListener</classname> before the<classname>
                            ContextLoaderListener</classname>; otherwise, you may miss important
                        logging messages which point to a problem preventing application
                        startup. If you have a particularly large set of beans managed by
                        Spring, and one of them happens to blow up on application startup,
                        your application will fail. If you have logging initialized before
                        Spring starts, you might have a chance to catch a warning or an error.
                        If you don't have logging initialized before Spring starts up, you'll
                        have no idea why your application refuses to start.</para>
                </callout>

                <callout arearefs="coDef-spring-webx-4" id="coRef-spring-webx-4">
                    <para>The <classname>ContextLoaderListener</classname> is essentially
                        the Spring container. When the application starts, this listener will
                        build an <classname>ApplicationContext</classname> from the
                        <varname>contextConfigLocation</varname> parameter.</para>
                </callout>

                <callout arearefs="coDef-spring-webx-5" id="coRef-spring-webx-5">
                    <para>We define a Spring <acronym>MVC</acronym>
                        <classname>DispatcherServlet</classname> with a name of
                        <varname>weather</varname>. This will cause Spring to look for a
                        Spring configuration file in
                        <filename>/WEB-INF/weather-servlet.xml</filename>. You can have as
                        many <classname>DispatcherServlet</classname>s as you need, a
                        <classname>DispatcherServlet</classname> can contain one or more
                        Spring <acronym>MVC</acronym> <classname>Controller</classname>
                        implementations.</para>
                </callout>

                <callout arearefs="coDef-spring-webx-6" id="coRef-spring-webx-6">
                    <para>All requests ending in <filename>.x</filename> will be routed to
                        the <varname>weather</varname> servlet. Note that the
                        <filename>.x</filename> extension has no particular meaning, it is an
                        arbitrary choice and you can use whatever <acronym>URL</acronym>
                        pattern you like.</para>
                </callout>
            </calloutlist>
        </section>

        <section id="multimodule-web-spring-sect-spring-running-web">
            <title>Running the Web Application</title>

            <para>To run the web application, you’ll first need to build the entire
                multi-module project and then build the database <indexterm
                                                                      class="startofrange" id="enterprise7a">
                    <primary>multimodule project (example)</primary>

                    <secondary>multimodule enterprise project</secondary>

                    <tertiary>running Web application</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise7b">
                    <primary>Web applications</primary>

                    <secondary>multimodule enterprise project example</secondary>

                    <tertiary>running Web application</tertiary>
                </indexterm><indexterm class="startofrange" id="enterprise7c">
                    <primary>enterprise project, multimodule (example)</primary>

                    <secondary>running Web application</secondary>
                </indexterm><indexterm>
                    <primary>Maven Hibernate3 plugin</primary>

                    <secondary>building database using</secondary>
                </indexterm><indexterm>
                    <primary>Hibernate3 plugin</primary>

                    <secondary>building database using</secondary>
                </indexterm>using the Hibernate3 plugin. First, from the top-level
                <filename>simple-parent</filename> project directory, run <command>mvn
                    clean install</command>:</para>

            <screen>$ <command>mvn clean install</command></screen>

            <para>Running <command>mvn clean install</command> at the top-level of
                your multi-module project will install all of modules into your local
                Maven repository. You need to do this before building the database from
                the <varname>simple-webapp</varname> project. To build the database from
                the <varname>simple-webapp</varname> project, run the following from the
                <varname>simple-webapp</varname> project's directory:</para>

            <screen>$ <command>mvn hibernate3:hbm2ddl</command>
                [INFO] Scanning for projects...
                [INFO] Searching repository for plugin with prefix: 'hibernate3'.
                [INFO] org.codehaus.mojo: checking for updates from central
                [INFO] ------------------------------------------------------------------------
                [INFO] Building Multi-Spring Chapter Simple Web Application
                [INFO]    task-segment: [hibernate3:hbm2ddl]
                [INFO] ------------------------------------------------------------------------
                [INFO] Preparing hibernate3:hbm2ddl
                ...
                10:24:56,151  INFO org.hibernate.tool.hbm2ddl.SchemaExport - export complete
                [INFO] ------------------------------------------------------------------------
                [INFO] BUILD SUCCESSFUL
                [INFO] ------------------------------------------------------------------------
            </screen>

            <para>Once you've done this, there should be a
                <filename>\${basedir}/data</filename> directory which will contain the
                HSQLDB database. You can then start the web application with:</para>

            <screen>$ <command>mvn jetty:run</command>
                [INFO] Scanning for projects...
                [INFO] Searching repository for plugin with prefix: 'jetty'.
                [INFO] ------------------------------------------------------------------------
                [INFO] Building Multi-Spring Chapter Simple Web Application
                [INFO]    task-segment: [jetty:run]
                [INFO] ------------------------------------------------------------------------
                [INFO] Preparing jetty:run
                ...
                [INFO] [jetty:run]
                [INFO] Configuring Jetty for project: 
                Multi-Spring Chapter Simple Web Application
                ...
                [INFO] Context path = /simple-webapp
                [INFO] Tmp directory =  determined at runtime
                [INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
                [INFO] Web overrides =  none
                [INFO] Starting jetty 6.1.7 ...
                2008-03-25 10:28:03.639::INFO:  jetty-6.1.7
                ...
                2147 INFO  DispatcherServlet  - FrameworkServlet 'weather': \
                initialization completed in 1654 ms
                2008-03-25 10:28:06.341::INFO:  Started SelectChannelConnector@0.0.0.0:8080
                [INFO] Started Jetty Server
            </screen>

            <para>Once Jetty is started, you can load <ulink
                                                           url="http://localhost:8080/simple-webapp/weather.x?zip=60202">http://localhost:8080/simple-webapp/weather.x?zip=60202</ulink>
                and you should see the weather for Evanston, IL in your web browser.
                Change the ZIP code and you should be able to get your own weather
                report.</para>

            <screen>Current Weather Conditions for: Evanston, IL, US

                * Temperature: 42
                * Condition: Partly Cloudy
                * Humidity: 55
                * Wind Chill: 34
                * Date: Tue Mar 25 10:29:45 CDT 2008
            </screen>
        </section>

        <section id="multimodule-web-spring-sect-simple-command">
            <title>The Simple Command Module</title>

            <para>The <varname>simple-command</varname> project is a command-line
                version of the <varname>simple-webapp</varname>. It is a utility that
                relies on the same dependencies: <varname>simple-persist</varname> and
                <varname>simple-weather</varname>. Instead of interacting with this
                application via a web browser, you would run the
                <classname>simple-command</classname> utility from the
                command-line.</para>

            <figure id="fig-multi-spring-command">
                <title>Command Line Application Referencing simple-weather and
                    simple-persist</title>

                <mediaobject>
                    <imageobject role="web">
                        <imagedata fileref="figs/web/multimodule-web-command-spring.png" />
                    </imageobject>

                    <imageobject role="print">
                        <imagedata align="center"
                                   fileref="figs/print/multimodule-web-command-spring.pdf"
                                   format="PDF" scalefit="0" width="100%" />
                    </imageobject>
                </mediaobject>
            </figure>

            <example>
                <title>POM for simple-command</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;

                    &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;name&gt;Simple Command Line Tool&lt;/name&gt;

                    &lt;build&gt;
                    &lt;finalName&gt;\${project.artifactId}&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;descriptorRefs&gt;
                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                    &lt;/descriptorRefs&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;2.1&lt;/version&gt;
                    &lt;configuration&gt;
                    &lt;components&gt;
                    &lt;component&gt;
                    &lt;name&gt;hbm2ddl&lt;/name&gt;
                    &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
                    &lt;/component&gt;
                    &lt;/components&gt;
                    &lt;/configuration&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;1.8.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;           
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.multispring&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;version&gt;2.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;1.8.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>This <acronym>POM</acronym> creates a <acronym>JAR</acronym> file
                which will contain the
                <classname>org.sonatype.mavenbook.weather.Main</classname> class shown in
                <xref linkend="ex-spring-command-main-class" />. In this
                <acronym>POM</acronym> we configure the Maven Assembly plugin to use a
                built-in assembly descriptor named
                <varname>jar-with-dependencies</varname> which creates a single
                <acronym>JAR</acronym> file containing all the bytecode a project needs to
                execute including the bytecode from the project you are building and all
                the bytecode from libraries your project depends upons.</para>

            <example id="ex-spring-command-main-class">
                <title>The Main Class for simple-command</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.util.List;

                    import org.apache.log4j.PropertyConfigurator;
                    import org.springframework.context.ApplicationContext;
                    import org.springframework.context.support.ClassPathXmlApplicationContext;

                    import org.sonatype.mavenbook.weather.model.Location;
                    import org.sonatype.mavenbook.weather.model.Weather;
                    import org.sonatype.mavenbook.weather.persist.LocationDAO;
                    import org.sonatype.mavenbook.weather.persist.WeatherDAO;

                    public class Main {

                    private WeatherService weatherService;
                    private WeatherDAO weatherDAO;
                    private LocationDAO locationDAO;

                    public static void main(String[] args) throws Exception {
                    // Configure Log4J
                    PropertyConfigurator.configure(Main.class.getClassLoader().getResource(
                    "log4j.properties"));

                    // Read the Zip Code from the Command-line (if none supplied, use 60202)
                    String zipcode = "60202";
                    try {
                    zipcode = args[0];
                    } catch (Exception e) {
                    }

                    // Read the Operation from the Command-line (if none supplied use weather)
                    String operation = "weather";
                    try {
                    operation = args[1];
                    } catch (Exception e) {
                    }

                    // Start the program
                    Main main = new Main(zipcode);

                    ApplicationContext context = 
                    new ClassPathXmlApplicationContext(
                    new String[] { "classpath:applicationContext-weather.xml",
                    "classpath:applicationContext-persist.xml" });
                    main.weatherService = (WeatherService) context.getBean("weatherService");
                    main.locationDAO = (LocationDAO) context.getBean("locationDAO");
                    main.weatherDAO = (WeatherDAO) context.getBean("weatherDAO");
                    if( operation.equals("weather")) {
                    main.getWeather();
                    } else {
                    main.getHistory();
                    }
                    }

                    private String zip;

                    public Main(String zip) {
                    this.zip = zip;
                    }

                    public void getWeather() throws Exception {
                    Weather weather = weatherService.retrieveForecast(zip);
                    weatherDAO.save( weather );
                    System.out.print(new WeatherFormatter().formatWeather(weather));
                    }

                    public void getHistory() throws Exception {
                    Location location = locationDAO.findByZip(zip);
                    List&lt;Weather&gt; weathers = weatherDAO.recentForLocation(location);
                    System.out.print(new WeatherFormatter().formatHistory(location, weathers));
                    }
                    }
                </programlisting>
            </example>

            <para>The <classname>Main</classname> class has a reference to
                <classname>WeatherDAO</classname>, <classname>LocationDAO</classname>, and
                <classname>WeatherService</classname>. The static
                <methodname>main()</methodname> method in this class:</para>

            <itemizedlist>
                <listitem>
                    <para>Reads the Zip Code from the first command line argument</para>
                </listitem>

                <listitem>
                    <para>Reads the Operation from the second command line argument. If
                        the operation is "weather", the latest weather will be retrieved from
                        the web service. If the operation is "history", the program will fetch
                        historical weather records from the local database.</para>
                </listitem>

                <listitem>
                    <para>Loads a Spring <classname>ApplicationContext</classname> using
                        two <acronym>XML</acronym> files loaded from
                        <varname>simple-persist</varname> and
                        <varname>simple-weather</varname></para>
                </listitem>

                <listitem>
                    <para>Creates an instance of <classname>Main</classname></para>
                </listitem>

                <listitem>
                    <para>Populates the <varname>weatherService</varname>,
                        <varname>weatherDAO</varname>, and <varname>locationDAO</varname> with
                        beans from the Spring <classname>ApplicationContext</classname></para>
                </listitem>

                <listitem>
                    <para>Runs the appropriate method
                        <methodname>getWeather()</methodname> or
                        <methodname>getHistory()</methodname> depending on the specified
                        operation.</para>
                </listitem>
            </itemizedlist>

            <para>In the web application we use Spring
                <classname>VelocityViewResolver</classname> to render a Velocity template.
                In the stand-alone implementation, we need to write a simple class which
                renders our weather data with a Velocity template. <xref
                                                                        linkend="ex-spring-weather-formatter" /> is a listing of the
                <classname>WeatherFormatter</classname>, a class with two methods that
                render the weather report and the weather history.</para>

            <example id="ex-spring-weather-formatter">
                <title>WeatherFormatter Renders Weather Data using a Velocity
                    Template</title>

                <programlisting language="java">package org.sonatype.mavenbook.weather;

                    import java.io.InputStreamReader;
                    import java.io.Reader;
                    import java.io.StringWriter;
                    import java.util.List;

                    import org.apache.log4j.Logger;
                    import org.apache.velocity.VelocityContext;
                    import org.apache.velocity.app.Velocity;

                    import org.sonatype.mavenbook.weather.model.Location;
                    import org.sonatype.mavenbook.weather.model.Weather;

                    public class WeatherFormatter {

                    private static Logger log = Logger.getLogger(WeatherFormatter.class);

                    public String formatWeather( Weather weather ) throws Exception {
                    log.info( "Formatting Weather Data" );
                    Reader reader = 
                    new InputStreamReader( getClass().getClassLoader().
                    getResourceAsStream("weather.vm"));
                    VelocityContext context = new VelocityContext();
                    context.put("weather", weather );
                    StringWriter writer = new StringWriter();
                    Velocity.evaluate(context, writer, "", reader);
                    return writer.toString();
                    }

                    public String formatHistory( Location location, List&lt;Weather&gt; weathers )  
                    throws Exception {
                    log.info( "Formatting History Data" );
                    Reader reader = 
                    new InputStreamReader( getClass().getClassLoader().
                    getResourceAsStream("history.vm"));
                    VelocityContext context = new VelocityContext();
                    context.put("location", location );
                    context.put("weathers", weathers );
                    StringWriter writer = new StringWriter();
                    Velocity.evaluate(context, writer, "", reader);
                    return writer.toString();
                    }
                    }
                </programlisting>
            </example>

            <para>The <filename>weather.vm</filename> template simply prints the zip
                code's city, country, and region as well as the current temperature. The
                <filename>history.vm</filename> template prints the location and then
                iterates through the weather forecast records stored in the local
                database. Both of these templates are in
                <filename>\${basedir}/src/main/resources</filename>.</para>

            <example>
                <title>The weather.vm Velocity Template</title>

                <programlisting language="java">****************************************
                    Current Weather Conditions for:
                    \${weather.location.city},
                    \${weather.location.region},
                    \${weather.location.country}
                    ****************************************

                    * Temperature: \${weather.condition.temp}
                    * Condition: \${weather.condition.text}
                    * Humidity: \${weather.atmosphere.humidity}
                    * Wind Chill: \${weather.wind.chill}
                    * Date: \${weather.date}
                </programlisting>
            </example>

            <example>
                <title>The history.vm Velocity Template</title>

                <para><programlisting>Weather History for:
                        \${location.city},
                        \${location.region},
                        \${location.country}


                        #foreach( $weather in $weathers )
                        ****************************************
                        * Temperature: $weather.condition.temp
                        * Condition: $weather.condition.text
                        * Humidity: $weather.atmosphere.humidity
                        * Wind Chill: $weather.wind.chill
                        * Date: $weather.date
                        #end</programlisting></para>
            </example>
        </section>

        <section id="multimodule-web-spring-sect-running-simple-command">
            <title>Running the Simple Command</title>

            <para>The <varname>simple-command</varname> project is configured to
                create a single <acronym>JAR</acronym> containing the bytecode of the
                project and all of the bytecode from the dependencies. To create this
                assembly, run the <varname>assembly</varname> goal of the Maven Assembly
                plugin from the <varname>simple-command</varname> project
                directory:</para>

            <screen>$ <command>mvn assembly:assembly</command>
                [INFO] ------------------------------------------------------------------------
                [INFO] Building Multi-spring Chapter Simple Command Line Tool
                [INFO]    task-segment: [assembly:assembly] (aggregator-style)
                [INFO] ------------------------------------------------------------------------
                [INFO] [resources:resources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:compile]
                [INFO] Nothing to compile - all classes are up to date
                [INFO] [resources:testResources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:testCompile]
                [INFO] Nothing to compile - all classes are up to date
                [INFO] [surefire:test]
                ...
                [INFO] [jar:jar]
                [INFO] Building jar: .../simple-parent/simple-command/target/simple-command.jar
                [INFO] [assembly:assembly]
                [INFO] Processing DependencySet (output=)
                [INFO] Building jar: .../simple-parent/simple-command/target
                /simple-command-jar-with-dependencies.jar
            </screen>

            <para>The build progresses through the lifecycle compiling bytecode,
                running tests, and finally building a <acronym>JAR</acronym> for the
                project. Then the <varname>assembly:assembly</varname> goal creates a
                <acronym>JAR</acronym> with dependencies by unpacking all of the
                dependencies to temporary directories and then collecting all of the
                bytecode into a single <acronym>JAR</acronym> in
                <filename>target/</filename> named
                <filename>simple-command-jar-with-dependencies.jar</filename>. This "uber"
                <acronym>JAR</acronym> weighs in at 15 MB.</para>

            <para>Before you run the command-line tool, you will need to invoke the
                <varname>hbm2ddl</varname> goal of the Hibernate3 plugin to create the
                HSQLDB database. Do this by running the following command from the
                <varname>simple-command</varname> directory:</para>

            <para><screen>$ <command>mvn hibernate3:hbm2ddl</command>
                    [INFO] Scanning for projects...
                    [INFO] Searching repository for plugin with prefix: 'hibernate3'.
                    [INFO] org.codehaus.mojo: checking for updates from central
                    [INFO] ------------------------------------------------------------------------
                    [INFO] Building Multi-spring Chapter Simple Command Line Tool
                    [INFO]    task-segment: [hibernate3:hbm2ddl]
                    [INFO] ------------------------------------------------------------------------
                    [INFO] Preparing hibernate3:hbm2ddl
                    ...
                    10:24:56,151  INFO org.hibernate.tool.hbm2ddl.SchemaExport - export complete
                    [INFO] ------------------------------------------------------------------------
                    [INFO] BUILD SUCCESSFUL
                    [INFO] ------------------------------------------------------------------------
                </screen>Once you run this, you should see a <filename>data/</filename>
                directory under <varname>simple-command</varname>. This
                <filename>data/</filename> directory holds the HSQLDB database. To run the
                command-line weather forecaster, run the following from the
                <filename>simple-command/</filename> project directory:</para>

            <screen>$ <command>java -cp target/simple-command-jar-with-dependencies.jar \
                    org.sonatype.mavenbook.weather.Main 60202</command>
                2321 INFO  YahooRetriever  - Retrieving Weather Data
                2489 INFO  YahooParser  - Creating XML Reader
                2581 INFO  YahooParser  - Parsing XML Response
                2875 INFO  WeatherFormatter  - Formatting Weather Data
                ****************************************
                Current Weather Conditions for:
                Evanston, 
                IL, 
                US
                ****************************************
                
                * Temperature: 75
                * Condition: Partly Cloudy
                * Humidity: 64
                * Wind Chill: 75
                * Date: Wed Aug 06 09:35:30 CDT 2008
            </screen>

            <para>To run a history query, execute the following command:</para>

            <screen>$ <command>java -cp target/simple-command-jar-with-dependencies.jar \
                    org.sonatype.mavenbook.weather.Main 60202 history</command>
                2470 INFO  WeatherFormatter  - Formatting History Data
                Weather History for: 
                Evanston, IL, US
                
                ****************************************
                * Temperature: 39
                * Condition: Heavy Rain
                * Humidity: 93
                * Wind Chill: 36
                * Date: 2007-12-02 13:45:27.187
                ****************************************
                * Temperature: 75
                * Condition: Partly Cloudy
                * Humidity: 64
                * Wind Chill: 75
                * Date: 2008-08-06 09:24:11.725
                ****************************************
                * Temperature: 75
                * Condition: Partly Cloudy
                * Humidity: 64
                * Wind Chill: 75
                * Date: 2008-08-06 09:27:28.475 </screen>
        </section>

        <section id="multimodule-web-spring-sect-conclusion">
            <title>Conclusion</title>

            <para>We've spent a great deal of time on topics not directly related
                Maven to get this far. We've done this to present a complete and
                meaningful example project which you can use to implement real-world
                systems. We didn't take any short-cuts to produce slick, canned results
                quickly, and we're not going to dazzle you with some Ruby on Rails-esque
                wizardry and lead you to believe that you can create a finished Java
                Enterprise application in "10 easy minutes!" There's too much of this in
                the market, there are too many people trying to sell you the easiest
                framework that requires zero investment of time or attention. What we're
                trying to do in this chapter is present the entire picture, the entire
                ecosystem of a multi-module build. What we've done is present Maven in the
                context of a application which resembles something you could see in the
                wild—not the fast-food, 10 minute screen-cast that slings mud at Apache
                Ant and tries to convince you to adopt Apache Maven.</para>

            <para>If you walk away from this chapter wondering what it has to do with
                Maven, we've succeeded. We present a complex set of projects, using
                popular frameworks, and we tie them together using declarative builds. The
                fact that more than 60% of this chapter was spent explaining Spring and
                Hibernate should tell you that Maven, for the most part, stepped out of
                the way. It worked. It allowed us to focus on the application itself, not
                on the build process. Instead of spending time discussing Maven, and the
                work you would have to do to "build a build" that integrated with Spring
                and Hibernate, we talked almost exclusively about the technologies used in
                this contrived project. If you start to use Maven, and you take the time
                to learn it, you really do start to benefit from the fact that you don't
                have to spend time coding up some procedural build script. You don't have
                to spend your time worrying about mundane aspects of your build.</para>

            <para>You can use the skeleton project introduced in this chapter as the
                foundation for your own, and chances are that when you do, you'll find
                yourself creating more and more modules as you need them. For example, the
                project on which this chapter was based has two distinct model projects,
                two persistence projects which persist to dramatically different
                databases, several web applications, and a Java mobile application. In
                total, the real world system I based this on contains at least 15
                interrelated modules. The point is that, you've seen the most complex
                multi-module example we're going to include in this book, but you should
                also know that this example just scratches the surface of what is possible
                with Maven.</para>

            <section id="multimodule-web-spring-sect-interface-projects">
                <title>Programming to Interface Projects</title>

                <para>This chapter explored a multi-module project which was more
                    complex than the simple example presented in <xref
                                                                      linkend="multimodule" />, yet it was still a simplification of a
                    real-world project. In a larger project, you might find yourself
                    building a system resembling <xref
                                                      linkend="fig-multimodule-web-spring-projects-complex" />.i<indexterm>
                        <primary>interface projects</primary>
                </indexterm></para>

                <figure id="fig-multimodule-web-spring-projects-complex">
                    <title>Programming to Interface Projects</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/multimodule-web-spring_projects-complex.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/multimodule-web-spring_projects-complex.pdf"
                                       scalefit="0" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

                <para>When we use the term interface project we are referring to a Maven
                    project which contains interfaces and constants only. In <xref
                                                                                  linkend="fig-multimodule-web-spring-projects-complex" /> the interface
                    projects would be <varname>persist-api</varname> and
                    <varname>parse-api</varname>. If <varname>big-command</varname> and
                    <varname>big-webapp</varname> are written to the interfaces defined in
                    <varname>persist-api</varname>, then it is very easy to just swap in
                    another implementation of the persistence library. This particular
                    diagram shows two implementations of the <varname>persist-api</varname>
                    project, one which stores data in an <acronym>XML</acronym> database,
                    and the other which stores data in a relational database. If you use
                    some of the concepts in this chapter, you can see how you could just
                    pass in a flag to the program that swaps in a different Spring
                    application context <acronym>XML</acronym> file to swap out data sources
                    of persistence implementations. Just like the OO design of the
                    application itself, it is often wise to separate the interfaces of an
                    <acronym>API</acronym> from the implementation of the API into separate
                    Maven projects.</para>
            </section>
        </section>
    </chapter>

    <chapter id="optimizing">
        <title>Optimizing and Refactoring POMs</title>

        <section id="optimizing-sect-intro">
            <title>Introduction</title>

            <para>In <xref linkend="multimodule-web-spring" />, we showed how
                many<indexterm class="startofrange" id="optref1a">
                    <primary>POM (Project Object Model)</primary>

                    <secondary>optimizing and refactoring</secondary>
                </indexterm><indexterm class="startofrange" id="optref1b">
                    <primary>optimizing POMs</primary>
                </indexterm><indexterm>
                    <primary>refactoring POMs</primary>

                    <see>optimizing POMs</see>
                </indexterm><indexterm>
                    <primary>object model</primary>

                    <see>POM; pom.xml file</see>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>optimizing</secondary>

                    <see>optimizing POMs</see>
                </indexterm> pieces of Maven come together to produce a fully functional
                multimodule build. Although the example from that chapter suggests a real
                application—one that interacts with a database, a web service, and that
                itself presents two interfaces: one in a web application, and one on the
                command line—that example project is still contrived. To present the
                complexity of a real project would require a book far larger than the one
                you are now reading. Real-life applications evolve over years and are
                often maintained by large, diverse groups of developers, each with a
                different focus. In a real-world project, you are often evaluating
                decisions and designs made and created by others. In this chapter, we take
                a step back from the examples you’ve seen in the previous chapters, and we
                ask ourselves if there are any optimizations that might make more sense
                given what we now know about Maven. Maven is a very capable tool that can
                be as simple or as complex as you need it to be. Because of this, there
                are often a million ways to accomplish the same task, and there is often
                no one “right” way to configure your Maven project.</para>

            <para>Don't misinterpret that last sentence as a license to go off and ask
                Maven to do something it wasn't designed for. While Maven allows for a
                diversity of approach, there is certainly "A Maven Way", and you'll be
                more productive using Maven as it was designed to be used. All this
                chapter is trying to do is communicate some of the optimizations you can
                perform on an existing Maven project. Why didn't we just introduce an
                optimized <acronym>POM</acronym> in the first place? Designing
                <acronym>POM</acronym>s for pedagogy is a very different requirement from
                designing <acronym>POM</acronym>s for efficiency. While it is certainly
                much easier to define a certain setting in your
                <filename>~/.m2/settings.xml</filename> than to declare a profile in a
                <filename>pom.xml</filename>, writing a book, and reading a book is mostly
                about pacing and making sure we're not introducing concepts before you are
                ready. In the previous chapters, we've made an effort not to overwhelm the
                reader with too much information, and, in doing so, we've skipped some
                core concepts like the <sgmltag>dependencyManagement</sgmltag> element
                introduced in this chapter.</para>

            <para>There are many instances in the previous chapters when the authors
                of this book took a shortcut or glossed over an important detail to
                shuffle you along to the main point of a specific chapter. You learned how
                to create a Maven project, and you compiled and installed it without
                having to wade through hundreds of pages introducing every last switch and
                dial available to you. We’ve done this because we believe it is important
                to deliver the new Maven user to a result faster rather than meandering
                our way through a very long, seemingly interminable story. Once you’ve
                started to use Maven, you should know how to analyze your own projects and
                <acronym>POM</acronym>s. In this chapter, we take a step back and look at
                what we are left with after the example from <xref
                                                                  linkend="multimodule-web-spring" />.</para>
        </section>

        <section id="optimizing-sect-pom-cleanup">
            <title>POM Cleanup</title>

            <para>Optimizing a multimodule project’s <acronym>POM</acronym> is
                best<indexterm>
                    <primary>multimodule projects, optimizing POMs for</primary>
                </indexterm><indexterm>
                    <primary>POM (Project Object Model)</primary>

                    <secondary>optimizing and refactoring</secondary>

                    <tertiary>about cleaning up POMs</tertiary>
                </indexterm><indexterm>
                    <primary>optimizing POMs</primary>

                    <secondary>about cleaning up POMs</secondary>
                </indexterm><indexterm>
                    <primary>cleaning up POMs</primary>

                    <seealso>optimizing POMs</seealso>
                </indexterm> done in several passes, as there are many areas to focus
                on. In general, we are looking for repetition within a
                <acronym>POM</acronym> and across the sibling <acronym>POM</acronym>s.
                When you are starting out, or when a project is still evolving rapidly, it
                is acceptable to duplicate some dependencies and plugin configurations
                here and there, but as the project matures and as the number of modules
                increases, you will want to take some time to refactor common dependencies
                and configuration points. Making your <acronym>POM</acronym>s more
                efficient will go a long way to helping you manage complexity as your
                project grows. Whenever there is duplication of some piece of information,
                there is usually a better way.</para>
        </section>

        <section id="optimizing-sect-dependencies">
            <title>Optimizing Dependencies</title>

            <para>If you look through the various <acronym>POM</acronym>s<indexterm
                                                                              class="startofrange" id="optref2a">
                    <primary>POM (Project Object Model)</primary>

                    <secondary>optimizing and refactoring</secondary>

                    <tertiary>dependency optimization</tertiary>
                </indexterm><indexterm class="startofrange" id="optref2b">
                    <primary>optimizing POMs</primary>

                    <secondary>dependency optimization</secondary>
                </indexterm><indexterm class="startofrange" id="optref2c">
                    <primary>dependencies</primary>

                    <secondary>optimizing</secondary>
                </indexterm> created in <xref linkend="multimodule-web-spring" />, note
                several patterns of replication. The first pattern we can see is that some
                dependencies such as <varname>spring</varname> and
                <varname>hibernate-annotations</varname> are declared in several modules.
                The <varname>hibernate</varname> dependency also has the exclusion on
                <package>javax.transaction</package> replicated in each definition.
                The<indexterm>
                    <primary>duplicated dependency declarations</primary>
                </indexterm><indexterm>
                    <primary>replicated dependencies</primary>
                </indexterm> second pattern of duplication to note is that sometimes
                several dependencies are related and share the same version. This is often
                the case when a project’s release consists of several closely coupled
                components. For example, look at the dependencies on
                <varname>hibernate-</varname><varname>annotations</varname> and
                <varname>hibernate-commons-annotations</varname>. Both are listed as
                version <varname>3.3.0.ga</varname>, and we can expect the versions of
                both these dependencies to change together going forward. Both the
                <varname>hibernate-annotations</varname> and
                <varname>hibernate-commons-annotations</varname> are components of the
                same project released by JBoss, and so when there is a new project
                release, both of these dependencies will change. The third and last
                pattern of duplication is the<indexterm>
                    <primary>sibling module dependency duplication</primary>
                </indexterm> duplication of sibling module dependencies and sibling
                module versions. Maven provides simple mechanisms that let you factor all
                of this<indexterm>
                    <primary>POM (Project Object Model)</primary>

                    <secondary>parent (top-level)</secondary>

                    <tertiary>resolving dependency duplication</tertiary>
                </indexterm><indexterm>
                    <primary>top-level POM</primary>

                    <secondary>resolving dependency duplication</secondary>
                </indexterm><indexterm>
                    <primary>parent POM</primary>

                    <secondary>resolving dependency duplication</secondary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>parent (top-level)</secondary>

                    <tertiary>resolving dependency duplication</tertiary>
                </indexterm> duplication into a parent <acronym>POM</acronym>.</para>

            <para>Just as in your project’s source code, any time you have duplication
                in your <acronym>POM</acronym>s, you open the door a bit for trouble down
                the road. Duplicated dependency declarations make it difficult to ensure
                consistent versions across a large project. When you only have two or
                three modules, this might not be a primary issue, but when your
                organization is using a large, multimodule Maven build to manage hundreds
                of components across multiple departments, one single mismatch between
                dependencies can cause chaos and confusion. A simple version mismatch in a
                project’s dependency on a bytecode <phrase
                                                        role="keep-together">manipulation</phrase> package called
                <acronym>ASM</acronym> three levels deep in the project hierarchy could
                throw a wrench into a web application maintained by a completely different
                group of developers who depend on that particular<indexterm>
                    <primary>unit tests</primary>

                    <secondary>dependency duplication and</secondary>
                </indexterm> module. Unit tests could pass because they are being run
                with one version of a dependency, but they could fail disastrously in
                production where the bundle (WAR, in this case) was packaged up with a
                different version. If you have tens of projects using something like
                Hibernate Annotations, each repeating and duplicating the dependencies and
                exclusions, the mean time between someone screwing up a build is going to
                be very short. As your Maven projects become more complex, your dependency
                lists are going to grow, and you are going to want to consolidate versions
                and dependency declarations in parent <acronym>POM</acronym>s.</para>

            <para>The duplication of the sibling module versions can introduce
                a<indexterm>
                    <primary>sibling module dependency duplication</primary>
                </indexterm> particularly nasty problem that is not directly caused by
                Maven and is learned only after you’ve been bitten by this bug a few
                times. If you use the Maven Release plugin to perform your releases, all
                these sibling dependency versions will be updated automatically for you,
                so maintaining them is not the concern. If <varname>simple-web</varname>
                version <varname>1.3-SNAPSHOT</varname> depends on
                <varname>simple-persist</varname> version <varname>1.3-SNAPSHOT</varname>,
                and if you are performing a release of the 1.3 version of both projects,
                the Maven Release plugin is smart enough to change the versions throughout
                your multimodule project’s <acronym>POM</acronym>s automatically. Running
                the release with the Release plugin will automatically increment all of
                the versions in your build to <varname>1.4-SNAPSHOT</varname>, and the
                release plugin will commit the code change to the repository. Releasing a
                huge multimodule project couldn’t be easier, until...</para>

            <para>Problems occur when developers merge changes to the<indexterm>
                    <primary>merging POM changes</primary>
                </indexterm><indexterm>
                    <primary>POM (Project Object Model)</primary>

                    <secondary>merging POMs</secondary>
                </indexterm> <acronym>POM</acronym> and interfere with a release that is
                in progress. Often a developer merges and occasionally mishandles the
                conflict on the sibling dependency, inadvertently reverting that version
                to a previous release. Since the consecutive versions of the dependency
                are often compatible, it does not show up when the developer builds, and
                won’t show up in any continuous integration build system as a failed
                build. Imagine a very complex build where the trunk is full of components
                at <varname>1.4-SNAPSHOT</varname>, and now imagine that Developer A has
                updated Component A deep within the project’s hierarchy to depend on
                version <varname>1.3-SNAPSHOT</varname> of Component B. Even though most
                developers have <varname>1.4-SNAPSHOT</varname>, the build succeeds if
                version <varname>1.3-SNAPSHOT</varname> and
                <varname>1.4-SNAPSHOT</varname> of Component B are compatible. Maven
                continues to build the project using the <varname>1.3-SNAPSHOT</varname>
                version of Component B from the developer’s local repositories. Everything
                seems to be going quite smoothly—the project builds, the continuous
                integration build works fine, and so on. Someone might have a mystifying
                bug related to Component B, but she chalks it up to malevolent gremlins
                and moves on. Meanwhile, a pump in the reactor room is steadily building
                up pressure, until something blows....</para>

            <para>Someone, let's call them Mr. Inadvertent, had a merge conflict in
                component A, and mistakenly pegged component A's dependency on component B
                to <varname>1.3-SNAPSHOT</varname> while the rest of the project marches
                on. A bunch of developers have been trying to fix a bug in component B all
                this time and they've been mystified as to why they can't seem to fix the
                bug in production. Eventually someone looks at component A and realizes
                that the dependency is pointing to the wrong version. Hopefully, the bug
                wasn't large enough to cost money or lives, but Mr. Inadvertent feels
                stupid and people tend to trust him a little less than they did before the
                whole sibling dependency screw-up. (Hopefully, Mr. Inadvertent realizes
                that this was user error and not Maven's fault, but more than likely he
                starts an awful blog and complains about Maven endlessly to make himself
                feel better.)</para>

            <para>Fortunately, dependency duplication and sibling dependency mismatch
                are easily preventable if you make some small changes. The first thing
                we’re going to do is find all the dependencies used in more than one
                project and move them up to the parent <acronym>POM</acronym>’s
                <sgmltag>dependencyManagement</sgmltag> section. We’ll leave out the
                sibling dependencies for now. The <varname>simple-parent</varname> pom now
                contains the following:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;dependencyManagement&gt;
                &lt;dependencies&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;artifactId&gt;spring&lt;/artifactId&gt;
                &lt;version&gt;2.0.7&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                &lt;version&gt;1.5&lt;/version&gt;
                &lt;/dependency&gt;  
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                &lt;version&gt;3.3.0.ga&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                &lt;version&gt;3.3.0.ga&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                &lt;version&gt;3.2.5.ga&lt;/version&gt;
                &lt;exclusions&gt;
                &lt;exclusion&gt;
                &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
                &lt;artifactId&gt;jta&lt;/artifactId&gt;
                &lt;/exclusion&gt;
                &lt;/exclusions&gt;
                &lt;/dependency&gt;
                &lt;/dependencies&gt;
                &lt;/dependencyManagement&gt;
                ...
                &lt;/project&gt;</programlisting>

            <para>Once these are moved up, we need to remove the versions for these
                dependencies from each of the <acronym>POM</acronym>s; otherwise, they
                will override the <sgmltag>dependencyManagement</sgmltag> defined in the
                parent project. Let’s look at only <varname>simple-model</varname> for
                brevity’s sake:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;dependencies&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                &lt;/dependency&gt;
                &lt;/dependencies&gt;
                ...
                &lt;/project&gt;</programlisting>

            <para>The next thing we should do is fix the replication of the
                <varname>hibernate-annotations</varname> and
                <varname>hibernate-commons-annotations</varname> version since these
                should match. We’ll do this by creating a property called
                <varname>hibernate.annotations.version</varname>. The resulting
                <varname>simple-parent</varname> section looks like this:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;properties&gt;
                &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
                &lt;/properties&gt;

                &lt;dependencyManagement&gt;
                ...
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
                &lt;/dependency&gt;
                ...
                &lt;/dependencyManagement&gt;
                ...
                &lt;/project</programlisting>

            <para>The last issue we have to resolve is with the sibling
                dependencies.<indexterm>
                    <primary>sibling module dependency duplication</primary>
                </indexterm> One technique we could use is to move these up to the
                <sgmltag>dependencyManagement</sgmltag> section, just like all the
                others,<indexterm>
                    <primary>version attribute (pom.xml)</primary>

                    <secondary>built-in, to avoid dependency duplication</secondary>
                </indexterm><indexterm>
                    <primary>groupId attribute (pom.xml)</primary>

                    <secondary>built-in, to avoid dependency duplication</secondary>
                </indexterm><indexterm>
                    <primary>dependencies</primary>

                    <secondary>plugin</secondary>

                    <see>plugins</see>
                </indexterm> and define the versions of sibling projects in the
                top-level parent project. This is certainly a valid approach, but we can
                also solve the version problem just by using two built-in
                properties—<varname>\${project.groupId}</varname> and
                <varname>\${project.version}</varname>. Since they are sibling
                dependencies, there is not much value to be gained by enumerating them in
                the parent, so we’ll rely on the built-in
                <varname>\${project.version}</varname> property. Because they all share
                the same group, we can further future-proof these declarations by
                referring to the current <acronym>POM</acronym>’s group using the built-in
                <varname>\${project.groupId}</varname> property. The
                <varname>simple-command</varname> <phrase
                                                       role="keep-together">dependency</phrase> section now looks like
                this:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;dependencies&gt;
                ...
                &lt;dependency&gt;
                &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                &lt;version&gt;\${project.version}&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                &lt;version&gt;\${project.version}&lt;/version&gt;
                &lt;/dependency&gt;
                ...
                &lt;/dependencies&gt;
                ...
                &lt;/project&gt;</programlisting>

            <para>Here’s a summary of the two optimizations we completed that reduce
                duplication of dependencies:</para>

            <variablelist>
                <varlistentry>
                    <term role="plain">Pull-up common dependencies to
                        <sgmltag>dependencyManagement</sgmltag></term>

                    <listitem>
                        <para>If more than one project depends on a specific dependency, you
                            can list the dependency in <sgmltag>dependencyManagement</sgmltag>.
                            The parent <acronym>POM</acronym> can contain a version and a set of
                            exclusions; all the child <acronym>POM</acronym> needs to do to
                            reference this dependency is use the <varname>groupId </varname>and
                            <varname>artifactId</varname>. Child projects can omit the version
                            and exclusions if the dependency is listed in
                            <sgmltag>dependencyManagement</sgmltag>.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="plain">Use built-in project <literal>version</literal> and
                        <literal>groupId</literal> for sibling projects</term>

                    <listitem>
                        <para>Use $<varname>{project.version}</varname> and
                            <varname>\${project.groupId}</varname> when referring to a sibling
                            project. Sibling projects almost always share the same
                            <literal>groupId</literal>, and they almost always share the same
                            release version. Using <varname>\${project.version}</varname> will
                            help you avoid the <indexterm class="endofrange"
                                                          startref="optref2a"></indexterm><indexterm class="endofrange"
                                                                                                     startref="optref2b"></indexterm><indexterm class="endofrange"
                                                                                                                                                startref="optref2c"></indexterm>sibling version mismatch problem
                            discussed previously.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="optimizing-sect-plugins">
            <title>Optimizing Plugins</title>

            <para>If we take a look at the various plugin configurations, we can
                see<indexterm class="startofrange" id="optref3a">
                    <primary>POM (Project Object Model)</primary>

                    <secondary>optimizing and refactoring</secondary>

                    <tertiary>plugin optimization</tertiary>
                </indexterm><indexterm class="startofrange" id="optref3b">
                    <primary>optimizing POMs</primary>

                    <secondary>plugin optimization</secondary>
                </indexterm><indexterm class="startofrange" id="optref3c">
                    <primary>plugins</primary>

                    <secondary>optimizing</secondary>
                </indexterm> the <acronym>HSQLDB</acronym> dependencies duplicated in
                several places. Unfortunately, <sgmltag>dependencyManagement</sgmltag>
                doesn’t apply to plugin dependencies, but we can still use a property to
                consolidate the versions. Most complex Maven multimodule projects tend to
                define all versions in the top-level <acronym>POM</acronym>. This
                top-level <acronym>POM</acronym> then becomes a focal point for changes
                that affect the entire project. Think of version numbers as string
                literals in a Java class; if you are constantly repeating a literal,
                you’ll likely want to make it a variable so that when it needs to be
                changed, you have to change it in only one place. Rolling up the version
                of <acronym>HSQLDB</acronym> into a property in the top-level
                <acronym>POM</acronym> yields the following <literal>properties</literal>
                element:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;properties&gt;
                &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
                &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
                &lt;/properties&gt;
                ...
                &lt;/project&gt;</programlisting>

            <para>The next thing we notice is that the
                <varname>hibernate3-maven-plugin</varname> configuration is duplicated in
                the <varname>simple-webapp</varname> and <varname>simple-command</varname>
                modules. We can manage the plugin configuration in the top-level
                <acronym>POM</acronym> just as we managed the dependencies in the
                top-level <acronym>POM</acronym> with the
                <sgmltag>dependencyManagement</sgmltag> section. To do this, we use
                the<indexterm>
                    <primary
                         sortas="pluginManagement element (pom.xml)">&lt;pluginManagement&gt;
                        element (pom.xml)</primary>
                </indexterm> <sgmltag role="keep-together">pluginManagement</sgmltag>
                element in the top-level<indexterm class="endofrange"
                                                   startref="optref3a"></indexterm><indexterm class="endofrange"
                                                                                              startref="optref3b"></indexterm><indexterm class="endofrange"
                                                                                                                                         startref="optref3c"></indexterm> <acronym>POM</acronym>’s build
                element:</para>

            <programlisting language="xml">&lt;project&gt;
                ...
                &lt;build&gt;
                &lt;pluginManagement&gt;
                &lt;plugins&gt;
                &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                &lt;source&gt;1.5&lt;/source&gt;
                &lt;target&gt;1.5&lt;/target&gt;
                &lt;/configuration&gt;
                &lt;/plugin&gt;
                &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.1&lt;/version&gt;
                &lt;configuration&gt;
                &lt;components&gt;
                &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
                &lt;/component&gt;
                &lt;/components&gt;
                &lt;/configuration&gt;
                &lt;dependencies&gt;
                &lt;dependency&gt;
                &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;/dependencies&gt;
                &lt;/plugin&gt;
                &lt;/plugins&gt;
                &lt;/pluginManagement&gt;
                &lt;/build&gt;
                ...
                &lt;/project&gt;
            </programlisting>
        </section>

        <section id="optimizing-sect-dependency-plugin">
            <title>Optimizing with the Maven Dependency Plugin</title>

            <para>On larger projects, additional dependencies often tend to creep
                into<indexterm class="startofrange" id="optref4a">
                    <primary>POM (Project Object Model)</primary>

                    <secondary>optimizing and refactoring</secondary>

                    <tertiary sortas=" Maven Dependency plugin">with Maven Dependency
                        plugin</tertiary>
                </indexterm><indexterm class="startofrange" id="optref4b">
                    <primary>optimizing POMs</primary>

                    <secondary sortas="Maven Dependency plugin">Maven Dependency
                        plugin</secondary>
                </indexterm><indexterm class="startofrange" id="optref4c">
                    <primary>Maven Dependency plugin</primary>

                    <secondary>optimizing POMs with</secondary>
                </indexterm><indexterm class="startofrange" id="optref4d">
                    <primary>dependencies</primary>

                    <secondary>optimizing</secondary>

                    <tertiary>Maven Dependency plugin for</tertiary>
                </indexterm> a POM as the number of dependencies grow. As dependencies
                change, you are often left with dependencies that are not being used, and
                just as often, you may forget to declare explicit dependencies for
                libraries you require. Because Maven 2.x includes transitive dependencies
                in the compile scope, your project may compile properly but fail to run in
                production. Consider a case where a project uses classes from a widely
                used project such as Jakarta Commons BeanUtils. Instead of declaring an
                explicit dependency on <phrase role="keep-together">BeanUtils</phrase>,
                your project simply relies on a project like Hibernate that references
                BeanUtils as a transitive dependency. Your project may compile
                successfully and run just fine, but if you upgrade to a new version of
                Hibernate that doesn’t depend on BeanUtils, you’ll start to get compile
                and runtime errors, and it won’t be immediately obvious why your project
                stopped compiling. Also, because you haven’t explicitly listed a
                dependency version, Maven cannot resolve any version conflicts that may
                arise.</para>

            <para>A good rule of thumb in Maven is to always declare explicit
                dependencies for classes referenced in your code. If you are going to be
                importing Commons BeanUtils classes, you should also be declaring a direct
                dependency on Commons BeanUtils. Fortunately, via bytecode analysis, the
                Maven Dependency plugin is able to assist you in uncovering direct
                references to dependencies. Using the updated POMs we previously
                optimized, let’s look to see if any errors pop up:</para>

            <screen>$ <command>mvn dependency:analyze</command>
                [INFO] Scanning for projects...
                [INFO] Reactor build order:
                [INFO]   Chapter 8 Simple Parent Project
                [INFO]   Chapter 8 Simple Object Model
                [INFO]   Chapter 8 Simple Weather API
                [INFO]   Chapter 8 Simple Persistence API
                [INFO]   Chapter 8 Simple Command Line Tool
                [INFO]   Chapter 8 Simple Web Application
                [INFO]   Chapter 8 Parent Project
                [INFO] Searching repository for plugin with prefix: 'dependency'.

                ...

                [INFO] ------------------------------------------------------------------------
                [INFO] Building Chapter 8 Simple Object Model
                [INFO]    task-segment: [dependency:analyze]
                [INFO] ------------------------------------------------------------------------
                [INFO] Preparing dependency:analyze
                [INFO] [resources:resources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:compile]
                [INFO] Nothing to compile - all classes are up to date
                [INFO] [resources:testResources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:testCompile]
                [INFO] Nothing to compile - all classes are up to date
                [INFO] [dependency:analyze]
                [WARNING] Used undeclared dependencies found:
                [WARNING]    javax.persistence:persistence-api:jar:1.0:compile
                [WARNING] Unused declared dependencies found:
                [WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
                [WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
                [WARNING]    junit:junit:jar:3.8.1:test

                ...

                [INFO] ------------------------------------------------------------------------
                [INFO] Building Chapter 8 Simple Web Application
                [INFO]    task-segment: [dependency:analyze]
                [INFO] ------------------------------------------------------------------------
                [INFO] Preparing dependency:analyze
                [INFO] [resources:resources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:compile]
                [INFO] Nothing to compile - all classes are up to date
                [INFO] [resources:testResources]
                [INFO] Using default encoding to copy filtered resources.
                [INFO] [compiler:testCompile]
                [INFO] No sources to compile
                [INFO] [dependency:analyze]
                [WARNING] Used undeclared dependencies found:
                [WARNING]    org.sonatype.mavenbook.optimize:simple-model:jar:1.0:compile
                [WARNING] Unused declared dependencies found:
                [WARNING]    org.apache.velocity:velocity:jar:1.5:compile
                [WARNING]    javax.servlet:jstl:jar:1.1.2:compile
                [WARNING]    taglibs:standard:jar:1.1.2:compile
                [WARNING]    junit:junit:jar:3.8.1:test</screen>

            <para>In the truncated output just shown, you can see the output of
                the<indexterm>
                    <primary>Dependency plugin</primary>

                    <secondary>analyze goal</secondary>
                </indexterm><indexterm>
                    <primary>Maven Dependency plugin</primary>

                    <secondary>analyze goal</secondary>
                </indexterm> <varname>dependency:</varname><varname>analyze</varname>
                goal. This goal analyzes the project to see whether there are any indirect
                dependencies, or dependencies that are being referenced but are not
                directly declared. In the <varname>simple-model</varname> project, the
                Dependency plugin indicates a “used undeclared dependency” on
                <varname>javax.persistence:persistence-api</varname>. To investigate
                further, go to the <varname>simple-model</varname> directory and run the
                <varname>dependency:tree</varname> goal, which will list all of the
                project’s direct and transitive dependencies:</para>

            <screen>$ <command>mvn dependency:tree</command>
                [INFO] Scanning for projects...
                [INFO] Searching repository for plugin with prefix: 'dependency'.
                [INFO] ------------------------------------------------------------------------
                [INFO] Building Chapter 8 Simple Object Model
                [INFO]    task-segment: [dependency:tree]
                [INFO] ------------------------------------------------------------------------
                [INFO] [dependency:tree]
                [INFO] org.sonatype.mavenbook.optimize:simple-model:jar:1.0
                [INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
                [INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
                [INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
                [INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
                [INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
                [INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
                [INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
                [INFO] |  +- antlr:antlr:jar:2.7.6:compile
                [INFO] |  +- cglib:cglib:jar:2.1_3:compile
                [INFO] |  +- asm:asm:jar:1.5.3:compile
                [INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
                [INFO] \- junit:junit:jar:3.8.1:test
                [INFO] ------------------------------------------------------------------------
                [INFO] BUILD SUCCESSFUL
                [INFO] ------------------------------------------------------------------------
            </screen>

            <para>From this output, we can see that the
                <varname>persistence-api</varname> dependency is coming from
                <varname>hibernate</varname>. A cursory scan of the source in this module
                will reveal many <varname>javax.</varname><varname>persistence</varname>
                import statements confirming that we are, indeed, directly referencing
                this dependency. The simple fix is to add a direct reference to the
                dependency. In this example, we put the dependency version in
                <varname>simple-parent</varname>’s <sgmltag>dependencyManagement</sgmltag>
                section because the dependency is linked to Hibernate, and the Hibernate
                version is declared here. Eventually you are going to want to upgrade your
                project’s version of Hibernate. Listing the
                <varname>persistence-api</varname> dependency version near the Hibernate
                dependency version will make it more obvious later when your team modifies
                the parent <acronym>POM</acronym> to upgrade the Hibernate version.</para>

            <para>If you look at the <varname>dependency:analyze</varname> output from
                the <varname>simple-web</varname> module, you will see that we also need
                to add a direct reference to the <varname>simple-model</varname>
                dependency. The code in <varname>simple-webapp</varname> directly
                references the model objects in <varname>simple-model</varname>, and the
                <varname>simple-model</varname> is exposed to
                <varname>simple-webapp</varname> as a transitive dependency via
                <varname>simple-persist</varname>. Since this is a sibling dependency that
                shares both the <varname>version</varname> and <varname>groupId</varname>,
                the dependency can be defined in <varname>simple-webapp</varname>’s
                <filename moreinfo="none">pom.xml</filename> using the
                <varname>\${project.groupId}</varname> and <varname
                                                                role="keep-together">\${project.version}</varname>.</para>

            <para>How did the Maven Dependency plugin uncover these issues? How does
                <varname role="keep-together">dependency:analyze</varname> know which
                classes and dependencies are directly referenced by your project’s
                bytecode? The Dependency plugin uses the ObjectWeb ASM (<ulink
                                                                             url="http://asm.objectweb.org/">http://asm.objectweb.org/</ulink>)
                <indexterm>
                    <primary>ObjectWeb ASM toolkit</primary>
                </indexterm><indexterm>
                    <primary>bytecode analysis (Dependency plugin)</primary>
                </indexterm>toolkit to analyze the raw bytecode. The Dependency plugin
                uses ASM to walk through all the classes in the current project, and it
                builds a list of every other class referenced. It then walks through all
                the dependencies, direct and transitive, and marks off the classes
                discovered in the direct dependencies. Any classes not located in the
                direct dependencies are discovered in the transitive dependencies, and the
                list<indexterm>
                    <primary>used, undeclared dependencies (Dependency plugin)</primary>
                </indexterm> of “used, undeclared dependencies” is produced.</para>

            <para>In contrast, the list of unused, declared dependencies is a
                little<indexterm>
                    <primary>unused, undeclared dependencies (Dependency plugin)</primary>
                </indexterm> trickier to validate, and less useful than the “used,
                undeclared dependencies.” For one, some dependencies are used only at
                runtime or for tests, and they won’t be found in the bytecode. These are
                pretty obvious when you see them in the output; for example, JUnit appears
                in this list, but this is expected because it is used only for unit tests.
                You’ll also notice that the Velocity and Servlet API dependencies are
                listed in this list for the <literal>simple-web</literal> module. This is
                also expected because, although the project doesn’t have any direct
                references to the classes of these artifacts, they are still essential
                during runtime.</para>

            <para>Be careful when removing any unused, declared dependencies unless
                you have very good test coverage, or you might introduce a runtime error.
                A more sinister issue pops up with bytecode optimization. For example, it
                is legal for a compiler to substitute the value of a constant and optimize
                away the reference. Removing this dependency will cause the compile to
                fail, yet the tool shows it as unused. Future versions of the Maven
                Dependency plugin will provide better techniques for detecting and/or
                ignoring these types of issues.</para>

            <para>You should use the <varname>dependency:analyze</varname> tool
                periodically to detect these common errors in your projects. It can be
                configured to fail the build if certain conditions are found, and it is
                <indexterm class="endofrange" startref="optref4a"></indexterm><indexterm
                                                                                   class="endofrange" startref="optref4b"></indexterm><indexterm
                                                                                                                                           class="endofrange" startref="optref4c"></indexterm><indexterm
                                                                                                                                                                                                   class="endofrange" startref="optref4d"></indexterm>also available as a
                report.</para>
        </section>

        <section id="optimizing-sect-final-poms">
            <title>Final POMs</title>

            <para>As an overview, the final <acronym>POM</acronym> files are<indexterm>
                    <primary>simple-parent POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-parent POM</tertiary>
                </indexterm><indexterm>
                    <primary>simple parent project (example)</primary>

                    <secondary>final POM for (for reference)</secondary>
                </indexterm> listed as a reference for this chapter. <xref
                                                                          linkend="ex-final-pom-for-simple-parent" /> shows the top-level
                <acronym>POM</acronym> for <varname>simple-parent</varname>.</para>

            <example id="ex-final-pom-for-simple-parent">
                <title>Final POM for simple-parent</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;packaging&gt;pom&lt;/packaging&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
                    
                    &lt;modules&gt;
                    &lt;module&gt;simple-command&lt;/module&gt;
                    &lt;module&gt;simple-model&lt;/module&gt;
                    &lt;module&gt;simple-weather&lt;/module&gt;
                    &lt;module&gt;simple-persist&lt;/module&gt;
                    &lt;module&gt;simple-webapp&lt;/module&gt;
                    &lt;/modules&gt;

                    &lt;build&gt;
                    &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;2.1&lt;/version&gt;
                    &lt;configuration&gt;
                    &lt;components&gt;
                    &lt;component&gt;
                    &lt;name&gt;hbm2ddl&lt;/name&gt;
                    &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
                    &lt;/component&gt;
                    &lt;/components&gt;
                    &lt;/configuration&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/pluginManagement&gt; 
                    &lt;/build&gt;

                    &lt;properties&gt;
                    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
                    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
                    &lt;/properties&gt;
                    &lt;dependencyManagement&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;version&gt;2.0.7&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;version&gt;1.5&lt;/version&gt;
                    &lt;/dependency&gt;  
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
                    &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                    &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                    &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                    &lt;version&gt;3.2.5.ga&lt;/version&gt;
                    &lt;exclusions&gt;
                    &lt;exclusion&gt;
                    &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
                    &lt;artifactId&gt;jta&lt;/artifactId&gt;
                    &lt;/exclusion&gt;
                    &lt;/exclusions&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/dependencyManagement&gt;
                    
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;      </programlisting>
            </example>

            <para>The <acronym>POM</acronym> shown in <xref
                                                           linkend="ex-final-pom-for-simple-command" /> captures the<indexterm>
                    <primary>simple-command POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-command POM</tertiary>
                </indexterm> <acronym>POM</acronym> for
                <varname>simple-command</varname>, the command-line version of the
                tool.</para>

            <example id="ex-final-pom-for-simple-command">
                <title>Final POM for simple-command</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;

                    &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

                    &lt;build&gt;
                    &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;archive&gt;
                    &lt;manifest&gt;
                    &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                    &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                    &lt;/manifest&gt;
                    &lt;/archive&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;descriptorRefs&gt;
                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                    &lt;/descriptorRefs&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/pluginManagement&gt;
                    &lt;/build&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;/dependency&gt;    
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>The <acronym>POM</acronym> shown in <xref
                                                           linkend="ex-final-pom-for-simple-model" /> is the<indexterm>
                    <primary>simple-model POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-model POM</tertiary>
                </indexterm> <varname>simple-model</varname> project’s
                <acronym>POM</acronym>. The <varname>simple-model</varname> project
                contains all of the model objects used throughout the application.</para>

            <example id="ex-final-pom-for-simple-model">
                <title>Final POM for simple-model</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
                    &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>The <acronym>POM</acronym> shown in <xref
                                                           linkend="ex-final-pom-for-simple-persist" /> is the<indexterm>
                    <primary>simple-persist POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-persist POM</tertiary>
                </indexterm> <varname>simple-persist</varname> project’s
                <acronym>POM</acronym>. The <varname>simple-persist</varname> project
                contains all of the persistence logic that is implemented using <phrase
                                                                                     role="keep-together">Hibernate</phrase>.</para>

            <example id="ex-final-pom-for-simple-persist">
                <title>Final POM for simple-persist</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
                    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>The <acronym>POM</acronym> shown in <xref
                                                           linkend="ex-final-pom-for-simple-weather" /> is the<indexterm>
                    <primary>simple-weather POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-weather POM</tertiary>
                </indexterm><indexterm>
                    <primary>weather project (example)</primary>

                    <secondary>final simple-weather POM</secondary>
                </indexterm> <varname>simple-weather</varname> project’s
                <acronym>POM</acronym>. The <varname>simple-weather</varname> project is
                the project that contains all of the logic to parse the Yahoo! Weather
                <acronym>RSS</acronym> feed. This project depends on the
                <varname>simple-model</varname> project.</para>

            <example id="ex-final-pom-for-simple-weather">
                <title>Final POM for simple-weather</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;

                    &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;log4j&lt;/groupId&gt;
                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
                    &lt;version&gt;1.2.14&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;dom4j&lt;/groupId&gt;
                    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
                    &lt;version&gt;1.6.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;jaxen&lt;/groupId&gt;
                    &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
                    &lt;version&gt;1.1.1&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
                    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
                    &lt;version&gt;1.3.2&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>

            <para>Finally, the <acronym>POM</acronym> shown in <xref
                                                                    linkend="ex-final-pom-for-simple-webapp" /> is the<indexterm>
                    <primary>simple-webapp POM (for reference)</primary>
                </indexterm><indexterm>
                    <primary>pom.xml file</primary>

                    <secondary>final POMs (for reference)</secondary>

                    <tertiary>simple-webapp POM</tertiary>
                </indexterm><indexterm>
                    <primary>Web applications</primary>

                    <secondary>final simple-weather POM</secondary>
                </indexterm> <varname>simple-webapp</varname> project’s
                <acronym>POM</acronym>. The <varname>simple-webapp</varname> project
                contains a web application that stores retrieved weather forecasts in an
                <acronym>HSQLDB</acronym> database and that also interacts with the
                libraries generated by the <varname>simple-weather</varname>
                project.</para>

            <example id="ex-final-pom-for-simple-webapp">
                <title>Final POM for simple-webapp</title>

                <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;parent&gt;
                    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
                    &lt;version&gt;1.0&lt;/version&gt;
                    &lt;/parent&gt;

                    &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.4&lt;/version&gt;
                    &lt;scope&gt;provided&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
                    &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
                    &lt;version&gt;\${project.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                    &lt;artifactId&gt;spring&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;jstl&lt;/artifactId&gt;
                    &lt;version&gt;1.1.2&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;taglibs&lt;/groupId&gt;
                    &lt;artifactId&gt;standard&lt;/artifactId&gt;
                    &lt;version&gt;1.1.2&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
                    &lt;artifactId&gt;velocity&lt;/artifactId&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;version&gt;6.1.9&lt;/version&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;hsqldb&lt;/groupId&gt;
                    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
                    &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;/project&gt;
                </programlisting>
            </example>
        </section>

        <section id="optimizing-sect-conclusion">
            <title>Conclusion</title>

            <para>This chapter has shown you several techniques for improving the
                control of your dependencies and plugins to ease future maintenance of
                your builds. We recommend periodically reviewing your builds in this way
                to ensure that duplication and thus <phrase
                                                         role="keep-together">potential</phrase> trouble spots are minimized. As a
                project matures, new dependencies are inevitably introduced, and you may
                find that a dependency previously used in 1 place is now used in 10 and
                should be moved up. The used and unused dependencies list changes over
                <indexterm class="endofrange" startref="optref1a"></indexterm><indexterm
                                                                                   class="endofrange" startref="optref1b"></indexterm>time and can easily be
                cleaned up with the Maven Dependency plugin.</para>
        </section>
    </chapter>

    <appendix id="appendix-license">
        <title>Creative Commons License</title>

        <para>This work is licensed under a Creative Commons
            Attribution-Noncommercial-No Derivative Works 3.0 United States license.
            For more information about this license, see <ulink
                                                              url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">http://creativecommons.org/licenses/by-nc-nd/3.0/us/</ulink>.
            You are free to share, copy, distribute, display, and perform the work
            under the following conditions:</para>

        <itemizedlist>
            <listitem>
                <para>You must attribute the work to Sonatype, Inc. with a link to
                    <ulink
                         url="http://www.sonatype.com">http://www.sonatype.com</ulink>.</para>
            </listitem>

            <listitem>
                <para>You may not use this work for commercial purposes.</para>
            </listitem>

            <listitem>
                <para>You may not alter, transform, or build upon this work.</para>
            </listitem>
        </itemizedlist>

        <para>If you redistribute this work on a web page, you must include the
            following link with the URL in the about attribute listed on a single line
            (remove the backslashes and join all URL parameters):</para>

        <programlisting>&lt;div xmlns:cc="http://creativecommons.org/ns#" 
            about="http://creativecommons.org/license/results-one?q_1=2&amp;q_1=1\
            &amp;field_commercial=n&amp;field_derivatives=n&amp;field_jurisdiction=us\
            &amp;field_format=StillImage&amp;field_worktitle=Repository%3A+\Management\
            &amp;field_attribute_to_name=Sonatype%2C+Inc.\
            &amp;field_attribute_to_url=http%3A%2F%2Fwww.sonatype.com\
            &amp;field_sourceurl=http%3A%2F%2Fwww.sonatype.com%2Fbook\
            &amp;lang=en_US&amp;language=en_US&amp;n_questions=3"&gt;
            &lt;a rel="cc:attributionURL" property="cc:attributionName" 
            href="http://www.sonatype.com"&gt;Sonatype, Inc.&lt;/a&gt; / 
            &lt;a rel="license" 
            href="http://creativecommons.org/licenses/by-nc-nd/3.0/us/"&gt;
            CC BY-NC-ND 3.0&lt;/a&gt;
            &lt;/div&gt;</programlisting>

        <para>When downloaded or distributed in a jurisdiction other than the
            United States of America, this work shall be covered by the appropriate
            ported version of Creative Commons Attribution-Noncommercial-No Derivative
            Works 3.0 license for the specific jurisdiction. If the Creative Commons
            Attribution-Noncommercial-No Derivative Works version 3.0 license is not
            available for a specific jurisdiction, this work shall be covered under
            the Creative Commons Attribution-Noncommercial-No Derivate Works version
            2.5 license for the jurisdiction in which the work was downloaded or
            distributed. A comprehensive list of jurisdictions for which a Creative
            Commons license is available can be found on the Creative Commons
            International web site at <ulink
                                           url="http://creativecommons.org/international">http://creativecommons.org/international</ulink>.</para>

        <para>If no ported version of the Creative Commons license exists for a
            particular jurisdiction, this work shall be covered by the generic,
            unported Creative Commons Attribution-Noncommercial-No Derivative Works
            version 3.0 license available from <ulink
                                                    url="http://creativecommons.org/licenses/by-nc-nd/3.0/">http://creativecommons.org/licenses/by-nc-nd/3.0/</ulink>.</para>

        <section id="copyright-sect-creative-commons">
            <title>Creative Commons BY-NC-ND 3.0 US License</title>

            <para><ulink
                       url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/legalcode">Creative
                    Commons Attribution-NonCommercial-NoDerivs 3.0 United
                    States</ulink></para>

            <para>THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
                CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS
                PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK
                OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS
                PROHIBITED.</para>

            <para>BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
                AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS
                LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE
                RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS
                AND CONDITIONS.</para>

            <orderedlist>
                <listitem>
                    <para>Definitions</para>

                    <orderedlist numeration="loweralpha">
                        <listitem>
                            <para><emphasis>"Collective Work"</emphasis> means a work, such
                                as a periodical issue, anthology or encyclopedia, in which the
                                Work in its entirety in unmodified form, along with one or more
                                other contributions, constituting separate and independent works
                                in themselves, are assembled into a collective whole. A work
                                that constitutes a Collective Work will not be considered a
                                Derivative Work (as defined below) for the purposes of this
                                License.</para>
                        </listitem>

                        <listitem>
                            <para><emphasis>"Derivative Work"</emphasis> means a work based
                                upon the Work or upon the Work and other pre-existing works,
                                such as a translation, musical arrangement, dramatization,
                                fictionalization, motion picture version, sound recording, art
                                reproduction, abridgment, condensation, or any other form in
                                which the Work may be recast, transformed, or adapted, except
                                that a work that constitutes a Collective Work will not be
                                considered a Derivative Work for the purpose of this License.
                                For the avoidance of doubt, where the Work is a musical
                                composition or sound recording, the synchronization of the Work
                                in timed-relation with a moving image ("synching") will be
                                considered a Derivative Work for the purpose of this
                                License.</para>
                        </listitem>

                        <listitem>
                            <para><emphasis>"Licensor"</emphasis> means the individual,
                                individuals, entity or entities that offers the Work under the
                                terms of this License.</para>
                        </listitem>

                        <listitem>
                            <para><emphasis>"Original Author"</emphasis> means the
                                individual, individuals, entity or entities who created the
                                Work.</para>
                        </listitem>

                        <listitem>
                            <para><emphasis>"Work"</emphasis> means the copyrightable work
                                of authorship offered under the terms of this License.</para>
                        </listitem>

                        <listitem>
                            <para><emphasis>"You"</emphasis> means an individual or entity
                                exercising rights under this License who has not previously
                                violated the terms of this License with respect to the Work, or
                                who has received express permission from the Licensor to
                                exercise rights under this License despite a previous
                                violation.</para>
                        </listitem>
                    </orderedlist>
                </listitem>

                <listitem>
                    <para><emphasis>Fair Use Rights.</emphasis> Nothing in this license
                        is intended to reduce, limit, or restrict any rights arising from
                        fair use, first sale or other limitations on the exclusive rights of
                        the copyright owner under copyright law or other applicable
                        laws.</para>
                </listitem>

                <listitem>
                    <para><emphasis>License Grant.</emphasis> Subject to the terms and
                        conditions of this License, Licensor hereby grants You a worldwide,
                        royalty-free, non-exclusive, perpetual (for the duration of the
                        applicable copyright) license to exercise the rights in the Work as
                        stated below:</para>

                    <orderedlist numeration="loweralpha">
                        <listitem>
                            <para>to reproduce the Work, to incorporate the Work into one or
                                more Collective Works, and to reproduce the Work as incorporated
                                in the Collective Works; and,</para>
                        </listitem>

                        <listitem>
                            <para>to distribute copies or phonorecords of, display publicly,
                                perform publicly, and perform publicly by means of a digital
                                audio transmission the Work including as incorporated in
                                Collective Works.</para>
                        </listitem>
                    </orderedlist>

                    <para>The above rights may be exercised in all media and formats
                        whether now known or hereafter devised. The above rights include the
                        right to make such modifications as are technically necessary to
                        exercise the rights in other media and formats, but otherwise you
                        have no rights to make Derivative Works. All rights not expressly
                        granted by Licensor are hereby reserved, including but not limited
                        to the rights set forth in Sections 4(d) and 4(e).</para>
                </listitem>

                <listitem>
                    <para><emphasis>Restrictions.</emphasis>The license granted in
                        Section 3 above is expressly made subject to and limited by the
                        following restrictions:</para>

                    <orderedlist numeration="loweralpha">
                        <listitem>
                            <para>You may distribute, publicly display, publicly perform, or
                                publicly digitally perform the Work only under the terms of this
                                License, and You must include a copy of, or the Uniform Resource
                                Identifier for, this License with every copy or phonorecord of
                                the Work You distribute, publicly display, publicly perform, or
                                publicly digitally perform. You may not offer or impose any
                                terms on the Work that restrict the terms of this License or the
                                ability of a recipient of the Work to exercise the rights
                                granted to that recipient under the terms of the License. You
                                may not sublicense the Work. You must keep intact all notices
                                that refer to this License and to the disclaimer of warranties.
                                When You distribute, publicly display, publicly perform, or
                                publicly digitally perform the Work, You may not impose any
                                technological measures on the Work that restrict the ability of
                                a recipient of the Work from You to exercise the rights granted
                                to that recipient under the terms of the License. This Section
                                4(a) applies to the Work as incorporated in a Collective Work,
                                but this does not require the Collective Work apart from the
                                Work itself to be made subject to the terms of this License. If
                                You create a Collective Work, upon notice from any Licensor You
                                must, to the extent practicable, remove from the Collective Work
                                any credit as required by Section 4(c), as requested.</para>
                        </listitem>

                        <listitem>
                            <para>You may not exercise any of the rights granted to You in
                                Section 3 above in any manner that is primarily intended for or
                                directed toward commercial advantage or private monetary
                                compensation. The exchange of the Work for other copyrighted
                                works by means of digital file-sharing or otherwise shall not be
                                considered to be intended for or directed toward commercial
                                advantage or private monetary compensation, provided there is no
                                payment of any monetary compensation in connection with the
                                exchange of copyrighted works.</para>
                        </listitem>

                        <listitem>
                            <para>If You distribute, publicly display, publicly perform, or
                                publicly digitally perform the Work (as defined in Section 1
                                above) or Collective Works (as defined in Section 1 above), You
                                must, unless a request has been made pursuant to Section 4(a),
                                keep intact all copyright notices for the Work and provide,
                                reasonable to the medium or means You are utilizing: (i) the
                                name of the Original Author (or pseudonym, if applicable) if
                                supplied, and/or (ii) if the Original Author and/or Licensor
                                designate another party or parties (e.g. a sponsor institute,
                                publishing entity, journal) for attribution ("Attribution
                                Parties") in Licensor's copyright notice, terms of service or by
                                other reasonable means, the name of such party or parties; the
                                title of the Work if supplied; to the extent reasonably
                                practicable, the Uniform Resource Identifier, if any, that
                                Licensor specifies to be associated with the Work, unless such
                                URI does not refer to the copyright notice or licensing
                                information for the Work. The credit required by this Section
                                4(c) may be implemented in any reasonable manner; provided,
                                however, that in the case of a Collective Work, at a minimum
                                such credit will appear, if a credit for all contributing
                                authors of the Collective Work appears, then as part of these
                                credits and in a manner at least as prominent as the credits for
                                the other contributing authors. For the avoidance of doubt, You
                                may only use the credit required by this clause for the purpose
                                of attribution in the manner set out above and, by exercising
                                Your rights under this License, You may not implicitly or
                                explicitly assert or imply any connection with, sponsorship or
                                endorsement by the Original Author, Licensor and/or Attribution
                                Parties, as appropriate, of You or Your use of the Work, without
                                the separate, express prior written permission of the Original
                                Author, Licensor and/or Attribution Parties.</para>
                        </listitem>

                        <listitem>
                            <para>For the avoidance of doubt, where the Work is a musical
                                composition:</para>

                            <orderedlist numeration="lowerroman">
                                <listitem>
                                    <para><emphasis>Performance Royalties Under Blanket
                                            Licenses.</emphasis> Licensor reserves the exclusive right
                                        to collect whether individually or, in the event that
                                        Licensor is a member of a performance rights society (e.g.
                                        ASCAP, BMI, SESAC), via that society, royalties for the
                                        public performance or public digital performance (e.g.
                                        webcast) of the Work if that performance is primarily
                                        intended for or directed toward commercial advantage or
                                        private monetary compensation.</para>
                                </listitem>

                                <listitem>
                                    <para><emphasis>Mechanical Rights and Statutory
                                            Royalties.</emphasis> Licensor reserves the exclusive right
                                        to collect, whether individually or via a music rights
                                        agency or designated agent (e.g. Harry Fox Agency),
                                        royalties for any phonorecord You create from the Work
                                        ("cover version") and distribute, subject to the compulsory
                                        license created by 17 USC Section 115 of the US Copyright
                                        Act (or the equivalent in other jurisdictions), if Your
                                        distribution of such cover version is primarily intended for
                                        or directed toward commercial advantage or private monetary
                                        compensation.</para>
                                </listitem>
                            </orderedlist>
                        </listitem>

                        <listitem>
                            <para><emphasis>Webcasting Rights and Statutory
                                    Royalties.</emphasis> For the avoidance of doubt, where the Work
                                is a sound recording, Licensor reserves the exclusive right to
                                collect, whether individually or via a performance-rights
                                society (e.g. SoundExchange), royalties for the public digital
                                performance (e.g. webcast) of the Work, subject to the
                                compulsory license created by 17 USC Section 114 of the US
                                Copyright Act (or the equivalent in other jurisdictions), if
                                Your public digital performance is primarily intended for or
                                directed toward commercial advantage or private monetary
                                compensation.</para>
                        </listitem>
                    </orderedlist>
                </listitem>

                <listitem>
                    <para><emphasis>Representations, Warranties and
                            Disclaimer</emphasis></para>

                    <para>UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
                        LICENSOR OFFERS THE WORK AS-IS AND ONLY TO THE EXTENT OF ANY RIGHTS
                        HELD IN THE LICENSED WORK BY THE LICENSOR. THE LICENSOR MAKES NO
                        REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
                        EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT
                        LIMITATION, WARRANTIES OF TITLE, MARKETABILITY, MERCHANTIBILITY,
                        FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF
                        LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF
                        ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW
                        THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY
                        TO YOU.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Limitation on Liability.</emphasis> EXCEPT TO THE
                        EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE
                        LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL,
                        CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS
                        LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF
                        THE POSSIBILITY OF SUCH DAMAGES.</para>
                </listitem>

                <listitem>
                    <para><emphasis>Termination</emphasis><orderedlist
                                                               numeration="loweralpha">
                            <listitem>
                                <para>This License and the rights granted hereunder will
                                    terminate automatically upon any breach by You of the terms of
                                    this License. Individuals or entities who have received
                                    Collective Works (as defined in Section 1 above) from You
                                    under this License, however, will not have their licenses
                                    terminated provided such individuals or entities remain in
                                    full compliance with those licenses. Sections 1, 2, 5, 6, 7,
                                    and 8 will survive any termination of this License.</para>
                            </listitem>

                            <listitem>
                                <para>Subject to the above terms and conditions, the license
                                    granted here is perpetual (for the duration of the applicable
                                    copyright in the Work). Notwithstanding the above, Licensor
                                    reserves the right to release the Work under different license
                                    terms or to stop distributing the Work at any time; provided,
                                    however that any such election will not serve to withdraw this
                                    License (or any other license that has been, or is required to
                                    be, granted under the terms of this License), and this License
                                    will continue in full force and effect unless terminated as
                                    stated above.</para>
                            </listitem>
                    </orderedlist></para>
                </listitem>

                <listitem>
                    <para>Miscellaneous</para>

                    <orderedlist numeration="loweralpha">
                        <listitem>
                            <para>Each time You distribute or publicly digitally perform the
                                Work (as defined in Section 1 above) or a Collective Work (as
                                defined in Section 1 above), the Licensor offers to the
                                recipient a license to the Work on the same terms and conditions
                                as the license granted to You under this License.</para>
                        </listitem>

                        <listitem>
                            <para>If any provision of this License is invalid or
                                unenforceable under applicable law, it shall not affect the
                                validity or enforceability of the remainder of the terms of this
                                License, and without further action by the parties to this
                                agreement, such provision shall be reformed to the minimum
                                extent necessary to make such provision valid and
                                enforceable.</para>
                        </listitem>

                        <listitem>
                            <para>No term or provision of this License shall be deemed
                                waived and no breach consented to unless such waiver or consent
                                shall be in writing and signed by the party to be charged with
                                such waiver or consent.</para>
                        </listitem>

                        <listitem>
                            <para>This License constitutes the entire agreement between the
                                parties with respect to the Work licensed here. There are no
                                understandings, agreements or representations with respect to
                                the Work not specified here. Licensor shall not be bound by any
                                additional provisions that may appear in any communication from
                                You. This License may not be modified without the mutual written
                                agreement of the Licensor and You.</para>
                        </listitem>
                    </orderedlist>
                </listitem>
            </orderedlist>

            <para>Creative Commons Notice</para>

            <para>Creative Commons is not a party to this License, and makes no
                warranty whatsoever in connection with the Work. Creative Commons will
                not be liable to You or any party on any legal theory for any damages
                whatsoever, including without limitation any general, special,
                incidental or consequential damages arising in connection to this
                license. Notwithstanding the foregoing two (2) sentences, if Creative
                Commons has expressly identified itself as the Licensor hereunder, it
                shall have all rights and obligations of Licensor.</para>

            <para>Except for the limited purpose of indicating to the public that
                the Work is licensed under the CCPL, Creative Commons does not authorize
                the use by either party of the trademark "Creative Commons" or any
                related trademark or logo of Creative Commons without the prior written
                consent of Creative Commons. Any permitted use will be in compliance
                with Creative Commons' then-current trademark usage guidelines, as may
                be published on its website or otherwise made available upon request
                from time to time. For the avoidance of doubt, this trademark
                restriction does not form part of this License.</para>

            <para>Creative Commons may be contacted at
                http://creativecommons.org/.</para>
        </section>

    </appendix>

    <appendix id="appendix-changes">
        <title>Book Revision History</title>

        <para>Many readers have been asking us to keep track of specific changes to
            the book content, the following sections list changes made to the book in
            reverse chronological order starting with ${project.version}.</para>

        <section>
            <title>Changes in Edition 0.5.2</title>

            <para>The following changes were made in 0.5.2:</para>

            <itemizedlist>
                <listitem>
                    <para>Fixed example download link. (<ulink
                                                             url="https://issues.sonatype.org/browse/MVNEX-123">MVNEX-123</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a minor typo in <xref
                                                     linkend="web-sect-defining-simple-web" />. "one which that" -&gt; "one
                        using". (<ulink
                                      url="https://issues.sonatype.org/browse/MVNEX-108">MVNEX-108</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Implemented some minor reordering issues in <xref
                                                                           linkend="multimodule-sect-simple-weather" /> to make sure that the
                        WeatherService example is referenced before it is listed. (<ulink
                                                                                        url="https://issues.sonatype.org/browse/MVNEX-89">MVNEX-89</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Added a clarifying sentence to the end of <xref
                                                                         linkend="customizing-sect-attaching-assembly" /> to make it clear that
                        the package phase comes before the install phase and that running
                        <command>mvn install</command> will have the same effect.</para>
                </listitem>

                <listitem>
                    <para>Fixed an incorrect email address in <xref
                                                                   linkend="preface-1-sect-feedback" />. (<ulink
                                                                                                               url="https://issues.sonatype.org/browse/MVNEX-128">MVNEX-128</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed an incorrect Sonatype Blog URL in <xref
                                                                       linkend="public-foreword" />. (<ulink
                                                                                                           url="https://issues.sonatype.org/browse/MVNEX-127">MVNEX-127</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Standardized the capitalization of all figure and example titles
                        throughout the book. (<ulink
                                                   url="https://issues.sonatype.org/browse/MVNEX-26">MVNEX-26</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated Sonatype address on cover. (<ulink
                                                                   url="https://issues.sonatype.org/browse/MVNEX-125">MVNEX-125</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated trademarks (Sun -&gt; Oracle). (<ulink
                                                                       url="https://issues.sonatype.org/browse/MVNEX-126">MVNEX-126</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated PDF Cover to reference Maven 3. (<ulink
                                                                        url="https://issues.sonatype.org/browse/MVNEX-129">MVNEX-129</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated ePub Cover to reference Maven 3. (<ulink
                                                                         url="https://issues.sonatype.org/browse/MVNEX-124">MVNEX-124</ulink>)</para>
                </listitem>
            </itemizedlist>

            <para>Special thanks to:</para>

            <itemizedlist>
                <listitem>
                    <para>Andreas Grunewald for reporting various issues and typos
                        throughout the book.</para>
                </listitem>

                <listitem>
                    <para>Ion Iovu for identifying typos in the book.</para>
                </listitem>

                <listitem>
                    <para>John Yeary for catching hard to find cross referencing issues
                        and various other issues.</para>
                </listitem>

                <listitem>
                    <para>Grant Birchmeier for catching capitalization errors throughout
                        the book.</para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <title>Changes in Edition 0.5.1</title>

            <para>The following changes were made in 0.5.1:</para>

            <itemizedlist>
                <listitem>
                    <para>Various changes to the book website to present sidebar content.
                        (<ulink
                              url="https://issues.sonatype.org/browse/MVNEX-121">MVNEX-121</ulink>
                        and <ulink
                                 url="https://issues.sonatype.org/browse/MVNEX-122">MVNEX-122</ulink>)</para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <title>Changes in Edition 0.5</title>

            <para>The following changes were made in 0.5:</para>

            <itemizedlist>
                <listitem>
                    <para>A typo was fixed in <xref
                                                   linkend="installation-sect-details" />. JAR file incorrectly listed as
                        classwords-1.1.jar -&gt; classworlds-1.1.jar. (<ulink
                                                                            url="https://issues.sonatype.org/browse/MVNEX-116">MVNEX-116</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a problem with a missing example which was leading to a
                        dangling reference. <xref linkend="example_weatherservice_class" />
                        (<ulink
                              url="https://issues.sonatype.org/browse/MVNEX-115">MVNEX-115</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a number of naming problems in <xref linkend="web" />. The
                        "simple-webapp" project was repeatedly referred to as the "simple-web"
                        project. (<ulink
                                       url="https://issues.sonatype.org/browse/MVNEX-114">MVNEX-114</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Changed the number of the simple Maven Archetype when calling
                        generate to #77 in <xref
                                                linkend="simple-project-sect-create-simple" />. Also added a note in
                        the event that the archetype number changes. (<ulink
                                                                           url="https://issues.sonatype.org/browse/MVNEX-113">MVNEX-113</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a subtle, yet frustrating font problem in <xref
                                                                               linkend="installation-sect-details" />. A sentence was causing
                        confusion because it started with "lib/" in an inline monospaced font.
                        This sentence has been modified. (<ulink
                                                               url="https://issues.sonatype.org/browse/MVNEX-112">MVNEX-112</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Maven by Example is now available as an epub. (<ulink
                                                                              url="https://issues.sonatype.org/browse/MVNEX-57">MVNEX-57</ulink>)</para>
                </listitem>
            </itemizedlist>

            <para>Special thanks to:</para>

            <itemizedlist>
                <listitem>
                    <para>Alexander Pogrebnyak and Ilya Klyuchnikov for submitting
                        numerous bug and typo reports.</para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <title>Changes in Edition 0.4</title>

            <para>The following changes were made in 0.4:</para>

            <itemizedlist>
                <listitem>
                    <para>Changed "task" to "goal" in <xref
                                                           linkend="simple-project-sect-maven-coordinates" />. (<ulink
                                                                                                                     url="https://issues.sonatype.org/browse/MVNEX-107">MVNEX-107</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Removed a note containing a reference to the wagon from <xref
                                                                                       linkend="multimodule-web-spring-sect-simple-web" />. (<ulink
                                                                                                                                                  url="https://issues.sonatype.org/browse/MVNEX-105">MVNEX-105</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a typo in <xref
                                               linkend="multimodule-web-spring-sect-simple-persist" />,
                        "javax.transaction:javax" -&gt; "javax.transaction:jta". (<ulink
                                                                                       url="https://issues.sonatype.org/browse/MVNEX-104">MVNEX-104</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a typo in <xref
                                               linkend="multimodule-web-spring-sect-simple-persist" />. (<ulink
                                                                                                              url="https://issues.sonatype.org/browse/MVNEX-103">MVNEX-103</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a code error in <xref
                                                     linkend="customizing-sect-simple-weather-source" />. (<ulink
                                                                                                                url="https://issues.sonatype.org/browse/MVNEX-101">MVNEX-101</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Added a note about stopping Jetty before running another server
                        in <xref linkend="web-sect-adding-j2ee-depend" />. (<ulink
                                                                                 url="https://issues.sonatype.org/browse/MVNEX-101">MVNEX-101</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Added a missing double quote to XML in <xref
                                                                      linkend="ex-spring-app-ctx-simple-weather" />. (<ulink
                                                                                                                           url="https://issues.sonatype.org/browse/MVNEX-101">MVNEX-101</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Changed default archetype ID to #16 in <xref
                                                                      linkend="simple-project-sect-create-simple" />. (<ulink
                                                                                                                            url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed an issue with the "packageName" parameter in <xref
                                                                                  linkend="simple-project-sect-create-simple" />. (<ulink
                                                                                                                                        url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Corrected package parameter for generate goal in <xref
                                                                                linkend="simple-project-sect-plugins-goals" />. (<ulink
                                                                                                                                      url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Changed the default archetype ID to #16 in <xref
                                                                          linkend="customizing-sect-creating-simple-weather" />. (<ulink
                                                                                                                                       url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Corrected package parameter for the generate goal in <xref
                                                                                    linkend="customizing-sect-creating-simple-weather" />. (<ulink
                                                                                                                                                 url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Changed the default webapp archetype number to #19 in <xref
                                                                                     linkend="web-sect-creating-project" />. (<ulink
                                                                                                                                   url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Corrected package parameter for the generate goal in <xref
                                                                                    linkend="web-sect-creating-project" />. (<ulink
                                                                                                                                  url="https://issues.sonatype.org/browse/MVNEX-100">MVNEX-100</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a dangling cross-reference in <xref
                                                                   linkend="multimodule-web-spring-sect-simple-web" />. (<ulink
                                                                                                                              url="https://issues.sonatype.org/browse/MVNEX-97">MVNEX-97</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed typo in <xref linkend="example_weatherservice_class" />.
                        (<ulink
                              url="https://issues.sonatype.org/browse/MVNEX-94">MVNEX-94</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed name of HSQLDB project in <xref
                                                               linkend="multimodule-web-spring-sect-example-tech" />. (<ulink
                                                                                                                            url="https://issues.sonatype.org/browse/MVNEX-91">MVNEX-91</ulink>)</para>
                </listitem>
            </itemizedlist>

            <para>Thanks to Kedar Mhaswade for reporting use of work "task" in <xref
                                                                                    linkend="simple-project-sect-maven-coordinates" />. Thanks to David M.
                Karr for reporting an inconsistency in <xref
                                                            linkend="multimodule-web-spring-sect-simple-web" /> and for finding
                various errors and inconsistencies throughout the book. Thanks to Emir
                Ibrahimbegovic for finding various errors and inconsistencies throughout
                the book. Thanks to Francois Jean for reporting an error in <xref
                                                                                 linkend="simple-project-sect-create-simple" />.</para>

            <para>Special thanks to John Yeary for finding various bugs throughout the
                book. John's comprehensive review of the material drove more than 30 fixes
                in Edition 0.4.</para>
        </section>

        <section>
            <title>Changes in Edition 0.2.1</title>

            <para>The following changes were made in 0.2.1:</para>

            <itemizedlist>
                <listitem>
                    <para>Minor typos were fixed throughout the book.</para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <title>Changes in Edition 0.2</title>

            <para>The following changes were made in 0.2:</para>

            <itemizedlist>
                <listitem>
                    <para>The book index was expanded and improved. (<ulink
                                                                          url="https://issues.sonatype.org/browse/MVNEX-56">MVNEX-56</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Added a Table of Figures. (<ulink
                                                          url="https://issues.sonatype.org/browse/MVNEX-58">MVNEX-58</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Added a Table of Examples. (<ulink
                                                           url="https://issues.sonatype.org/browse/MVNEX-59">MVNEX-59</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a small formatting error in <xref
                                                                 linkend="customizing-sect-skipping-tests" />. (<ulink
                                                                                                                     url="https://issues.sonatype.org/browse/MVNEX-22">MVNEX-22</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Fixed a program listing typo in <xref
                                                               linkend="customizing-sect-simple-weather-source" />. (<ulink
                                                                                                                          url="https://issues.sonatype.org/browse/MVNEX-31">MVNEX-31</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Modified examples download information for the new book. (<ulink
                                                                                         url="https://issues.sonatype.org/browse/MVNEX-68">MVNEX-68</ulink>)</para>
                </listitem>
            </itemizedlist>
        </section>

        <section>
            <title>Changes in Edition 0.1</title>

            <para>This is the initial version of Maven: The Complete Reference.</para>

            <para>The following changes were made:</para>

            <itemizedlist>
                <listitem>
                    <para>Removed all cross-references that referenced content in the
                        former Part I of Maven: The Definitive Guide. (<ulink
                                                                            url="https://issues.sonatype.org/browse/MVNEX-1">MVNEX-1</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Uploaded new book to Scribd as both a private staging version
                        and a public production version. Updated the book project's pom.xml
                        accordingly. (<ulink type=""
                                             url="https://issues.sonatype.org/browse/MVNEX-2">MVNEX-2</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Cloned Maven: The Definitive Guide's Github repository and
                        created a new Github repository for Maven by Example. (<ulink type=""
                                                                                      url="https://issues.sonatype.org/browse/MVNEX-3"
                                                                                      userlevel="">MVNEX-3</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Modified the book project build to publish book to new URL and
                        to use new identifiers for all generated artifacts. (<ulink
                                                                                  url="https://issues.sonatype.org/browse/MVNEX-4">MVNEX-4</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Created a new book cover for the downloadable PDF version of
                        Maven by Example. (<ulink
                                                url="https://issues.sonatype.org/browse/MVNEX-5">MVNEX-5</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Modified the title page for Maven by Example. (<ulink
                                                                              url="https://issues.sonatype.org/browse/MVNEX-6">MVNEX-6</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Assigned new ISBN to Maven by Example (978-0-9842433-3-4
                        0-9842433-3-X). (<ulink
                                              url="https://issues.sonatype.org/browse/MVNEX-8">MVNEX-8</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Created a GetSatisfaction page for Maven: The Complete
                        Reference, here: <ulink
                                              url="http://www.getsatisfaction.com/sonatype/products/sonatype_maven_the_complete_reference">http://www.getsatisfaction.com/sonatype/products/sonatype_maven_by_example</ulink>
                        . (<ulink
                                url="https://issues.sonatype.org/browse/MVNEX-9">MVNEX-9</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Created automated Hudson jobs for publishing to staging and
                        production. (<ulink
                                          url="https://issues.sonatype.org/browse/MVNEX-20">MVNEX-20</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Updated front matter and copyright to match other Sonatype
                        books. (<ulink type=""
                                       url="https://issues.sonatype.org/browse/MVNEX-19"
                                       userlevel="">MVNEX-19</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Modified the web site template for the book pages. (<ulink
                                                                                   url="https://issues.sonatype.org/browse/MVNEX-7">MVNEX-7</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Add Maven by Example to the Sonatype Books page. (<ulink
                                                                                 url="https://issues.sonatype.org/browse/MVNEX-14">MVNEX-14</ulink>)</para>
                </listitem>

                <listitem>
                    <para>Created a download form for Maven by Example PDF. (<ulink
                                                                                  url="https://issues.sonatype.org/browse/MVNEX-16">MVNEX-16</ulink>)</para>
                </listitem>
            </itemizedlist>
        </section>
    </appendix>

    <index></index>
</book>
